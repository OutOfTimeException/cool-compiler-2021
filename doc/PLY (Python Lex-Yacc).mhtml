From: <Saved by Blink>
Snapshot-Content-Location: https://www.dabeaz.com/ply/ply.html
Subject: PLY (Python Lex-Yacc)
Date: Fri, 24 Sep 2021 16:02:41 -0000
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----MultipartBoundary--GnEf29mHDl0EdyFbl8ooKttanCHpj7LsdK6pxfyeVY----"


------MultipartBoundary--GnEf29mHDl0EdyFbl8ooKttanCHpj7LsdK6pxfyeVY----
Content-Type: text/html
Content-ID: <frame-BA16376EFFF08608D036EFB42F52CDFB@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: https://www.dabeaz.com/ply/ply.html

<!DOCTYPE html><html lang=3D"en"><head><meta http-equiv=3D"Content-Type" co=
ntent=3D"text/html; charset=3DUTF-8"><link rel=3D"stylesheet" type=3D"text/=
css" href=3D"cid:css-228e2c9b-b99d-4c5f-a378-5f7956c28336@mhtml.blink" />
    <title>PLY (Python Lex-Yacc)</title>
    <!-- Required meta tags -->
   =20
    <meta name=3D"viewport" content=3D"width=3Ddevice-width, initial-scale=
=3D1, shrink-to-fit=3Dno">

    <!-- Bootstrap CSS -->
    <link rel=3D"stylesheet" href=3D"https://maxcdn.bootstrapcdn.com/bootst=
rap/4.0.0-beta/css/bootstrap.min.css" crossorigin=3D"anonymous">


  </head>
  <body>


<nav class=3D"navbar navbar-expand-lg navbar-light bg-light">
  <a class=3D"navbar-brand" href=3D"https://www.dabeaz.com/index.html">dabe=
az</a>
  <button class=3D"navbar-toggler" type=3D"button" data-toggle=3D"collapse"=
 data-target=3D"#navbarSupportedContent" aria-controls=3D"navbarSupportedCo=
ntent" aria-expanded=3D"false" aria-label=3D"Toggle navigation">
    <span class=3D"navbar-toggler-icon"></span>
  </button>

  <div class=3D"collapse navbar-collapse" id=3D"navbarSupportedContent">
    <ul class=3D"navbar-nav mr-auto">


      <li class=3D"nav-item">
        <a class=3D"nav-link" href=3D"https://www.dabeaz.com/courses.html">=
Courses</a>
      </li>

  <li class=3D"nav-item dropdown">
    <a class=3D"nav-link dropdown-toggle" data-toggle=3D"dropdown" href=3D"=
https://www.dabeaz.com/ply/ply.html#" role=3D"button" aria-haspopup=3D"true=
" aria-expanded=3D"false">Writing</a>
    <div class=3D"dropdown-menu">
      <a class=3D"dropdown-item" href=3D"https://www.dabeaz.com/ply/python-=
../distilled/index.html">Python Distilled</a>     =20
      <a class=3D"dropdown-item" href=3D"https://www.dabeaz.com/per.html">P=
ython Essential Reference</a>
      <a class=3D"dropdown-item" href=3D"https://www.dabeaz.com/cookbook.ht=
ml">Python Cookbook</a>
      <a class=3D"dropdown-item" href=3D"https://www.dabeaz.com/usenix.html=
">Usenix :login;</a>
      <a class=3D"dropdown-item" href=3D"https://www.dabeaz.com/publication=
s.html">Academic Publications</a>
    </div>
  </li>

  <li class=3D"nav-item dropdown">
    <a class=3D"nav-link dropdown-toggle" data-toggle=3D"dropdown" href=3D"=
https://www.dabeaz.com/ply/ply.html#" role=3D"button" aria-haspopup=3D"true=
" aria-expanded=3D"false">Speaking</a>
    <div class=3D"dropdown-menu">
      <a class=3D"dropdown-item" href=3D"https://www.dabeaz.com/talks.html"=
>Talks</a>
      <a class=3D"dropdown-item" href=3D"https://www.dabeaz.com/tutorials.h=
tml">Tutorials</a>
    </div>
  </li>

      <li class=3D"nav-item">
        <a class=3D"nav-link" href=3D"https://www.dabeaz.com/software.html"=
>Software</a>
      </li>
      <li class=3D"nav-item">
        <a class=3D"nav-link" href=3D"https://www.dabeaz.com/about.html">Ab=
out</a>
      </li>
      <li class=3D"nav-item">
	<a class=3D"nav-link" href=3D"https://tinyletter.com/dabeaz">Newsletter</a=
>
      </li>
      <li class=3D"nav-item">
	<a class=3D"nav-link" href=3D"https://gitter.im/dabeaz/community">Chat</a>
      </li>
     =20
    </ul>

    <a href=3D"https://www.dabeaz.com/contact.html" aria-label=3D"Contact">=
Contact</a>

    <!--
    <form class=3D"form-inline my-2 my-lg-0">
      <input class=3D"form-control mr-sm-2" type=3D"text" placeholder=3D"Se=
arch" aria-label=3D"Search">
      <button class=3D"btn btn-outline-success my-2 my-sm-0" type=3D"submit=
">Search</button>
    </form>
    -->
  </div>
</nav>

<div class=3D"container">

 <h1>PLY (Python Lex-Yacc)</h1>
 =20
 <b>
 David M. Beazley <br>
 dave@dabeaz.com<br>
 </b>
=20
 <p>
 <b>PLY Version: 3.11</b>
 </p>
=20
 <!-- INDEX -->
 <div class=3D"sectiontoc">
 <ul>
 <li><a href=3D"https://www.dabeaz.com/ply/ply.html#ply_nn0">Preface and Re=
quirements</a>
 </li><li><a href=3D"https://www.dabeaz.com/ply/ply.html#ply_nn1">Introduct=
ion</a>
 </li><li><a href=3D"https://www.dabeaz.com/ply/ply.html#ply_nn2">PLY Overv=
iew</a>
 </li><li><a href=3D"https://www.dabeaz.com/ply/ply.html#ply_nn3">Lex</a>
 <ul>
 <li><a href=3D"https://www.dabeaz.com/ply/ply.html#ply_nn4">Lex Example</a=
>
 </li><li><a href=3D"https://www.dabeaz.com/ply/ply.html#ply_nn5">The token=
s list</a>
 </li><li><a href=3D"https://www.dabeaz.com/ply/ply.html#ply_nn6">Specifica=
tion of tokens</a>
 </li><li><a href=3D"https://www.dabeaz.com/ply/ply.html#ply_nn7">Token val=
ues</a>
 </li><li><a href=3D"https://www.dabeaz.com/ply/ply.html#ply_nn8">Discarded=
 tokens</a>
 </li><li><a href=3D"https://www.dabeaz.com/ply/ply.html#ply_nn9">Line numb=
ers and positional information</a>
 </li><li><a href=3D"https://www.dabeaz.com/ply/ply.html#ply_nn10">Ignored =
characters</a>
 </li><li><a href=3D"https://www.dabeaz.com/ply/ply.html#ply_nn11">Literal =
characters</a>
 </li><li><a href=3D"https://www.dabeaz.com/ply/ply.html#ply_nn12">Error ha=
ndling</a>
 </li><li><a href=3D"https://www.dabeaz.com/ply/ply.html#ply_nn14">EOF Hand=
ling</a>
 </li><li><a href=3D"https://www.dabeaz.com/ply/ply.html#ply_nn13">Building=
 and using the lexer</a>
 </li><li><a href=3D"https://www.dabeaz.com/ply/ply.html#ply_nn14b">The @TO=
KEN decorator</a>
 </li><li><a href=3D"https://www.dabeaz.com/ply/ply.html#ply_nn15">Optimize=
d mode</a>
 </li><li><a href=3D"https://www.dabeaz.com/ply/ply.html#ply_nn16">Debuggin=
g</a>
 </li><li><a href=3D"https://www.dabeaz.com/ply/ply.html#ply_nn17">Alternat=
ive specification of lexers</a>
 </li><li><a href=3D"https://www.dabeaz.com/ply/ply.html#ply_nn18">Maintain=
ing state</a>
 </li><li><a href=3D"https://www.dabeaz.com/ply/ply.html#ply_nn19">Lexer cl=
oning</a>
 </li><li><a href=3D"https://www.dabeaz.com/ply/ply.html#ply_nn20">Internal=
 lexer state</a>
 </li><li><a href=3D"https://www.dabeaz.com/ply/ply.html#ply_nn21">Conditio=
nal lexing and start conditions</a>
 </li><li><a href=3D"https://www.dabeaz.com/ply/ply.html#ply_nn21b">Miscell=
aneous Issues</a>
 </li></ul>
 </li><li><a href=3D"https://www.dabeaz.com/ply/ply.html#ply_nn22">Parsing =
basics</a>
 </li><li><a href=3D"https://www.dabeaz.com/ply/ply.html#ply_nn23">Yacc</a>
 <ul>
 <li><a href=3D"https://www.dabeaz.com/ply/ply.html#ply_nn24">An example</a=
>
 </li><li><a href=3D"https://www.dabeaz.com/ply/ply.html#ply_nn25">Combinin=
g Grammar Rule Functions</a>
 </li><li><a href=3D"https://www.dabeaz.com/ply/ply.html#ply_nn26">Characte=
r Literals</a>
 </li><li><a href=3D"https://www.dabeaz.com/ply/ply.html#ply_nn26b">Empty P=
roductions</a>
 </li><li><a href=3D"https://www.dabeaz.com/ply/ply.html#ply_nn28">Changing=
 the starting symbol</a>
 </li><li><a href=3D"https://www.dabeaz.com/ply/ply.html#ply_nn27">Dealing =
With Ambiguous Grammars</a>
 </li><li><a href=3D"https://www.dabeaz.com/ply/ply.html#ply_nn28b">The par=
ser.out file</a>
 </li><li><a href=3D"https://www.dabeaz.com/ply/ply.html#ply_nn29">Syntax E=
rror Handling</a>
 <ul>
 <li><a href=3D"https://www.dabeaz.com/ply/ply.html#ply_nn30">Recovery and =
resynchronization with error rules</a>
 </li><li><a href=3D"https://www.dabeaz.com/ply/ply.html#ply_nn31">Panic mo=
de recovery</a>
 </li><li><a href=3D"https://www.dabeaz.com/ply/ply.html#ply_nn35">Signalli=
ng an error from a production</a>
 </li><li><a href=3D"https://www.dabeaz.com/ply/ply.html#ply_nn38">When Do =
Syntax Errors Get Reported</a>
 </li><li><a href=3D"https://www.dabeaz.com/ply/ply.html#ply_nn32">General =
comments on error handling</a>
 </li></ul>
 </li><li><a href=3D"https://www.dabeaz.com/ply/ply.html#ply_nn33">Line Num=
ber and Position Tracking</a>
 </li><li><a href=3D"https://www.dabeaz.com/ply/ply.html#ply_nn34">AST Cons=
truction</a>
 </li><li><a href=3D"https://www.dabeaz.com/ply/ply.html#ply_nn35b">Embedde=
d Actions</a>
 </li><li><a href=3D"https://www.dabeaz.com/ply/ply.html#ply_nn36">Miscella=
neous Yacc Notes</a>
 </li></ul>
 </li><li><a href=3D"https://www.dabeaz.com/ply/ply.html#ply_nn37">Multiple=
 Parsers and Lexers</a>
 </li><li><a href=3D"https://www.dabeaz.com/ply/ply.html#ply_nn38b">Using P=
ython's Optimized Mode</a>
 </li><li><a href=3D"https://www.dabeaz.com/ply/ply.html#ply_nn44">Advanced=
 Debugging</a>
 <ul>
 <li><a href=3D"https://www.dabeaz.com/ply/ply.html#ply_nn45">Debugging the=
 lex() and yacc() commands</a>
 </li><li><a href=3D"https://www.dabeaz.com/ply/ply.html#ply_nn46">Run-time=
 Debugging</a>
 </li></ul>
 </li><li><a href=3D"https://www.dabeaz.com/ply/ply.html#ply_nn49">Packagin=
g Advice</a>
 </li><li><a href=3D"https://www.dabeaz.com/ply/ply.html#ply_nn39">Where to=
 go from here?</a>
 </li></ul>
 </div>
 <!-- INDEX -->
=20
=20
=20
=20
=20
=20
 <h2><a name=3D"ply_nn0"></a>1. Preface and Requirements</h2>
=20
=20
 <p>
 This document provides an overview of lexing and parsing with PLY.
 Given the intrinsic complexity of parsing, I would strongly advise=20
 that you read (or at least skim) this entire document before jumping
 into a big development project with PLY. =20
 </p>
=20
 <p>
 PLY-3.5 is compatible with both Python 2 and Python 3.  If you are using
 Python 2, you have to use Python 2.6 or newer.
 </p>
=20
 <h2><a name=3D"ply_nn1"></a>2. Introduction</h2>
=20
 <p>
 PLY is a pure-Python implementation of the popular compiler
 construction tools lex and yacc. The main goal of PLY is to stay
 fairly faithful to the way in which traditional lex/yacc tools work.
 This includes supporting LALR(1) parsing as well as providing
 extensive input validation, error reporting, and diagnostics.  Thus,
 if you've used yacc in another programming language, it should be
 relatively straightforward to use PLY. =20
 </p>
=20
 <p>
 Early versions of PLY were developed to support an Introduction to
 Compilers Course I taught in 2001 at the University of Chicago.=20
 Since PLY was primarily developed as an instructional tool, you will
 find it to be fairly picky about token and grammar rule
 specification. In part, this
 added formality is meant to catch common programming mistakes made by
 novice users.  However, advanced users will also find such features to
 be useful when building complicated grammars for real programming
 languages.  It should also be noted that PLY does not provide much in
 the way of bells and whistles (e.g., automatic construction of
 abstract syntax trees, tree traversal, etc.). Nor would I consider it
 to be a parsing framework.  Instead, you will find a bare-bones, yet
 fully capable lex/yacc implementation written entirely in Python.
 </p>
=20
 <p>
 The rest of this document assumes that you are somewhat familiar with
 parsing theory, syntax directed translation, and the use of compiler
 construction tools such as lex and yacc in other programming
 languages. If you are unfamiliar with these topics, you will probably
 want to consult an introductory text such as "Compilers: Principles,
 Techniques, and Tools", by Aho, Sethi, and Ullman.  O'Reilly's "Lex
 and Yacc" by John Levine may also be handy.  In fact, the O'Reilly book ca=
n be
 used as a reference for PLY as the concepts are virtually identical.
 </p>
=20
 <h2><a name=3D"ply_nn2"></a>3. PLY Overview</h2>
=20
=20
 <p>
 PLY consists of two separate modules; <tt>lex.py</tt> and
 <tt>yacc.py</tt>, both of which are found in a Python package
 called <tt>ply</tt>. The <tt>lex.py</tt> module is used to break input tex=
t into a
 collection of tokens specified by a collection of regular expression
 rules.  <tt>yacc.py</tt> is used to recognize language syntax that has
 been specified in the form of a context free grammar.
 </p>
=20
 <p>
 The two tools are meant to work together.  Specifically,
 <tt>lex.py</tt> provides an external interface in the form of a
 <tt>token()</tt> function that returns the next valid token on the
 input stream.  <tt>yacc.py</tt> calls this repeatedly to retrieve
 tokens and invoke grammar rules.  The output of <tt>yacc.py</tt> is
 often an Abstract Syntax Tree (AST).  However, this is entirely up to
 the user.  If desired, <tt>yacc.py</tt> can also be used to implement
 simple one-pass compilers. =20
 </p>
=20
 <p>
 Like its Unix counterpart, <tt>yacc.py</tt> provides most of the
 features you expect including extensive error checking, grammar
 validation, support for empty productions, error tokens, and ambiguity
 resolution via precedence rules.  In fact, almost everything that is possi=
ble in traditional yacc=20
 should be supported in PLY.
 </p>
=20
 <p>
 The primary difference between
 <tt>yacc.py</tt> and Unix <tt>yacc</tt> is that <tt>yacc.py</tt>=20
 doesn't involve a separate code-generation process.=20
 Instead, PLY relies on reflection (introspection)
 to build its lexers and parsers.  Unlike traditional lex/yacc which
 require a special input file that is converted into a separate source
 file, the specifications given to PLY <em>are</em> valid Python
 programs.  This means that there are no extra source files nor is
 there a special compiler construction step (e.g., running yacc to
 generate Python code for the compiler).  Since the generation of the
 parsing tables is relatively expensive, PLY caches the results and
 saves them to a file.  If no changes are detected in the input source,
 the tables are read from the cache. Otherwise, they are regenerated.
 </p>
=20
 <h2><a name=3D"ply_nn3"></a>4. Lex</h2>
=20
 <p>
 <tt>lex.py</tt> is used to tokenize an input string.  For example, suppose
 you're writing a programming language and a user supplied the following in=
put string:
 </p>
=20
 <blockquote>
 <pre> x =3D 3 + 42 * (s - t)
 </pre>
 </blockquote>
=20
 <p>
 A tokenizer splits the string into individual tokens
 </p>
=20
 <blockquote>
 <pre> 'x','=3D', '3', '+', '42', '*', '(', 's', '-', 't', ')'
 </pre>
 </blockquote>
=20
 <p>
 Tokens are usually given names to indicate what they are. For example:
 </p>
=20
 <blockquote>
 <pre> 'ID','EQUALS','NUMBER','PLUS','NUMBER','TIMES',
 'LPAREN','ID','MINUS','ID','RPAREN'
 </pre>
 </blockquote>
=20
 <p>
 More specifically, the input is broken into pairs of token types and value=
s.  For example:
 </p>
=20
 <blockquote>
 <pre> ('ID','x'), ('EQUALS','=3D'), ('NUMBER','3'),=20
 ('PLUS','+'), ('NUMBER','42), ('TIMES','*'),
 ('LPAREN','('), ('ID','s'), ('MINUS','-'),
 ('ID','t'), ('RPAREN',')'
 </pre>
 </blockquote>
=20
 <p>
 The identification of tokens is typically done by writing a series of regu=
lar expression
 rules.  The next section shows how this is done using <tt>lex.py</tt>.
 </p>
=20
 <h3><a name=3D"ply_nn4"></a>4.1 Lex Example</h3>
=20
 <p>
 The following example shows how <tt>lex.py</tt> is used to write a simple =
tokenizer.
 </p>
=20
 <blockquote>
 <pre> # ------------------------------------------------------------
 # calclex.py
 #
 # tokenizer for a simple expression evaluator for
 # numbers and +,-,*,/
 # ------------------------------------------------------------
 import ply.lex as lex
=20
 # List of token names.   This is always required
 tokens =3D (
    'NUMBER',
    'PLUS',
    'MINUS',
    'TIMES',
    'DIVIDE',
    'LPAREN',
    'RPAREN',
 )
=20
 # Regular expression rules for simple tokens
 t_PLUS    =3D r'\+'
 t_MINUS   =3D r'-'
 t_TIMES   =3D r'\*'
 t_DIVIDE  =3D r'/'
 t_LPAREN  =3D r'\('
 t_RPAREN  =3D r'\)'
=20
 # A regular expression rule with some action code
 def t_NUMBER(t):
     r'\d+'
     t.value =3D int(t.value)   =20
     return t
=20
 # Define a rule so we can track line numbers
 def t_newline(t):
     r'\n+'
     t.lexer.lineno +=3D len(t.value)
=20
 # A string containing ignored characters (spaces and tabs)
 t_ignore  =3D ' \t'
=20
 # Error handling rule
 def t_error(t):
     print("Illegal character '%s'" % t.value[0])
     t.lexer.skip(1)
=20
 # Build the lexer
 lexer =3D lex.lex()
=20
 </pre>
 </blockquote>
=20
 <p>
 To use the lexer, you first need to feed it some input text using
 its <tt>input()</tt> method.  After that, repeated calls
 to <tt>token()</tt> produce tokens.  The following code shows how this
 works:
 </p>
=20
 <blockquote>
 <pre>=20
 # Test it out
 data =3D '''
 3 + 4 * 10
   + -20 *2
 '''
=20
 # Give the lexer some input
 lexer.input(data)
=20
 # Tokenize
 while True:
     tok =3D lexer.token()
     if not tok:=20
         break      # No more input
     print(tok)
 </pre>
 </blockquote>
=20
 <p>
 When executed, the example will produce the following output:
 </p>
=20
 <blockquote>
 <pre> $ python example.py
 LexToken(NUMBER,3,2,1)
 LexToken(PLUS,'+',2,3)
 LexToken(NUMBER,4,2,5)
 LexToken(TIMES,'*',2,7)
 LexToken(NUMBER,10,2,10)
 LexToken(PLUS,'+',3,14)
 LexToken(MINUS,'-',3,16)
 LexToken(NUMBER,20,3,18)
 LexToken(TIMES,'*',3,20)
 LexToken(NUMBER,2,3,21)
 </pre>
 </blockquote>
=20
 <p>
 Lexers also support the iteration protocol.    So, you can write the above=
 loop as follows:
 </p>
=20
 <blockquote>
 <pre> for tok in lexer:
     print(tok)
 </pre>
 </blockquote>
=20
 <p>
 The tokens returned by <tt>lexer.token()</tt> are instances
 of <tt>LexToken</tt>.  This object has
 attributes <tt>tok.type</tt>, <tt>tok.value</tt>,
 <tt>tok.lineno</tt>, and <tt>tok.lexpos</tt>.  The following code shows an=
 example of
 accessing these attributes:
 </p>
=20
 <blockquote>
 <pre> # Tokenize
 while True:
     tok =3D lexer.token()
     if not tok:=20
         break      # No more input
     print(tok.type, tok.value, tok.lineno, tok.lexpos)
 </pre>
 </blockquote>
=20
 <p>
 The <tt>tok.type</tt> and <tt>tok.value</tt> attributes contain the
 type and value of the token itself.=20
 <tt>tok.line</tt> and <tt>tok.lexpos</tt> contain information about
 the location of the token.  <tt>tok.lexpos</tt> is the index of the
 token relative to the start of the input text.
 </p>
=20
 <h3><a name=3D"ply_nn5"></a>4.2 The tokens list</h3>
=20
=20
 <p>
 All lexers must provide a list <tt>tokens</tt> that defines all of the pos=
sible token
 names that can be produced by the lexer.  This list is always required
 and is used to perform a variety of validation checks.  The tokens list is=
 also used by the
 <tt>yacc.py</tt> module to identify terminals.
 </p>
=20
 <p>
 In the example, the following code specified the token names:
 </p>
=20
 <blockquote>
 <pre> tokens =3D (
    'NUMBER',
    'PLUS',
    'MINUS',
    'TIMES',
    'DIVIDE',
    'LPAREN',
    'RPAREN',
 )
 </pre>
 </blockquote>
=20
 <h3><a name=3D"ply_nn6"></a>4.3 Specification of tokens</h3>
=20
 <p>
 Each token is specified by writing a regular expression rule compatible wi=
th Python's <tt>re</tt> module.  Each of these rules
 are defined by  making declarations with a special prefix <tt>t_</tt> to i=
ndicate that it
 defines a token.  For simple tokens, the regular expression can
 be specified as strings such as this (note: Python raw strings are used si=
nce they are the
 most convenient way to write regular expression strings):
 </p>
=20
 <blockquote>
 <pre> t_PLUS =3D r'\+'
 </pre>
 </blockquote>
=20
 <p>
 In this case, the name following the <tt>t_</tt> must exactly match one of=
 the
 names supplied in <tt>tokens</tt>.   If some kind of action needs to be pe=
rformed,
 a token rule can be specified as a function.  For example, this rule match=
es numbers and
 converts the string into a Python integer.
 </p>
=20
 <blockquote>
 <pre> def t_NUMBER(t):
     r'\d+'
     t.value =3D int(t.value)
     return t
 </pre>
 </blockquote>
=20
 <p>
 When a function is used, the regular expression rule is specified in the f=
unction documentation string.=20
 The function always takes a single argument which is an instance of=20
 <tt>LexToken</tt>.   This object has attributes of <tt>t.type</tt> which i=
s the token type (as a string),
 <tt>t.value</tt> which is the lexeme (the actual text matched), <tt>t.line=
no</tt> which is the current line number, and <tt>t.lexpos</tt> which
 is the position of the token relative to the beginning of the input text.
 By default, <tt>t.type</tt> is set to the name following the <tt>t_</tt> p=
refix.  The action
 function can modify the contents of the <tt>LexToken</tt> object as approp=
riate.  However,=20
 when it is done, the resulting token should be returned.  If no value is r=
eturned by the action
 function, the token is simply discarded and the next token read.
 </p>
=20
 <p>
 Internally, <tt>lex.py</tt> uses the <tt>re</tt> module to do its pattern =
matching.  Patterns are compiled
 using the <tt>re.VERBOSE</tt> flag which can be used to help readability. =
 However, be aware that unescaped
 whitespace is ignored and comments are allowed in this mode.  If your patt=
ern involves whitespace, make sure you
 use <tt>\s</tt>.  If you need to match the <tt>#</tt> character, use <tt>[=
#]</tt>.
 </p>
=20
 <p>
 When building the master regular expression,
 rules are added in the following order:
 </p>
=20
 <p>
 </p><ol>
 <li>All tokens defined by functions are added in the same order as they ap=
pear in the lexer file.
 </li><li>Tokens defined by strings are added next by sorting them in order=
 of decreasing regular expression length (longer expressions
 are added first).
 </li></ol>
 <p>
 Without this ordering, it can be difficult to correctly match certain type=
s of tokens.  For example, if you=20
 wanted to have separate tokens for "=3D" and "=3D=3D", you need to make su=
re that "=3D=3D" is checked first.  By sorting regular
 expressions in order of decreasing length, this problem is solved for rule=
s defined as strings.  For functions,
 the order can be explicitly controlled since rules appearing first are che=
cked first.
 </p>
=20
 <p>
 To handle reserved words, you should write a single rule to match an
 identifier and do a special name lookup in a function like this:
 </p>
=20
 <blockquote>
 <pre> reserved =3D {
    'if' : 'IF',
    'then' : 'THEN',
    'else' : 'ELSE',
    'while' : 'WHILE',
    ...
 }
=20
 tokens =3D ['LPAREN','RPAREN',...,'ID'] + list(reserved.values())
=20
 def t_ID(t):
     r'[a-zA-Z_][a-zA-Z_0-9]*'
     t.type =3D reserved.get(t.value,'ID')    # Check for reserved words
     return t
 </pre>
 </blockquote>
=20
=20
 <p>
 This approach greatly reduces the number of regular expression rules and i=
s likely to make things a little faster.
 </p>
=20
 <p>
 <b>Note:</b> You should avoid writing individual rules for reserved words.=
  For example, if you write rules like this,
 </p>
=20
 <blockquote>
 <pre> t_FOR   =3D r'for'
 t_PRINT =3D r'print'
 </pre>
 </blockquote>
=20
 <p>
 those rules will be triggered for identifiers that include those words as =
a prefix such as "forget" or "printed".  This is probably not
 what you want.
 </p>
=20
 <h3><a name=3D"ply_nn7"></a>4.4 Token values</h3>
=20
 <p>
 When tokens are returned by lex, they have a value that is stored in the <=
tt>value</tt> attribute.    Normally, the value is the text
 that was matched.   However, the value can be assigned to any Python objec=
t.   For instance, when lexing identifiers, you may
 want to return both the identifier name and information from some sort of =
symbol table.  To do this, you might write a rule like this:
 </p>
=20
 <blockquote>
 <pre> def t_ID(t):
     ...
     # Look up symbol table information and return a tuple
     t.value =3D (t.value, symbol_lookup(t.value))
     ...
     return t
 </pre>
 </blockquote>
=20
 <p>
 It is important to note that storing data in other attribute names is <em>=
not</em> recommended.  The <tt>yacc.py</tt> module only exposes the
 contents of the <tt>value</tt> attribute.  Thus, accessing other attribute=
s may  be unnecessarily awkward.   If you
 need to store multiple values on a token, assign a tuple, dictionary, or i=
nstance to <tt>value</tt>.
 </p>
=20
 <h3><a name=3D"ply_nn8"></a>4.5 Discarded tokens</h3>
=20
 <p>
 To discard a token, such as a comment, simply define a token rule that ret=
urns no value.  For example:
 </p>
=20
=20
 <blockquote>
 <pre> def t_COMMENT(t):
     r'\#.*'
     pass
     # No return value. Token discarded
 </pre>
 </blockquote>
=20
 <p>
 Alternatively, you can include the prefix "ignore_" in the token declarati=
on to force a token to be ignored.  For example:
 </p>
=20
 <blockquote>
 <pre> t_ignore_COMMENT =3D r'\#.*'
 </pre>
 </blockquote>
=20
 <p>
 Be advised that if you are ignoring many different kinds of text, you may =
still want to use functions since these provide more precise
 control over the order in which regular expressions are matched (i.e., fun=
ctions are matched in order of specification whereas strings are
 sorted by regular expression length).
 </p>
=20
 <h3><a name=3D"ply_nn9"></a>4.6 Line numbers and positional information</h=
3>
=20
=20
 <p>By default, <tt>lex.py</tt> knows nothing about line numbers.  This is =
because <tt>lex.py</tt> doesn't know anything
 about what constitutes a "line" of input (e.g., the newline character or e=
ven if the input is textual data).
 To update this information, you need to write a special rule.  In the exam=
ple, the <tt>t_newline()</tt> rule shows how to do this.
 </p>
=20
 <blockquote>
 <pre> # Define a rule so we can track line numbers
 def t_newline(t):
     r'\n+'
     t.lexer.lineno +=3D len(t.value)
 </pre>
 </blockquote>
=20
 <p>
 Within the rule, the <tt>lineno</tt> attribute of the underlying lexer <tt=
>t.lexer</tt> is updated.
 After the line number is updated, the token is simply discarded since noth=
ing is returned.
 </p>
=20
 <p>
 <tt>lex.py</tt> does not perform any kind of automatic column tracking.  H=
owever, it does record positional
 information related to each token in the <tt>lexpos</tt> attribute.   Usin=
g this, it is usually possible to compute=20
 column information as a separate step.   For instance, just count backward=
s until you reach a newline.
 </p>
=20
 <blockquote>
 <pre> # Compute column.
 #     input is the input text string
 #     token is a token instance
 def find_column(input, token):
     line_start =3D input.rfind('\n', 0, token.lexpos) + 1
     return (token.lexpos - line_start) + 1
 </pre>
 </blockquote>
=20
 <p>
 Since column information is often only useful in the context of error hand=
ling, calculating the column
 position can be performed when needed as opposed to doing it for each toke=
n.
 </p>
=20
 <h3><a name=3D"ply_nn10"></a>4.7 Ignored characters</h3>
=20
=20
 <p>
 The special <tt>t_ignore</tt> rule is reserved by <tt>lex.py</tt> for char=
acters
 that should be completely ignored in the input stream.=20
 Usually this is used to skip over whitespace and other non-essential chara=
cters.=20
 Although it is possible to define a regular expression rule for whitespace=
 in a manner
 similar to <tt>t_newline()</tt>, the use of <tt>t_ignore</tt> provides sub=
stantially better
 lexing performance because it is handled as a special case and is checked =
in a much
 more efficient manner than the normal regular expression rules.
 </p>
=20
 <p>
 The characters given in <tt>t_ignore</tt> are not ignored when such charac=
ters are part of
 other regular expression patterns.  For example, if you had a rule to capt=
ure quoted text,
 that pattern can include the ignored characters (which will be captured in=
 the normal way).  The
 main purpose of <tt>t_ignore</tt> is to ignore whitespace and other paddin=
g between the
 tokens that you actually want to parse.
 </p>
=20
 <h3><a name=3D"ply_nn11"></a>4.8 Literal characters</h3>
=20
=20
 <p>
 Literal characters can be specified by defining a variable <tt>literals</t=
t> in your lexing module.  For example:
 </p>
=20
 <blockquote>
 <pre> literals =3D [ '+','-','*','/' ]
 </pre>
 </blockquote>
=20
 <p>
 or alternatively
 </p>
=20
 <blockquote>
 <pre> literals =3D "+-*/"
 </pre>
 </blockquote>
=20
 <p>
 A literal character is simply a single character that is returned "as is" =
when encountered by the lexer.  Literals are checked
 after all of the defined regular expression rules.  Thus, if a rule starts=
 with one of the literal characters, it will always=20
 take precedence.
 </p>
=20
 <p>
 When a literal token is returned, both its <tt>type</tt> and <tt>value</tt=
> attributes are set to the character itself. For example, <tt>'+'</tt>.
 </p>
=20
 <p>
 It's possible to write token functions that perform additional actions
 when literals are matched.  However, you'll need to set the token type
 appropriately. For example:
 </p>
=20
 <blockquote>
 <pre> literals =3D [ '{', '}' ]
=20
 def t_lbrace(t):
     r'\{'
     t.type =3D '{'      # Set token type to the expected literal
     return t
=20
 def t_rbrace(t):
     r'\}'
     t.type =3D '}'      # Set token type to the expected literal
     return t
 </pre>
 </blockquote>
=20
 <h3><a name=3D"ply_nn12"></a>4.9 Error handling</h3>
=20
=20
 <p>
 The <tt>t_error()</tt>
 function is used to handle lexing errors that occur when illegal
 characters are detected.  In this case, the <tt>t.value</tt> attribute con=
tains the
 rest of the input string that has not been tokenized.  In the example, the=
 error function
 was defined as follows:
 </p>
=20
 <blockquote>
 <pre> # Error handling rule
 def t_error(t):
     print("Illegal character '%s'" % t.value[0])
     t.lexer.skip(1)
 </pre>
 </blockquote>
=20
 <p>
 In this case, we simply print the offending character and skip ahead one c=
haracter by calling <tt>t.lexer.skip(1)</tt>.
 </p>
=20
 <h3><a name=3D"ply_nn14"></a>4.10 EOF Handling</h3>
=20
=20
 <p>
 The <tt>t_eof()</tt> function is used to handle an end-of-file (EOF) condi=
tion in the input.   As input, it
 receives a token type <tt>'eof'</tt> with the <tt>lineno</tt> and <tt>lexp=
os</tt> attributes set appropriately.
 The main use of this function is provide more input to the lexer so that i=
t can continue to parse.  Here is an
 example of how this works:
 </p>
=20
 <blockquote>
 <pre> # EOF handling rule
 def t_eof(t):
     # Get more input (Example)
     more =3D raw_input('... ')
     if more:
         self.lexer.input(more)
         return self.lexer.token()
     return None
 </pre>
 </blockquote>
=20
 <p>
 The EOF function should return the next available token (by calling <tt>se=
lf.lexer.token())</tt> or <tt>None</tt> to
 indicate no more data.   Be aware that setting more input with the <tt>sel=
f.lexer.input()</tt> method does
 NOT reset the lexer state or the <tt>lineno</tt> attribute used for positi=
on tracking.   The <tt>lexpos</tt>=20
 attribute is reset so be aware of that if you're using it in error reporti=
ng.
 </p>
=20
 <h3><a name=3D"ply_nn13"></a>4.11 Building and using the lexer</h3>
=20
=20
 <p>
 To build the lexer, the function <tt>lex.lex()</tt> is used.  For example:=
</p>
=20
 <blockquote>
 <pre> lexer =3D lex.lex()
 </pre>
 </blockquote>
=20
 <p>This function
 uses Python reflection (or introspection) to read the regular expression r=
ules
 out of the calling context and build the lexer. Once the lexer has been bu=
ilt, two methods can
 be used to control the lexer.
 </p>
 <ul>
 <li><tt>lexer.input(data)</tt>.   Reset the lexer and store a new input st=
ring.</li>
 <li><tt>lexer.token()</tt>.  Return the next token.  Returns a special <tt=
>LexToken</tt> instance on success or
 None if the end of the input text has been reached.</li>
 </ul>
=20
 <h3><a name=3D"ply_nn14b"></a>4.12 The @TOKEN decorator</h3>
=20
 <p>
 In some applications, you may want to define build tokens from as a series=
 of
 more complex regular expression rules.  For example:
 </p>
=20
 <blockquote>
 <pre> digit            =3D r'([0-9])'
 nondigit         =3D r'([_A-Za-z])'
 identifier       =3D r'(' + nondigit + r'(' + digit + r'|' + nondigit + r'=
)*)'       =20
=20
 def t_ID(t):
     # want docstring to be identifier above. ?????
     ...
 </pre>
 </blockquote>
=20
 <p>
 In this case, we want the regular expression rule for <tt>ID</tt> to be on=
e of the variables above. However, there is no
 way to directly specify this using a normal documentation string.   To sol=
ve this problem, you can use the <tt>@TOKEN</tt>
 decorator.  For example:
 </p>
=20
 <blockquote>
 <pre> from ply.lex import TOKEN
=20
 @TOKEN(identifier)
 def t_ID(t):
     ...
 </pre>
 </blockquote>
=20
 <p>
 This will attach <tt>identifier</tt> to the docstring for <tt>t_ID()</tt> =
allowing <tt>lex.py</tt> to work normally.=20
 </p>
=20
 <h3><a name=3D"ply_nn15"></a>4.13 Optimized mode</h3>
=20
 <p>
 For improved performance, it may be desirable to use Python's
 optimized mode (e.g., running Python with the <tt>-O</tt>
 option). However, doing so causes Python to ignore documentation
 strings.  This presents special problems for <tt>lex.py</tt>.  To
 handle this case, you can create your lexer using
 the <tt>optimize</tt> option as follows:
 </p>
=20
 <blockquote>
 <pre> lexer =3D lex.lex(optimize=3D1)
 </pre>
 </blockquote>
=20
 <p>
 Next, run Python in its normal operating mode.  When you do
 this, <tt>lex.py</tt> will write a file called <tt>lextab.py</tt> in
 the same directory as the module containing the lexer specification.
 This file contains all of the regular
 expression rules and tables used during lexing.  On subsequent
 executions,
 <tt>lextab.py</tt> will simply be imported to build the lexer.  This
 approach substantially improves the startup time of the lexer and it
 works in Python's optimized mode.
 </p>
=20
 <p>
 To change the name of the lexer-generated module, use the <tt>lextab</tt> =
keyword argument.  For example:
 </p>
=20
 <blockquote>
 <pre> lexer =3D lex.lex(optimize=3D1,lextab=3D"footab")
 </pre>
 </blockquote>
=20
 <p>
 When running in optimized mode, it is important to note that lex disables =
most error checking.  Thus, this is really only recommended
 if you're sure everything is working correctly and you're ready to start r=
eleasing production code.
 </p>
=20
 <h3><a name=3D"ply_nn16"></a>4.14 Debugging</h3>
=20
 <p>
 For the purpose of debugging, you can run <tt>lex()</tt> in a debugging mo=
de as follows:
 </p>
=20
 <blockquote>
 <pre> lexer =3D lex.lex(debug=3D1)
 </pre>
 </blockquote>
=20
 <p>
 This will produce various sorts of debugging information including all of =
the added rules,
 the master regular expressions used by the lexer, and tokens generating du=
ring lexing.
 </p>
=20
 <p>
 In addition, <tt>lex.py</tt> comes with a simple main function which
 will either tokenize input read from standard input or from a file specifi=
ed
 on the command line. To use it, simply put this in your lexer:
 </p>
=20
 <blockquote>
 <pre> if __name__ =3D=3D '__main__':
      lex.runmain()
 </pre>
 </blockquote>
=20
 <p>
 Please refer to the "Debugging" section near the end for some more advance=
d details=20
 of debugging.
 </p>
=20
 <h3><a name=3D"ply_nn17"></a>4.15 Alternative specification of lexers</h3>
=20
 <p>
 As shown in the example, lexers are specified all within one Python module=
.   If you want to
 put token rules in a different module from the one in which you invoke <tt=
>lex()</tt>, use the
 <tt>module</tt> keyword argument.
 </p>
=20
 <p>
 For example, you might have a dedicated module that just contains
 the token rules:
 </p>
=20
 <blockquote>
 <pre> # module: tokrules.py
 # This module just contains the lexing rules
=20
 # List of token names.   This is always required
 tokens =3D (
    'NUMBER',
    'PLUS',
    'MINUS',
    'TIMES',
    'DIVIDE',
    'LPAREN',
    'RPAREN',
 )
=20
 # Regular expression rules for simple tokens
 t_PLUS    =3D r'\+'
 t_MINUS   =3D r'-'
 t_TIMES   =3D r'\*'
 t_DIVIDE  =3D r'/'
 t_LPAREN  =3D r'\('
 t_RPAREN  =3D r'\)'
=20
 # A regular expression rule with some action code
 def t_NUMBER(t):
     r'\d+'
     t.value =3D int(t.value)   =20
     return t
=20
 # Define a rule so we can track line numbers
 def t_newline(t):
     r'\n+'
     t.lexer.lineno +=3D len(t.value)
=20
 # A string containing ignored characters (spaces and tabs)
 t_ignore  =3D ' \t'
=20
 # Error handling rule
 def t_error(t):
     print("Illegal character '%s'" % t.value[0])
     t.lexer.skip(1)
 </pre>
 </blockquote>
=20
 <p>
 Now, if you wanted to build a tokenizer from these rules from within a dif=
ferent module, you would do the following (shown for Python interactive mod=
e):
 </p>
=20
 <blockquote>
 <pre> &gt;&gt;&gt; import tokrules
 &gt;&gt;&gt; <b>lexer =3D lex.lex(module=3Dtokrules)</b>
 &gt;&gt;&gt; lexer.input("3 + 4")
 &gt;&gt;&gt; lexer.token()
 LexToken(NUMBER,3,1,1,0)
 &gt;&gt;&gt; lexer.token()
 LexToken(PLUS,'+',1,2)
 &gt;&gt;&gt; lexer.token()
 LexToken(NUMBER,4,1,4)
 &gt;&gt;&gt; lexer.token()
 None
 &gt;&gt;&gt;
 </pre>
 </blockquote>
=20
 <p>
 The <tt>module</tt> option can also be used to define lexers from instance=
s of a class.  For example:
 </p>
=20
 <blockquote>
 <pre> import ply.lex as lex
=20
 class MyLexer(object):
     # List of token names.   This is always required
     tokens =3D (
        'NUMBER',
        'PLUS',
        'MINUS',
        'TIMES',
        'DIVIDE',
        'LPAREN',
        'RPAREN',
     )
=20
     # Regular expression rules for simple tokens
     t_PLUS    =3D r'\+'
     t_MINUS   =3D r'-'
     t_TIMES   =3D r'\*'
     t_DIVIDE  =3D r'/'
     t_LPAREN  =3D r'\('
     t_RPAREN  =3D r'\)'
=20
     # A regular expression rule with some action code
     # Note addition of self parameter since we're in a class
     def t_NUMBER(self,t):
         r'\d+'
         t.value =3D int(t.value)   =20
         return t
=20
     # Define a rule so we can track line numbers
     def t_newline(self,t):
         r'\n+'
         t.lexer.lineno +=3D len(t.value)
=20
     # A string containing ignored characters (spaces and tabs)
     t_ignore  =3D ' \t'
=20
     # Error handling rule
     def t_error(self,t):
         print("Illegal character '%s'" % t.value[0])
         t.lexer.skip(1)
=20
     <b># Build the lexer
     def build(self,**kwargs):
         self.lexer =3D lex.lex(module=3Dself, **kwargs)</b>
    =20
     # Test it output
     def test(self,data):
         self.lexer.input(data)
         while True:
              tok =3D self.lexer.token()
              if not tok:=20
                  break
              print(tok)
=20
 # Build the lexer and try it out
 m =3D MyLexer()
 m.build()           # Build the lexer
 m.test("3 + 4")     # Test it
 </pre>
 </blockquote>
=20
 <p>
 When building a lexer from class, <em>you should construct the lexer from
 an instance of the class</em>, not the class object itself.  This is becau=
se
 PLY only works properly if the lexer actions are defined by bound-methods.
 </p>
=20
 <p>
 When using the <tt>module</tt> option to <tt>lex()</tt>, PLY collects symb=
ols
 from the underlying object using the <tt>dir()</tt> function. There is no
 direct access to the <tt>__dict__</tt> attribute of the object supplied as=
 a=20
 module value. </p>
=20
 <p>
 Finally, if you want to keep things nicely encapsulated, but don't want to=
 use a=20
 full-fledged class definition, lexers can be defined using closures.  For =
example:
 </p>
=20
 <blockquote>
 <pre> import ply.lex as lex
=20
 # List of token names.   This is always required
 tokens =3D (
   'NUMBER',
   'PLUS',
   'MINUS',
   'TIMES',
   'DIVIDE',
   'LPAREN',
   'RPAREN',
 )
=20
 def MyLexer():
     # Regular expression rules for simple tokens
     t_PLUS    =3D r'\+'
     t_MINUS   =3D r'-'
     t_TIMES   =3D r'\*'
     t_DIVIDE  =3D r'/'
     t_LPAREN  =3D r'\('
     t_RPAREN  =3D r'\)'
=20
     # A regular expression rule with some action code
     def t_NUMBER(t):
         r'\d+'
         t.value =3D int(t.value)   =20
         return t
=20
     # Define a rule so we can track line numbers
     def t_newline(t):
         r'\n+'
         t.lexer.lineno +=3D len(t.value)
=20
     # A string containing ignored characters (spaces and tabs)
     t_ignore  =3D ' \t'
=20
     # Error handling rule
     def t_error(t):
         print("Illegal character '%s'" % t.value[0])
         t.lexer.skip(1)
=20
     # Build the lexer from my environment and return it   =20
     return lex.lex()
 </pre>
 </blockquote>
=20
 <p>
 <b>Important note:</b> If you are defining a lexer using a class or closur=
e, be aware that PLY still requires you to only
 define a single lexer per module (source file).   There are extensive vali=
dation/error checking parts of the PLY that=20
 may falsely report error messages if you don't follow this rule.
 </p>
=20
 <h3><a name=3D"ply_nn18"></a>4.16 Maintaining state</h3>
=20
 <p>
 In your lexer, you may want to maintain a variety of state
 information.  This might include mode settings, symbol tables, and
 other details.  As an example, suppose that you wanted to keep
 track of how many NUMBER tokens had been encountered. =20
 </p>
=20
 <p>
 One way to do this is to keep a set of global variables in the module
 where you created the lexer.  For example:=20
 </p>
=20
 <blockquote>
 <pre> num_count =3D 0
 def t_NUMBER(t):
     r'\d+'
     global num_count
     num_count +=3D 1
     t.value =3D int(t.value)   =20
     return t
 </pre>
 </blockquote>
=20
 <p>
 If you don't like the use of a global variable, another place to store
 information is inside the Lexer object created by <tt>lex()</tt>.
 To this, you can use the <tt>lexer</tt> attribute of tokens passed to
 the various rules. For example:
 </p>
=20
 <blockquote>
 <pre> def t_NUMBER(t):
     r'\d+'
     t.lexer.num_count +=3D 1     # Note use of lexer attribute
     t.value =3D int(t.value)   =20
     return t
=20
 lexer =3D lex.lex()
 lexer.num_count =3D 0            # Set the initial count
 </pre>
 </blockquote>
=20
 <p>
 This latter approach has the advantage of being simple and working=20
 correctly in applications where multiple instantiations of a given
 lexer exist in the same application.   However, this might also feel
 like a gross violation of encapsulation to OO purists.=20
 Just to put your mind at some ease, all
 internal attributes of the lexer (with the exception of <tt>lineno</tt>) h=
ave names that are prefixed
 by <tt>lex</tt> (e.g., <tt>lexdata</tt>,<tt>lexpos</tt>, etc.).  Thus,
 it is perfectly safe to store attributes in the lexer that
 don't have names starting with that prefix or a name that conflicts with o=
ne of the
 predefined methods (e.g., <tt>input()</tt>, <tt>token()</tt>, etc.).
 </p>
=20
 <p>
 If you don't like assigning values on the lexer object, you can define you=
r lexer as a class as
 shown in the previous section:
 </p>
=20
 <blockquote>
 <pre> class MyLexer:
     ...
     def t_NUMBER(self,t):
         r'\d+'
         self.num_count +=3D 1
         t.value =3D int(t.value)   =20
         return t
=20
     def build(self, **kwargs):
         self.lexer =3D lex.lex(object=3Dself,**kwargs)
=20
     def __init__(self):
         self.num_count =3D 0
 </pre>
 </blockquote>
=20
 <p>
 The class approach may be the easiest to manage if your application is
 going to be creating multiple instances of the same lexer and you need
 to manage a lot of state.
 </p>
=20
 <p>
 State can also be managed through closures.   For example, in Python 3:
 </p>
=20
 <blockquote>
 <pre> def MyLexer():
     num_count =3D 0
     ...
     def t_NUMBER(t):
         r'\d+'
         nonlocal num_count
         num_count +=3D 1
         t.value =3D int(t.value)   =20
         return t
     ...
 </pre>
 </blockquote>
=20
 <h3><a name=3D"ply_nn19"></a>4.17 Lexer cloning</h3>
=20
=20
 <p>
 If necessary, a lexer object can be duplicated by invoking its <tt>clone()=
</tt> method.  For example:
 </p>
=20
 <blockquote>
 <pre> lexer =3D lex.lex()
 ...
 newlexer =3D lexer.clone()
 </pre>
 </blockquote>
=20
 <p>
 When a lexer is cloned, the copy is exactly identical to the original lexe=
r
 including any input text and internal state. However, the clone allows a
 different set of input text to be supplied which may be processed separate=
ly.
 This may be useful in situations when you are writing a parser/compiler th=
at
 involves recursive or reentrant processing.  For instance, if you
 needed to scan ahead in the input for some reason, you could create a
 clone and use it to look ahead.  Or, if you were implementing some kind of=
 preprocessor,
 cloned lexers could be used to handle different input files.
 </p>
=20
 <p>
 Creating a clone is different than calling <tt>lex.lex()</tt> in that
 PLY doesn't regenerate any of the internal tables or regular expressions.
 </p>
=20
 <p>
 Special considerations need to be made when cloning lexers that also
 maintain their own internal state using classes or closures.  Namely,
 you need to be aware that the newly created lexers will share all of
 this state with the original lexer.  For example, if you defined a
 lexer as a class and did this:
 </p>
=20
 <blockquote>
 <pre> m =3D MyLexer()
 a =3D lex.lex(object=3Dm)      # Create a lexer
=20
 b =3D a.clone()              # Clone the lexer
 </pre>
 </blockquote>
=20
 <p>
 Then both <tt>a</tt> and <tt>b</tt> are going to be bound to the same
 object <tt>m</tt> and any changes to <tt>m</tt> will be reflected in both =
lexers.  It's
 important to emphasize that <tt>clone()</tt> is only meant to create a new=
 lexer
 that reuses the regular expressions and environment of another lexer.  If =
you
 need to make a totally new copy of a lexer, then call <tt>lex()</tt> again=
.
 </p>
=20
 <h3><a name=3D"ply_nn20"></a>4.18 Internal lexer state</h3>
=20
 <p>
 A Lexer object <tt>lexer</tt> has a number of internal attributes that may=
 be useful in certain
 situations.=20
 </p>
=20
 <p>
 <tt>lexer.lexpos</tt>
 </p><blockquote>
 This attribute is an integer that contains the current position within the=
 input text.  If you modify
 the value, it will change the result of the next call to <tt>token()</tt>.=
  Within token rule functions, this points
 to the first character <em>after</em> the matched text.  If the value is m=
odified within a rule, the next returned token will be
 matched at the new position.
 </blockquote>
 <p></p>
=20
 <p>
 <tt>lexer.lineno</tt>
 </p><blockquote>
 The current value of the line number attribute stored in the lexer.  PLY o=
nly specifies that the attribute
 exists---it never sets, updates, or performs any processing with it.  If y=
ou want to track line numbers,
 you will need to add code yourself (see the section on line numbers and po=
sitional information).
 </blockquote>
 <p></p>
=20
 <p>
 <tt>lexer.lexdata</tt>
 </p><blockquote>
 The current input text stored in the lexer.  This is the string passed wit=
h the <tt>input()</tt> method. It
 would probably be a bad idea to modify this unless you really know what yo=
u're doing.
 </blockquote>
 <p></p>
=20
 <p>
 <tt>lexer.lexmatch</tt>
 </p><blockquote>
 This is the raw <tt>Match</tt> object returned by the Python <tt>re.match(=
)</tt> function (used internally by PLY) for the
 current token.  If you have written a regular expression that contains nam=
ed groups, you can use this to retrieve those values.
 Note: This attribute is only updated when tokens are defined and processed=
 by functions. =20
 </blockquote>
 <p></p>
=20
 <h3><a name=3D"ply_nn21"></a>4.19 Conditional lexing and start conditions<=
/h3>
=20
 <p>
 In advanced parsing applications, it may be useful to have different
 lexing states. For instance, you may want the occurrence of a certain
 token or syntactic construct to trigger a different kind of lexing.
 PLY supports a feature that allows the underlying lexer to be put into
 a series of different states.  Each state can have its own tokens,
 lexing rules, and so forth.  The implementation is based largely on
 the "start condition" feature of GNU flex.  Details of this can be found
 at <a href=3D"http://flex.sourceforge.net/manual/Start-Conditions.html">ht=
tp://flex.sourceforge.net/manual/Start-Conditions.html</a>.
 </p>
=20
 <p>
 To define a new lexing state, it must first be declared.  This is done by =
including a "states" declaration in your
 lex file.  For example:
 </p>
=20
 <blockquote>
 <pre> states =3D (
    ('foo','exclusive'),
    ('bar','inclusive'),
 )
 </pre>
 </blockquote>
=20
 <p>
 This declaration declares two states, <tt>'foo'</tt>
 and <tt>'bar'</tt>.  States may be of two types; <tt>'exclusive'</tt>
 and <tt>'inclusive'</tt>.  An exclusive state completely overrides the
 default behavior of the lexer.  That is, lex will only return tokens
 and apply rules defined specifically for that state.  An inclusive
 state adds additional tokens and rules to the default set of rules.
 Thus, lex will return both the tokens defined by default in addition
 to those defined for the inclusive state.
 </p>
=20
 <p>
 Once a state has been declared, tokens and rules are declared by including=
 the
 state name in token/rule declaration.  For example:
 </p>
=20
 <blockquote>
 <pre> t_foo_NUMBER =3D r'\d+'                      # Token 'NUMBER' in sta=
te 'foo'       =20
 t_bar_ID     =3D r'[a-zA-Z_][a-zA-Z0-9_]*'   # Token 'ID' in state 'bar'
=20
 def t_foo_newline(t):
     r'\n'
     t.lexer.lineno +=3D 1
 </pre>
 </blockquote>
=20
 <p>
 A token can be declared in multiple states by including multiple state nam=
es in the declaration. For example:
 </p>
=20
 <blockquote>
 <pre> t_foo_bar_NUMBER =3D r'\d+'         # Defines token 'NUMBER' in both=
 state 'foo' and 'bar'
 </pre>
 </blockquote>
=20
 <p>
 Alternative, a token can be declared in all states using the 'ANY' in the =
name.
 </p>
=20
 <blockquote>
 <pre> t_ANY_NUMBER =3D r'\d+'         # Defines a token 'NUMBER' in all st=
ates
 </pre>
 </blockquote>
=20
 <p>
 If no state name is supplied, as is normally the case, the token is associ=
ated with a special state <tt>'INITIAL'</tt>.  For example,
 these two declarations are identical:
 </p>
=20
 <blockquote>
 <pre> t_NUMBER =3D r'\d+'
 t_INITIAL_NUMBER =3D r'\d+'
 </pre>
 </blockquote>
=20
 <p>
 States are also associated with the special <tt>t_ignore</tt>, <tt>t_error=
()</tt>, and <tt>t_eof()</tt> declarations.  For example, if a state treats
 these differently, you can declare:</p>
 <p></p>
=20
 <blockquote>
 <pre> t_foo_ignore =3D " \t\n"       # Ignored characters for state 'foo'
=20
 def t_bar_error(t):          # Special error handler for state 'bar'
     pass=20
 </pre>
 </blockquote>
=20
 <p>
 By default, lexing operates in the <tt>'INITIAL'</tt> state.  This state i=
ncludes all of the normally defined tokens.=20
 For users who aren't using different states, this fact is completely trans=
parent.   If, during lexing or parsing, you want to change
 the lexing state, use the <tt>begin()</tt> method.   For example:
 </p>
=20
 <blockquote>
 <pre> def t_begin_foo(t):
     r'start_foo'
     t.lexer.begin('foo')             # Starts 'foo' state
 </pre>
 </blockquote>
=20
 <p>
 To get out of a state, you use <tt>begin()</tt> to switch back to the init=
ial state.  For example:
 </p>
=20
 <blockquote>
 <pre> def t_foo_end(t):
     r'end_foo'
     t.lexer.begin('INITIAL')        # Back to the initial state
 </pre>
 </blockquote>
=20
 <p>
 The management of states can also be done with a stack.  For example:
 </p>
=20
 <blockquote>
 <pre> def t_begin_foo(t):
     r'start_foo'
     t.lexer.push_state('foo')             # Starts 'foo' state
=20
 def t_foo_end(t):
     r'end_foo'
     t.lexer.pop_state()                   # Back to the previous state
 </pre>
 </blockquote>
=20
 <p>
 The use of a stack would be useful in situations where there are many ways=
 of entering a new lexing state and you merely want to go back
 to the previous state afterwards.
 </p>
=20
 <p>
 An example might help clarify.  Suppose you were writing a parser and you =
wanted to grab sections of arbitrary C code enclosed by
 curly braces.  That is, whenever you encounter a starting brace '{', you w=
ant to read all of the enclosed code up to the ending brace '}'=20
 and return it as a string.   Doing this with a normal regular expression r=
ule is nearly (if not actually) impossible.  This is because braces can
 be nested and can be included in comments and strings.  Thus, simply match=
ing up to the first matching '}' character isn't good enough.  Here is how
 you might use lexer states to do this:
 </p>
=20
 <blockquote>
 <pre> # Declare the state
 states =3D (
   ('ccode','exclusive'),
 )
=20
 # Match the first {. Enter ccode state.
 def t_ccode(t):
     r'\{'
     t.lexer.code_start =3D t.lexer.lexpos        # Record the starting pos=
ition
     t.lexer.level =3D 1                          # Initial brace level
     t.lexer.begin('ccode')                     # Enter 'ccode' state
=20
 # Rules for the ccode state
 def t_ccode_lbrace(t):    =20
     r'\{'
     t.lexer.level +=3D1               =20
=20
 def t_ccode_rbrace(t):
     r'\}'
     t.lexer.level -=3D1
=20
     # If closing brace, return the code fragment
     if t.lexer.level =3D=3D 0:
          t.value =3D t.lexer.lexdata[t.lexer.code_start:t.lexer.lexpos+1]
          t.type =3D "CCODE"
          t.lexer.lineno +=3D t.value.count('\n')
          t.lexer.begin('INITIAL')          =20
          return t
=20
 # C or C++ comment (ignore)   =20
 def t_ccode_comment(t):
     r'(/\*(.|\n)*?\*/)|(//.*)'
     pass
=20
 # C string
 def t_ccode_string(t):
    r'\"([^\\\n]|(\\.))*?\"'
=20
 # C character literal
 def t_ccode_char(t):
    r'\'([^\\\n]|(\\.))*?\''
=20
 # Any sequence of non-whitespace characters (not braces, strings)
 def t_ccode_nonspace(t):
    r'[^\s\{\}\'\"]+'
=20
 # Ignored characters (whitespace)
 t_ccode_ignore =3D " \t\n"
=20
 # For bad characters, we just skip over it
 def t_ccode_error(t):
     t.lexer.skip(1)
 </pre>
 </blockquote>
=20
 <p>
 In this example, the occurrence of the first '{' causes the lexer to recor=
d the starting position and enter a new state <tt>'ccode'</tt>.  A collecti=
on of rules then match
 various parts of the input that follow (comments, strings, etc.).  All of =
these rules merely discard the token (by not returning a value).
 However, if the closing right brace is encountered, the rule <tt>t_ccode_r=
brace</tt> collects all of the code (using the earlier recorded starting
 position), stores it, and returns a token 'CCODE' containing all of that t=
ext.  When returning the token, the lexing state is restored back to its
 initial state.
 </p>
=20
 <h3><a name=3D"ply_nn21b"></a>4.20 Miscellaneous Issues</h3>
=20
=20
 <p>
 </p><li>The lexer requires input to be supplied as a single input string. =
 Since most machines have more than enough memory, this=20
 rarely presents a performance concern.  However, it means that the lexer c=
urrently can't be used with streaming data
 such as open files or sockets.  This limitation is primarily a side-effect=
 of using the <tt>re</tt> module.  You might be
 able to work around this by implementing an appropriate <tt>def t_eof()</t=
t> end-of-file handling rule. The main complication
 here is that you'll probably need to ensure that data is fed to the lexer =
in a way so that it doesn't split in in the middle
 of a token.</li><p></p>
=20
 <p>
 </p><li>The lexer should work properly with both Unicode strings given as =
token and pattern matching rules as
 well as for input text.</li>
 <p></p>
=20
 <p>
 </p><li><p>If you need to supply optional flags to the re.compile() functi=
on, use the reflags option to lex.  For example:</p>
=20
 <blockquote>
 <pre> lex.lex(reflags=3Dre.UNICODE | re.VERBOSE)
 </pre>
 </blockquote>
=20
 <p>
 Note: by default, <tt>reflags</tt> is set to <tt>re.VERBOSE</tt>.  If you =
provide
 your own flags, you may need to include this for PLY to preserve its norma=
l behavior.
 </p></li>
=20
 <p>
 </p><li><p>Since the lexer is written entirely in Python, its performance =
is
 largely determined by that of the Python <tt>re</tt> module.  Although
 the lexer has been written to be as efficient as possible, it's not
 blazingly fast when used on very large input files.  If
 performance is concern, you might consider upgrading to the most
 recent version of Python, creating a hand-written lexer, or offloading
 the lexer into a C extension module.  </p>
=20
 <p>
 If you are going to create a hand-written lexer and you plan to use it wit=
h <tt>yacc.py</tt>,=20
 it only needs to conform to the following requirements:</p>
=20
 <ul>
 <li>It must provide a <tt>token()</tt> method that returns the next token =
or <tt>None</tt> if no more
 tokens are available.</li>
 <li>The <tt>token()</tt> method must return an object <tt>tok</tt> that ha=
s <tt>type</tt> and <tt>value</tt> attributes.  If=20
 line number tracking is being used, then the token should also define a <t=
t>lineno</tt> attribute.</li>
 </ul>
 </li>
=20
=20
 <h2><a name=3D"ply_nn22"></a>5. Parsing basics</h2>
=20
 <p>
 <tt>yacc.py</tt> is used to parse language syntax.  Before showing an
 example, there are a few important bits of background that must be
 mentioned.  First, <em>syntax</em> is usually specified in terms of a BNF =
grammar.
 For example, if you wanted to parse
 simple arithmetic expressions, you might first write an unambiguous
 grammar specification like this:
 </p>
=20
 <blockquote>
 <pre>=20
 expression : expression + term
            | expression - term
            | term
=20
 term       : term * factor
            | term / factor
            | factor
=20
 factor     : NUMBER
            | ( expression )
 </pre>
 </blockquote>
=20
 <p>
 In the grammar, symbols such as <tt>NUMBER</tt>, <tt>+</tt>, <tt>-</tt>, <=
tt>*</tt>, and <tt>/</tt> are known
 as <em>terminals</em> and correspond to raw input tokens.  Identifiers suc=
h as <tt>term</tt> and <tt>factor</tt> refer to=20
 grammar rules comprised of a collection of terminals and other rules.  The=
se identifiers are known as <em>non-terminals</em>.
 </p>
=20
 <p>
 The semantic behavior of a language is often specified using a
 technique known as syntax directed translation.  In syntax directed
 translation, attributes are attached to each symbol in a given grammar
 rule along with an action.  Whenever a particular grammar rule is
 recognized, the action describes what to do.  For example, given the
 expression grammar above, you might write the specification for a
 simple calculator like this:
 </p>
=20
 <blockquote>
 <pre>=20
 Grammar                             Action
 --------------------------------    --------------------------------------=
------=20
 expression0 : expression1 + term    expression0.val =3D expression1.val + =
term.val
             | expression1 - term    expression0.val =3D expression1.val - =
term.val
             | term                  expression0.val =3D term.val
=20
 term0       : term1 * factor        term0.val =3D term1.val * factor.val
             | term1 / factor        term0.val =3D term1.val / factor.val
             | factor                term0.val =3D factor.val
=20
 factor      : NUMBER                factor.val =3D int(NUMBER.lexval)
             | ( expression )        factor.val =3D expression.val
 </pre>
 </blockquote>
=20
 <p>
 A good way to think about syntax directed translation is to=20
 view each symbol in the grammar as a kind of object. Associated
 with each symbol is a value representing its "state" (for example, the
 <tt>val</tt> attribute above).    Semantic
 actions are then expressed as a collection of functions or methods
 that operate on the symbols and associated values.
 </p>
=20
 <p>
 Yacc uses a parsing technique known as LR-parsing or shift-reduce parsing.=
  LR parsing is a
 bottom up technique that tries to recognize the right-hand-side of various=
 grammar rules.
 Whenever a valid right-hand-side is found in the input, the appropriate ac=
tion code is triggered and the
 grammar symbols are replaced by the grammar symbol on the left-hand-side.=
=20
 </p>
=20
 <p>
 LR parsing is commonly implemented by shifting grammar symbols onto a
 stack and looking at the stack and the next input token for patterns that
 match one of the grammar rules.
 The details of the algorithm can be found in a compiler textbook, but the
 following example illustrates the steps that are performed if you
 wanted to parse the expression
 <tt>3 + 5 * (10 - 20)</tt> using the grammar defined above.  In the exampl=
e,
 the special symbol <tt>$</tt> represents the end of input.
 </p>
=20
=20
 <blockquote>
 <pre> Step Symbol Stack           Input Tokens            Action
 ---- ---------------------  ---------------------   ----------------------=
---------
 1                           3 + 5 * ( 10 - 20 )$    Shift 3
 2    3                        + 5 * ( 10 - 20 )$    Reduce factor : NUMBER
 3    factor                   + 5 * ( 10 - 20 )$    Reduce term   : factor
 4    term                     + 5 * ( 10 - 20 )$    Reduce expr : term
 5    expr                     + 5 * ( 10 - 20 )$    Shift +
 6    expr +                     5 * ( 10 - 20 )$    Shift 5
 7    expr + 5                     * ( 10 - 20 )$    Reduce factor : NUMBER
 8    expr + factor                * ( 10 - 20 )$    Reduce term   : factor
 9    expr + term                  * ( 10 - 20 )$    Shift *
 10   expr + term *                  ( 10 - 20 )$    Shift (
 11   expr + term * (                  10 - 20 )$    Shift 10
 12   expr + term * ( 10                  - 20 )$    Reduce factor : NUMBER
 13   expr + term * ( factor              - 20 )$    Reduce term : factor
 14   expr + term * ( term                - 20 )$    Reduce expr : term
 15   expr + term * ( expr                - 20 )$    Shift -
 16   expr + term * ( expr -                20 )$    Shift 20
 17   expr + term * ( expr - 20                )$    Reduce factor : NUMBER
 18   expr + term * ( expr - factor            )$    Reduce term : factor
 19   expr + term * ( expr - term              )$    Reduce expr : expr - t=
erm
 20   expr + term * ( expr                     )$    Shift )
 21   expr + term * ( expr )                    $    Reduce factor : (expr)
 22   expr + term * factor                      $    Reduce term : term * f=
actor
 23   expr + term                               $    Reduce expr : expr + t=
erm
 24   expr                                      $    Reduce expr
 25                                             $    Success!
 </pre>
 </blockquote>
=20
 <p>
 When parsing the expression, an underlying state machine and the
 current input token determine what happens next.  If the next token
 looks like part of a valid grammar rule (based on other items on the
 stack), it is generally shifted onto the stack.  If the top of the
 stack contains a valid right-hand-side of a grammar rule, it is
 usually "reduced" and the symbols replaced with the symbol on the
 left-hand-side.  When this reduction occurs, the appropriate action is
 triggered (if defined).  If the input token can't be shifted and the
 top of stack doesn't match any grammar rules, a syntax error has
 occurred and the parser must take some kind of recovery step (or bail
 out).  A parse is only successful if the parser reaches a state where
 the symbol stack is empty and there are no more input tokens.
 </p>
=20
 <p>
 It is important to note that the underlying implementation is built
 around a large finite-state machine that is encoded in a collection of
 tables. The construction of these tables is non-trivial and
 beyond the scope of this discussion.  However, subtle details of this
 process explain why, in the example above, the parser chooses to shift
 a token onto the stack in step 9 rather than reducing the
 rule <tt>expr : expr + term</tt>.
 </p>
=20
 <h2><a name=3D"ply_nn23"></a>6. Yacc</h2>
=20
 <p>
 The <tt>ply.yacc</tt> module implements the parsing component of PLY.
 The name "yacc" stands for "Yet Another Compiler Compiler" and is
 borrowed from the Unix tool of the same name.
 </p>
=20
 <h3><a name=3D"ply_nn24"></a>6.1 An example</h3>
=20
 <p>
 Suppose you wanted to make a grammar for simple arithmetic expressions as =
previously described.   Here is
 how you would do it with <tt>yacc.py</tt>:
 </p>
=20
 <blockquote>
 <pre> # Yacc example
=20
 import ply.yacc as yacc
=20
 # Get the token map from the lexer.  This is required.
 from calclex import tokens
=20
 def p_expression_plus(p):
     'expression : expression PLUS term'
     p[0] =3D p[1] + p[3]
=20
 def p_expression_minus(p):
     'expression : expression MINUS term'
     p[0] =3D p[1] - p[3]
=20
 def p_expression_term(p):
     'expression : term'
     p[0] =3D p[1]
=20
 def p_term_times(p):
     'term : term TIMES factor'
     p[0] =3D p[1] * p[3]
=20
 def p_term_div(p):
     'term : term DIVIDE factor'
     p[0] =3D p[1] / p[3]
=20
 def p_term_factor(p):
     'term : factor'
     p[0] =3D p[1]
=20
 def p_factor_num(p):
     'factor : NUMBER'
     p[0] =3D p[1]
=20
 def p_factor_expr(p):
     'factor : LPAREN expression RPAREN'
     p[0] =3D p[2]
=20
 # Error rule for syntax errors
 def p_error(p):
     print("Syntax error in input!")
=20
 # Build the parser
 parser =3D yacc.yacc()
=20
 while True:
    try:
        s =3D raw_input('calc &gt; ')
    except EOFError:
        break
    if not s: continue
    result =3D parser.parse(s)
    print(result)
 </pre>
 </blockquote>
=20
 <p>
 In this example, each grammar rule is defined by a Python function
 where the docstring to that function contains the appropriate
 context-free grammar specification.  The statements that make up the
 function body implement the semantic actions of the rule. Each function
 accepts a single argument <tt>p</tt> that is a sequence containing the
 values of each grammar symbol in the corresponding rule.  The values
 of <tt>p[i]</tt> are mapped to grammar symbols as shown here:
 </p>
=20
 <blockquote>
 <pre> def p_expression_plus(p):
     'expression : expression PLUS term'
     #   ^            ^        ^    ^
     #  p[0]         p[1]     p[2] p[3]
=20
     p[0] =3D p[1] + p[3]
 </pre>
 </blockquote>
=20
 <p>
 For tokens, the "value" of the corresponding <tt>p[i]</tt> is the
 <em>same</em> as the <tt>p.value</tt> attribute assigned in the lexer
 module.  For non-terminals, the value is determined by whatever is
 placed in <tt>p[0]</tt> when rules are reduced.  This value can be
 anything at all.  However, it probably most common for the value to be
 a simple Python type, a tuple, or an instance.  In this example, we
 are relying on the fact that the <tt>NUMBER</tt> token stores an
 integer value in its value field.  All of the other rules simply
 perform various types of integer operations and propagate the result.
 </p>
=20
 <p>
 Note: The use of negative indices have a special meaning in
 yacc---specially <tt>p[-1]</tt> does not have the same value
 as <tt>p[3]</tt> in this example.  Please see the section on "Embedded
 Actions" for further details.
 </p>
=20
 <p>
 The first rule defined in the yacc specification determines the
 starting grammar symbol (in this case, a rule for <tt>expression</tt>
 appears first).  Whenever the starting rule is reduced by the parser
 and no more input is available, parsing stops and the final value is
 returned (this value will be whatever the top-most rule placed
 in <tt>p[0]</tt>). Note: an alternative starting symbol can be
 specified using the <tt>start</tt> keyword argument to
 <tt>yacc()</tt>.
 </p>
=20
 <p>The <tt>p_error(p)</tt> rule is defined to catch syntax errors.
 See the error handling section below for more detail.
 </p>
=20
 <p>
 To build the parser, call the <tt>yacc.yacc()</tt> function.  This
 function looks at the module and attempts to construct all of the LR
 parsing tables for the grammar you have specified.  The first
 time <tt>yacc.yacc()</tt> is invoked, you will get a message such as
 this:
 </p>
=20
 <blockquote>
 <pre> $ python calcparse.py
 Generating LALR tables
 calc &gt;=20
 </pre>
 </blockquote>
=20
 <p>
 Since table construction is relatively expensive (especially for large
 grammars), the resulting parsing table is written to=20
 a file called <tt>parsetab.py</tt>.  In addition, a
 debugging file called <tt>parser.out</tt> is created.  On subsequent
 executions, <tt>yacc</tt> will reload the table from
 <tt>parsetab.py</tt> unless it has detected a change in the underlying
 grammar (in which case the tables and <tt>parsetab.py</tt> file are
 regenerated).  Both of these files are written to the same directory
 as the module in which the parser is specified. =20
 The name of the <tt>parsetab</tt> module can be changed using the
 <tt>tabmodule</tt> keyword argument to <tt>yacc()</tt>.  For example:
 </p>
=20
 <blockquote>
 <pre> parser =3D yacc.yacc(tabmodule=3D'fooparsetab')
 </pre>
 </blockquote>
=20
 <p>
 If any errors are detected in your grammar specification, <tt>yacc.py</tt>=
 will produce
 diagnostic messages and possibly raise an exception.  Some of the errors t=
hat can be detected include:
 </p>
=20
 <ul>
 <li>Duplicated function names (if more than one rule function have the sam=
e name in the grammar file).
 </li><li>Shift/reduce and reduce/reduce conflicts generated by ambiguous g=
rammars.
 </li><li>Badly specified grammar rules.
 </li><li>Infinite recursion (rules that can never terminate).
 </li><li>Unused rules and tokens
 </li><li>Undefined rules and tokens
 </li></ul>
=20
 <p>
 The next few sections discuss grammar specification in more detail.
 </p>
=20
 <p>
 The final part of the example shows how to actually run the parser
 created by
 <tt>yacc()</tt>.  To run the parser, you simply have to call
 the <tt>parse()</tt> with a string of input text.  This will run all
 of the grammar rules and return the result of the entire parse.  This
 result return is the value assigned to <tt>p[0]</tt> in the starting
 grammar rule.
 </p>
=20
 <h3><a name=3D"ply_nn25"></a>6.2 Combining Grammar Rule Functions</h3>
=20
 <p>
 When grammar rules are similar, they can be combined into a single functio=
n.
 For example, consider the two rules in our earlier example:
 </p>
=20
 <blockquote>
 <pre> def p_expression_plus(p):
     'expression : expression PLUS term'
     p[0] =3D p[1] + p[3]
=20
 def p_expression_minus(t):
     'expression : expression MINUS term'
     p[0] =3D p[1] - p[3]
 </pre>
 </blockquote>
=20
 <p>
 Instead of writing two functions, you might write a single function like t=
his:
 </p>
=20
 <blockquote>
 <pre> def p_expression(p):
     '''expression : expression PLUS term
                   | expression MINUS term'''
     if p[2] =3D=3D '+':
         p[0] =3D p[1] + p[3]
     elif p[2] =3D=3D '-':
         p[0] =3D p[1] - p[3]
 </pre>
 </blockquote>
=20
 <p>
 In general, the doc string for any given function can contain multiple gra=
mmar rules.  So, it would
 have also been legal (although possibly confusing) to write this:
 </p>
=20
 <blockquote>
 <pre> def p_binary_operators(p):
     '''expression : expression PLUS term
                   | expression MINUS term
        term       : term TIMES factor
                   | term DIVIDE factor'''
     if p[2] =3D=3D '+':
         p[0] =3D p[1] + p[3]
     elif p[2] =3D=3D '-':
         p[0] =3D p[1] - p[3]
     elif p[2] =3D=3D '*':
         p[0] =3D p[1] * p[3]
     elif p[2] =3D=3D '/':
         p[0] =3D p[1] / p[3]
 </pre>
 </blockquote>
=20
 <p>
 When combining grammar rules into a single function, it is usually a good =
idea for all of the rules to have
 a similar structure (e.g., the same number of terms).  Otherwise, the corr=
esponding action code may be more=20
 complicated than necessary.  However, it is possible to handle simple case=
s using len().  For example:
 </p>
=20
 <blockquote>
 <pre> def p_expressions(p):
     '''expression : expression MINUS expression
                   | MINUS expression'''
     if (len(p) =3D=3D 4):
         p[0] =3D p[1] - p[3]
     elif (len(p) =3D=3D 3):
         p[0] =3D -p[2]
 </pre>
 </blockquote>
=20
 <p>
 If parsing performance is a concern, you should resist the urge to put
 too much conditional processing into a single grammar rule as shown in
 these examples.  When you add checks to see which grammar rule is
 being handled, you are actually duplicating the work that the parser
 has already performed (i.e., the parser already knows exactly what rule it
 matched).  You can eliminate this overhead by using a
 separate <tt>p_rule()</tt> function for each grammar rule.
 </p>
=20
 <h3><a name=3D"ply_nn26"></a>6.3 Character Literals</h3>
=20
 <p>
 If desired, a grammar may contain tokens defined as single character liter=
als.   For example:
 </p>
=20
 <blockquote>
 <pre> def p_binary_operators(p):
     '''expression : expression '+' term
                   | expression '-' term
        term       : term '*' factor
                   | term '/' factor'''
     if p[2] =3D=3D '+':
         p[0] =3D p[1] + p[3]
     elif p[2] =3D=3D '-':
         p[0] =3D p[1] - p[3]
     elif p[2] =3D=3D '*':
         p[0] =3D p[1] * p[3]
     elif p[2] =3D=3D '/':
         p[0] =3D p[1] / p[3]
 </pre>
 </blockquote>
=20
 <p>
 A character literal must be enclosed in quotes such as <tt>'+'</tt>.  In a=
ddition, if literals are used, they must be declared in the
 corresponding <tt>lex</tt> file through the use of a special <tt>literals<=
/tt> declaration.
 </p>
=20
 <blockquote>
 <pre> # Literals.  Should be placed in module given to lex()
 literals =3D ['+','-','*','/' ]
 </pre>
 </blockquote>
=20
 <p>
 <b>Character literals are limited to a single character</b>.  Thus, it is =
not legal to specify literals such as <tt>'&lt;=3D'</tt> or <tt>'=3D=3D'</t=
t>.  For this, use
 the normal lexing rules (e.g., define a rule such as <tt>t_EQ =3D r'=3D=3D=
'</tt>).
 </p>
=20
 <h3><a name=3D"ply_nn26b"></a>6.4 Empty Productions</h3>
=20
 <p>
 <tt>yacc.py</tt> can handle empty productions by defining a rule like this=
:
 </p>
=20
 <blockquote>
 <pre> def p_empty(p):
     'empty :'
     pass
 </pre>
 </blockquote>
=20
 <p>
 Now to use the empty production, simply use 'empty' as a symbol.  For exam=
ple:
 </p>
=20
 <blockquote>
 <pre> def p_optitem(p):
     'optitem : item'
     '        | empty'
     ...
 </pre>
 </blockquote>
=20
 <p>
 Note: You can write empty rules anywhere by simply specifying an empty
 right hand side.  However, I personally find that writing an "empty"
 rule and using "empty" to denote an empty production is easier to read
 and more clearly states your intentions.
 </p>
=20
 <h3><a name=3D"ply_nn28"></a>6.5 Changing the starting symbol</h3>
=20
 <p>
 Normally, the first rule found in a yacc specification defines the startin=
g grammar rule (top level rule).  To change this, simply
 supply a <tt>start</tt> specifier in your file.  For example:
 </p>
=20
 <blockquote>
 <pre> start =3D 'foo'
=20
 def p_bar(p):
     'bar : A B'
=20
 # This is the starting rule due to the start specifier above
 def p_foo(p):
     'foo : bar X'
 ...
 </pre>
 </blockquote>
=20
 <p>
 The use of a <tt>start</tt> specifier may be useful during debugging
 since you can use it to have yacc build a subset of a larger grammar.
 For this purpose, it is also possible to specify a starting symbol as
 an argument to <tt>yacc()</tt>. For example:
 </p>
=20
 <blockquote>
 <pre> parser =3D yacc.yacc(start=3D'foo')
 </pre>
 </blockquote>
=20
 <h3><a name=3D"ply_nn27"></a>6.6 Dealing With Ambiguous Grammars</h3>
=20
 <p>
 The expression grammar given in the earlier example has been written
 in a special format to eliminate ambiguity.  However, in many
 situations, it is extremely difficult or awkward to write grammars in
 this format.  A much more natural way to express the grammar is in a
 more compact form like this:
 </p>
=20
 <blockquote>
 <pre> expression : expression PLUS expression
            | expression MINUS expression
            | expression TIMES expression
            | expression DIVIDE expression
            | LPAREN expression RPAREN
            | NUMBER
 </pre>
 </blockquote>
=20
 <p>
 Unfortunately, this grammar specification is ambiguous.  For example,
 if you are parsing the string "3 * 4 + 5", there is no way to tell how
 the operators are supposed to be grouped.  For example, does the
 expression mean "(3 * 4) + 5" or is it "3 * (4+5)"?
 </p>
=20
 <p>
 When an ambiguous grammar is given to <tt>yacc.py</tt> it will print
 messages about "shift/reduce conflicts" or "reduce/reduce conflicts".
 A shift/reduce conflict is caused when the parser generator can't
 decide whether or not to reduce a rule or shift a symbol on the
 parsing stack.  For example, consider the string "3 * 4 + 5" and the
 internal parsing stack:
 </p>
=20
 <blockquote>
 <pre> Step Symbol Stack           Input Tokens            Action
 ---- ---------------------  ---------------------   ----------------------=
---------
 1    $                                3 * 4 + 5$    Shift 3
 2    $ 3                                * 4 + 5$    Reduce : expression : =
NUMBER
 3    $ expr                             * 4 + 5$    Shift *
 4    $ expr *                             4 + 5$    Shift 4
 5    $ expr * 4                             + 5$    Reduce: expression : N=
UMBER
 6    $ expr * expr                          + 5$    SHIFT/REDUCE CONFLICT =
????
 </pre>
 </blockquote>
=20
 <p>
 In this case, when the parser reaches step 6, it has two options.  One
 is to reduce the rule <tt>expr : expr * expr</tt> on the stack.  The
 other option is to shift the token <tt>+</tt> on the stack.  Both
 options are perfectly legal from the rules of the
 context-free-grammar.
 </p>
=20
 <p>
 By default, all shift/reduce conflicts are resolved in favor of
 shifting.  Therefore, in the above example, the parser will always
 shift the <tt>+</tt> instead of reducing.  Although this strategy
 works in many cases (for example, the case of=20
 "if-then" versus "if-then-else"), it is not enough for arithmetic expressi=
ons.  In fact,
 in the above example, the decision to shift <tt>+</tt> is completely
 wrong---we should have reduced <tt>expr * expr</tt> since
 multiplication has higher mathematical precedence than addition.
 </p>
=20
 <p>To resolve ambiguity, especially in expression
 grammars, <tt>yacc.py</tt> allows individual tokens to be assigned a
 precedence level and associativity.  This is done by adding a variable
 <tt>precedence</tt> to the grammar file like this:
 </p>
=20
 <blockquote>
 <pre> precedence =3D (
     ('left', 'PLUS', 'MINUS'),
     ('left', 'TIMES', 'DIVIDE'),
 )
 </pre>
 </blockquote>
=20
 <p>
 This declaration specifies that <tt>PLUS</tt>/<tt>MINUS</tt> have the
 same precedence level and are left-associative and that
 <tt>TIMES</tt>/<tt>DIVIDE</tt> have the same precedence and are
 left-associative.  Within the <tt>precedence</tt> declaration, tokens
 are ordered from lowest to highest precedence. Thus, this declaration
 specifies that <tt>TIMES</tt>/<tt>DIVIDE</tt> have higher precedence
 than <tt>PLUS</tt>/<tt>MINUS</tt> (since they appear later in the
 precedence specification).
 </p>
=20
 <p>
 The precedence specification works by associating a numerical
 precedence level value and associativity direction to the listed
 tokens.  For example, in the above example you get:
 </p>
=20
 <blockquote>
 <pre> PLUS      : level =3D 1,  assoc =3D 'left'
 MINUS     : level =3D 1,  assoc =3D 'left'
 TIMES     : level =3D 2,  assoc =3D 'left'
 DIVIDE    : level =3D 2,  assoc =3D 'left'
 </pre>
 </blockquote>
=20
 <p>
 These values are then used to attach a numerical precedence value and
 associativity direction to each grammar rule. <em>This is always
 determined by looking at the precedence of the right-most terminal
 symbol.</em>  For example:
 </p>
=20
 <blockquote>
 <pre> expression : expression PLUS expression                 # level =3D =
1, left
            | expression MINUS expression                # level =3D 1, lef=
t
            | expression TIMES expression                # level =3D 2, lef=
t
            | expression DIVIDE expression               # level =3D 2, lef=
t
            | LPAREN expression RPAREN                   # level =3D None (=
not specified)
            | NUMBER                                     # level =3D None (=
not specified)
 </pre>
 </blockquote>
=20
 <p>
 When shift/reduce conflicts are encountered, the parser generator resolves=
 the conflict by
 looking at the precedence rules and associativity specifiers.
 </p>
=20
 <p>
 </p><ol>
 <li>If the current token has higher precedence than the rule on the stack,=
 it is shifted.</li>
 <li>If the grammar rule on the stack has higher precedence, the rule is re=
duced.</li>
 <li>If the current token and the grammar rule have the same precedence, th=
e
 rule is reduced for left associativity, whereas the token is shifted for r=
ight associativity.</li>
 <li>If nothing is known about the precedence, shift/reduce conflicts are r=
esolved in
 favor of shifting (the default).</li>
 </ol>
=20
 <p>
 For example, if "expression PLUS expression" has been parsed and the
 next token is "TIMES", the action is going to be a shift because
 "TIMES" has a higher precedence level than "PLUS".  On the other hand,
 if "expression TIMES expression" has been parsed and the next token is
 "PLUS", the action is going to be reduce because "PLUS" has a lower
 precedence than "TIMES."
 </p>
=20
 <p>
 When shift/reduce conflicts are resolved using the first three
 techniques (with the help of precedence rules), <tt>yacc.py</tt> will
 report no errors or conflicts in the grammar (although it will print
 some information in the <tt>parser.out</tt> debugging file).
 </p>
=20
 <p>
 One problem with the precedence specifier technique is that it is
 sometimes necessary to change the precedence of an operator in certain
 contexts.  For example, consider a unary-minus operator in "3 + 4 *
 -5".  Mathematically, the unary minus is normally given a very high
 precedence--being evaluated before the multiply.  However, in our
 precedence specifier, MINUS has a lower precedence than TIMES.  To
 deal with this, precedence rules can be given for so-called "fictitious to=
kens"
 like this:
 </p>
=20
 <blockquote>
 <pre> precedence =3D (
     ('left', 'PLUS', 'MINUS'),
     ('left', 'TIMES', 'DIVIDE'),
     ('right', 'UMINUS'),            # Unary minus operator
 )
 </pre>
 </blockquote>
=20
 <p>
 Now, in the grammar file, we can write our unary minus rule like this:
 </p>
=20
 <blockquote>
 <pre> def p_expr_uminus(p):
     'expression : MINUS expression %prec UMINUS'
     p[0] =3D -p[2]
 </pre>
 </blockquote>
=20
 <p>
 In this case, <tt>%prec UMINUS</tt> overrides the default rule precedence-=
-setting it to that
 of UMINUS in the precedence specifier.
 </p>
=20
 <p>
 At first, the use of UMINUS in this example may appear very confusing.
 UMINUS is not an input token or a grammar rule.  Instead, you should
 think of it as the name of a special marker in the precedence table.   Whe=
n you use the <tt>%prec</tt> qualifier, you're simply
 telling yacc that you want the precedence of the expression to be the same=
 as for this special marker instead of the usual precedence.
 </p>
=20
 <p>
 It is also possible to specify non-associativity in the <tt>precedence</tt=
> table. This would
 be used when you <em>don't</em> want operations to chain together.  For ex=
ample, suppose
 you wanted to support comparison operators like <tt>&lt;</tt> and <tt>&gt;=
</tt> but you didn't want to allow
 combinations like <tt>a &lt; b &lt; c</tt>.   To do this, simply specify a=
 rule like this:
 </p>
=20
 <blockquote>
 <pre> precedence =3D (
     ('nonassoc', 'LESSTHAN', 'GREATERTHAN'),  # Nonassociative operators
     ('left', 'PLUS', 'MINUS'),
     ('left', 'TIMES', 'DIVIDE'),
     ('right', 'UMINUS'),            # Unary minus operator
 )
 </pre>
 </blockquote>
=20
 <p>
 If you do this, the occurrence of input text such as <tt> a &lt; b &lt; c<=
/tt> will result in a syntax error.  However, simple
 expressions such as <tt>a &lt; b</tt> will still be fine.
 </p>
=20
 <p>
 Reduce/reduce conflicts are caused when there are multiple grammar
 rules that can be applied to a given set of symbols.  This kind of
 conflict is almost always bad and is always resolved by picking the
 rule that appears first in the grammar file.   Reduce/reduce conflicts
 are almost always caused when different sets of grammar rules somehow
 generate the same set of symbols.  For example:
 </p>
=20
 <blockquote>
 <pre> assignment :  ID EQUALS NUMBER
            |  ID EQUALS expression
           =20
 expression : expression PLUS expression
            | expression MINUS expression
            | expression TIMES expression
            | expression DIVIDE expression
            | LPAREN expression RPAREN
            | NUMBER
 </pre>
 </blockquote>
=20
 <p>
 In this case, a reduce/reduce conflict exists between these two rules:
 </p>
=20
 <blockquote>
 <pre> assignment  : ID EQUALS NUMBER
 expression  : NUMBER
 </pre>
 </blockquote>
=20
 <p>
 For example, if you wrote "a =3D 5", the parser can't figure out if this
 is supposed to be reduced as <tt>assignment : ID EQUALS NUMBER</tt> or
 whether it's supposed to reduce the 5 as an expression and then reduce
 the rule <tt>assignment : ID EQUALS expression</tt>.
 </p>
=20
 <p>
 It should be noted that reduce/reduce conflicts are notoriously
 difficult to spot simply looking at the input grammar.  When a
 reduce/reduce conflict occurs, <tt>yacc()</tt> will try to help by
 printing a warning message such as this:
 </p>
=20
 <blockquote>
 <pre> WARNING: 1 reduce/reduce conflict
 WARNING: reduce/reduce conflict in state 15 resolved using rule (assignmen=
t -&gt; ID EQUALS NUMBER)
 WARNING: rejected rule (expression -&gt; NUMBER)
 </pre>
 </blockquote>
=20
 <p>
 This message identifies the two rules that are in conflict.  However,
 it may not tell you how the parser arrived at such a state.  To try
 and figure it out, you'll probably have to look at your grammar and
 the contents of the
 <tt>parser.out</tt> debugging file with an appropriately high level of
 caffeination.
 </p>
=20
 <h3><a name=3D"ply_nn28b"></a>6.7 The parser.out file</h3>
=20
 <p>
 Tracking down shift/reduce and reduce/reduce conflicts is one of the finer=
 pleasures of using an LR
 parsing algorithm.  To assist in debugging, <tt>yacc.py</tt> creates a deb=
ugging file called
 'parser.out' when it generates the parsing table.   The contents of this f=
ile look like the following:
 </p>
=20
 <blockquote>
 <pre> Unused terminals:
=20
=20
 Grammar
=20
 Rule 1     expression -&gt; expression PLUS expression
 Rule 2     expression -&gt; expression MINUS expression
 Rule 3     expression -&gt; expression TIMES expression
 Rule 4     expression -&gt; expression DIVIDE expression
 Rule 5     expression -&gt; NUMBER
 Rule 6     expression -&gt; LPAREN expression RPAREN
=20
 Terminals, with rules where they appear
=20
 TIMES                : 3
 error                :=20
 MINUS                : 2
 RPAREN               : 6
 LPAREN               : 6
 DIVIDE               : 4
 PLUS                 : 1
 NUMBER               : 5
=20
 Nonterminals, with rules where they appear
=20
 expression           : 1 1 2 2 3 3 4 4 6 0
=20
=20
 Parsing method: LALR
=20
=20
 state 0
=20
     S' -&gt; . expression
     expression -&gt; . expression PLUS expression
     expression -&gt; . expression MINUS expression
     expression -&gt; . expression TIMES expression
     expression -&gt; . expression DIVIDE expression
     expression -&gt; . NUMBER
     expression -&gt; . LPAREN expression RPAREN
=20
     NUMBER          shift and go to state 3
     LPAREN          shift and go to state 2
=20
=20
 state 1
=20
     S' -&gt; expression .
     expression -&gt; expression . PLUS expression
     expression -&gt; expression . MINUS expression
     expression -&gt; expression . TIMES expression
     expression -&gt; expression . DIVIDE expression
=20
     PLUS            shift and go to state 6
     MINUS           shift and go to state 5
     TIMES           shift and go to state 4
     DIVIDE          shift and go to state 7
=20
=20
 state 2
=20
     expression -&gt; LPAREN . expression RPAREN
     expression -&gt; . expression PLUS expression
     expression -&gt; . expression MINUS expression
     expression -&gt; . expression TIMES expression
     expression -&gt; . expression DIVIDE expression
     expression -&gt; . NUMBER
     expression -&gt; . LPAREN expression RPAREN
=20
     NUMBER          shift and go to state 3
     LPAREN          shift and go to state 2
=20
=20
 state 3
=20
     expression -&gt; NUMBER .
=20
     $               reduce using rule 5
     PLUS            reduce using rule 5
     MINUS           reduce using rule 5
     TIMES           reduce using rule 5
     DIVIDE          reduce using rule 5
     RPAREN          reduce using rule 5
=20
=20
 state 4
=20
     expression -&gt; expression TIMES . expression
     expression -&gt; . expression PLUS expression
     expression -&gt; . expression MINUS expression
     expression -&gt; . expression TIMES expression
     expression -&gt; . expression DIVIDE expression
     expression -&gt; . NUMBER
     expression -&gt; . LPAREN expression RPAREN
=20
     NUMBER          shift and go to state 3
     LPAREN          shift and go to state 2
=20
=20
 state 5
=20
     expression -&gt; expression MINUS . expression
     expression -&gt; . expression PLUS expression
     expression -&gt; . expression MINUS expression
     expression -&gt; . expression TIMES expression
     expression -&gt; . expression DIVIDE expression
     expression -&gt; . NUMBER
     expression -&gt; . LPAREN expression RPAREN
=20
     NUMBER          shift and go to state 3
     LPAREN          shift and go to state 2
=20
=20
 state 6
=20
     expression -&gt; expression PLUS . expression
     expression -&gt; . expression PLUS expression
     expression -&gt; . expression MINUS expression
     expression -&gt; . expression TIMES expression
     expression -&gt; . expression DIVIDE expression
     expression -&gt; . NUMBER
     expression -&gt; . LPAREN expression RPAREN
=20
     NUMBER          shift and go to state 3
     LPAREN          shift and go to state 2
=20
=20
 state 7
=20
     expression -&gt; expression DIVIDE . expression
     expression -&gt; . expression PLUS expression
     expression -&gt; . expression MINUS expression
     expression -&gt; . expression TIMES expression
     expression -&gt; . expression DIVIDE expression
     expression -&gt; . NUMBER
     expression -&gt; . LPAREN expression RPAREN
=20
     NUMBER          shift and go to state 3
     LPAREN          shift and go to state 2
=20
=20
 state 8
=20
     expression -&gt; LPAREN expression . RPAREN
     expression -&gt; expression . PLUS expression
     expression -&gt; expression . MINUS expression
     expression -&gt; expression . TIMES expression
     expression -&gt; expression . DIVIDE expression
=20
     RPAREN          shift and go to state 13
     PLUS            shift and go to state 6
     MINUS           shift and go to state 5
     TIMES           shift and go to state 4
     DIVIDE          shift and go to state 7
=20
=20
 state 9
=20
     expression -&gt; expression TIMES expression .
     expression -&gt; expression . PLUS expression
     expression -&gt; expression . MINUS expression
     expression -&gt; expression . TIMES expression
     expression -&gt; expression . DIVIDE expression
=20
     $               reduce using rule 3
     PLUS            reduce using rule 3
     MINUS           reduce using rule 3
     TIMES           reduce using rule 3
     DIVIDE          reduce using rule 3
     RPAREN          reduce using rule 3
=20
   ! PLUS            [ shift and go to state 6 ]
   ! MINUS           [ shift and go to state 5 ]
   ! TIMES           [ shift and go to state 4 ]
   ! DIVIDE          [ shift and go to state 7 ]
=20
 state 10
=20
     expression -&gt; expression MINUS expression .
     expression -&gt; expression . PLUS expression
     expression -&gt; expression . MINUS expression
     expression -&gt; expression . TIMES expression
     expression -&gt; expression . DIVIDE expression
=20
     $               reduce using rule 2
     PLUS            reduce using rule 2
     MINUS           reduce using rule 2
     RPAREN          reduce using rule 2
     TIMES           shift and go to state 4
     DIVIDE          shift and go to state 7
=20
   ! TIMES           [ reduce using rule 2 ]
   ! DIVIDE          [ reduce using rule 2 ]
   ! PLUS            [ shift and go to state 6 ]
   ! MINUS           [ shift and go to state 5 ]
=20
 state 11
=20
     expression -&gt; expression PLUS expression .
     expression -&gt; expression . PLUS expression
     expression -&gt; expression . MINUS expression
     expression -&gt; expression . TIMES expression
     expression -&gt; expression . DIVIDE expression
=20
     $               reduce using rule 1
     PLUS            reduce using rule 1
     MINUS           reduce using rule 1
     RPAREN          reduce using rule 1
     TIMES           shift and go to state 4
     DIVIDE          shift and go to state 7
=20
   ! TIMES           [ reduce using rule 1 ]
   ! DIVIDE          [ reduce using rule 1 ]
   ! PLUS            [ shift and go to state 6 ]
   ! MINUS           [ shift and go to state 5 ]
=20
 state 12
=20
     expression -&gt; expression DIVIDE expression .
     expression -&gt; expression . PLUS expression
     expression -&gt; expression . MINUS expression
     expression -&gt; expression . TIMES expression
     expression -&gt; expression . DIVIDE expression
=20
     $               reduce using rule 4
     PLUS            reduce using rule 4
     MINUS           reduce using rule 4
     TIMES           reduce using rule 4
     DIVIDE          reduce using rule 4
     RPAREN          reduce using rule 4
=20
   ! PLUS            [ shift and go to state 6 ]
   ! MINUS           [ shift and go to state 5 ]
   ! TIMES           [ shift and go to state 4 ]
   ! DIVIDE          [ shift and go to state 7 ]
=20
 state 13
=20
     expression -&gt; LPAREN expression RPAREN .
=20
     $               reduce using rule 6
     PLUS            reduce using rule 6
     MINUS           reduce using rule 6
     TIMES           reduce using rule 6
     DIVIDE          reduce using rule 6
     RPAREN          reduce using rule 6
 </pre>
 </blockquote>
=20
 <p>
 The different states that appear in this file are a representation of
 every possible sequence of valid input tokens allowed by the grammar.
 When receiving input tokens, the parser is building up a stack and
 looking for matching rules.  Each state keeps track of the grammar
 rules that might be in the process of being matched at that point.  Within=
 each
 rule, the "." character indicates the current location of the parse
 within that rule.  In addition, the actions for each valid input token
 are listed.  When a shift/reduce or reduce/reduce conflict arises,
 rules <em>not</em> selected are prefixed with an !.  For example:
 </p>
=20
 <blockquote>
 <pre>   ! TIMES           [ reduce using rule 2 ]
   ! DIVIDE          [ reduce using rule 2 ]
   ! PLUS            [ shift and go to state 6 ]
   ! MINUS           [ shift and go to state 5 ]
 </pre>
 </blockquote>
=20
 <p>
 By looking at these rules (and with a little practice), you can usually tr=
ack down the source
 of most parsing conflicts.  It should also be stressed that not all shift-=
reduce conflicts are
 bad.  However, the only way to be sure that they are resolved correctly is=
 to look at <tt>parser.out</tt>.
 </p>
  =20
 <h3><a name=3D"ply_nn29"></a>6.8 Syntax Error Handling</h3>
=20
 <p>
 If you are creating a parser for production use, the handling of
 syntax errors is important.  As a general rule, you don't want a
 parser to simply throw up its hands and stop at the first sign of
 trouble.  Instead, you want it to report the error, recover if possible, a=
nd
 continue parsing so that all of the errors in the input get reported
 to the user at once.   This is the standard behavior found in compilers
 for languages such as C, C++, and Java.
 </p>
=20
 <p>
 In PLY, when a syntax error occurs during parsing, the error is immediatel=
y
 detected (i.e., the parser does not read any more tokens beyond the
 source of the error).  However, at this point, the parser enters a
 recovery mode that can be used to try and continue further parsing.
 As a general rule, error recovery in LR parsers is a delicate
 topic that involves ancient rituals and black-magic.   The recovery mechan=
ism
 provided by <tt>yacc.py</tt> is comparable to Unix yacc so you may want
 consult a book like O'Reilly's "Lex and Yacc" for some of the finer detail=
s.
 </p>
=20
 <p>
 When a syntax error occurs, <tt>yacc.py</tt> performs the following steps:
 </p>
=20
 <ol>
 <li>On the first occurrence of an error, the user-defined <tt>p_error()</t=
t> function
 is called with the offending token as an argument. However, if the syntax =
error is due to
 reaching the end-of-file, <tt>p_error()</tt> is called with an
   argument of <tt>None</tt>.
 Afterwards, the parser enters
 an "error-recovery" mode in which it will not make future calls to <tt>p_e=
rror()</tt> until it
 has successfully shifted at least 3 tokens onto the parsing stack.</li>
=20
 <p>
 </p><li>If no recovery action is taken in <tt>p_error()</tt>, the offendin=
g lookahead token is replaced
 with a special <tt>error</tt> token.</li>
 <p></p>
=20
 <p>
 </p><li>If the offending lookahead token is already set to <tt>error</tt>,=
 the top item of the parsing stack is
 deleted.</li>
 <p></p>
=20
 <p>
 </p><li>If the entire parsing stack is unwound, the parser enters a restar=
t state and attempts to start
 parsing from its initial state.</li>
 <p></p>
=20
 <p>
 </p><li>If a grammar rule accepts <tt>error</tt> as a token, it will be
 shifted onto the parsing stack.</li>
 <p></p>
=20
 <p>
 </p><li>If the top item of the parsing stack is <tt>error</tt>, lookahead =
tokens will be discarded until the
 parser can successfully shift a new symbol or reduce a rule involving <tt>=
error</tt>.</li>
 <p></p>
 </ol>
=20
 <h4><a name=3D"ply_nn30"></a>6.8.1 Recovery and resynchronization with err=
or rules</h4>
=20
 <p>
 The most well-behaved approach for handling syntax errors is to write gram=
mar rules that include the <tt>error</tt>
 token.  For example, suppose your language had a grammar rule for a print =
statement like this:
 </p>
=20
 <blockquote>
 <pre> def p_statement_print(p):
      'statement : PRINT expr SEMI'
      ...
 </pre>
 </blockquote>
=20
 <p>
 To account for the possibility of a bad expression, you might write an add=
itional grammar rule like this:
 </p>
=20
 <blockquote>
 <pre> def p_statement_print_error(p):
      'statement : PRINT error SEMI'
      print("Syntax error in print statement. Bad expression")
=20
 </pre>
 </blockquote>
=20
 <p>
 In this case, the <tt>error</tt> token will match any sequence of
 tokens that might appear up to the first semicolon that is
 encountered.  Once the semicolon is reached, the rule will be
 invoked and the <tt>error</tt> token will go away.
 </p>
=20
 <p>
 This type of recovery is sometimes known as parser resynchronization.
 The <tt>error</tt> token acts as a wildcard for any bad input text and
 the token immediately following <tt>error</tt> acts as a
 synchronization token.
 </p>
=20
 <p>
 It is important to note that the <tt>error</tt> token usually does not app=
ear as the last token
 on the right in an error rule.  For example:
 </p>
=20
 <blockquote>
 <pre> def p_statement_print_error(p):
     'statement : PRINT error'
     print("Syntax error in print statement. Bad expression")
 </pre>
 </blockquote>
=20
 <p>
 This is because the first bad token encountered will cause the rule to
 be reduced--which may make it difficult to recover if more bad tokens
 immediately follow.  =20
 </p>
=20
 <h4><a name=3D"ply_nn31"></a>6.8.2 Panic mode recovery</h4>
=20
 <p>
 An alternative error recovery scheme is to enter a panic mode recovery in =
which tokens are
 discarded to a point where the parser might be able to recover in some sen=
sible manner.
 </p>
=20
 <p>
 Panic mode recovery is implemented entirely in the <tt>p_error()</tt> func=
tion.  For example, this
 function starts discarding tokens until it reaches a closing '}'.  Then, i=
t restarts the=20
 parser in its initial state.
 </p>
=20
 <blockquote>
 <pre> def p_error(p):
     print("Whoa. You are seriously hosed.")
     if not p:
         print("End of File!")
         return
=20
     # Read ahead looking for a closing '}'
     while True:
         tok =3D parser.token()             # Get the next token
         if not tok or tok.type =3D=3D 'RBRACE':=20
             break
     parser.restart()
 </pre>
 </blockquote>
=20
 <p>
 This function simply discards the bad token and tells the parser that the =
error was ok.
 </p>
=20
 <blockquote>
 <pre> def p_error(p):
     if p:
          print("Syntax error at token", p.type)
          # Just discard the token and tell the parser it's okay.
          parser.errok()
     else:
          print("Syntax error at EOF")
 </pre>
 </blockquote>
=20
 <p>
 More information on these methods is as follows:
 </p>
=20
 <ul>
 <p>
 </p><li><tt>parser.errok()</tt>.  This resets the parser state so it doesn=
't think it's in error-recovery
 mode.   This will prevent an <tt>error</tt> token from being generated and=
 will reset the internal
 error counters so that the next syntax error will call <tt>p_error()</tt> =
again.</li>
 <p></p>
=20
 <p>
 </p><li><tt>parser.token()</tt>.  This returns the next token on the input=
 stream.</li>
 <p></p>
 <p>
 </p><li><tt>parser.restart()</tt>.  This discards the entire parsing stack=
 and resets the parser
 to its initial state. </li>
 <p></p>
 </ul>
=20
 <p>
 To supply the next lookahead token to the parser, <tt>p_error()</tt> can r=
eturn a token.  This might be
 useful if trying to synchronize on special characters.  For example:
 </p>
=20
 <blockquote>
 <pre> def p_error(p):
     # Read ahead looking for a terminating ";"
     while True:
         tok =3D parser.token()             # Get the next token
         if not tok or tok.type =3D=3D 'SEMI': break
     parser.errok()
=20
     # Return SEMI to the parser as the next lookahead token
     return tok =20
 </pre>
 </blockquote>
=20
 <p>
 Keep in mind in that the above error handling functions,
 <tt>parser</tt> is an instance of the parser created by
 <tt>yacc()</tt>.   You'll need to save this instance someplace in your
 code so that you can refer to it during error handling.
 </p>
=20
 <h4><a name=3D"ply_nn35"></a>6.8.3 Signalling an error from a production</=
h4>
=20
 <p>
 If necessary, a production rule can manually force the parser to enter err=
or recovery.  This
 is done by raising the <tt>SyntaxError</tt> exception like this:
 </p>
=20
 <blockquote>
 <pre> def p_production(p):
     'production : some production ...'
     raise SyntaxError
 </pre>
 </blockquote>
=20
 <p>
 The effect of raising <tt>SyntaxError</tt> is the same as if the last symb=
ol shifted onto the
 parsing stack was actually a syntax error.  Thus, when you do this, the la=
st symbol shifted is popped off
 of the parsing stack and the current lookahead token is set to an <tt>erro=
r</tt> token.   The parser
 then enters error-recovery mode where it tries to reduce rules that can ac=
cept <tt>error</tt> tokens. =20
 The steps that follow from this point are exactly the same as if a syntax =
error were detected and=20
 <tt>p_error()</tt> were called.
 </p>
=20
 <p>
 One important aspect of manually setting an error is that the <tt>p_error(=
)</tt> function will <b>NOT</b> be
 called in this case.   If you need to issue an error message, make sure yo=
u do it in the production that
 raises <tt>SyntaxError</tt>.
 </p>
=20
 <p>
 Note: This feature of PLY is meant to mimic the behavior of the YYERROR ma=
cro in yacc.
 </p>
=20
 <h4><a name=3D"ply_nn38"></a>6.8.4 When Do Syntax Errors Get Reported</h4>
=20
=20
 <p>
 In most cases, yacc will handle errors as soon as a bad input token is
 detected on the input.  However, be aware that yacc may choose to
 delay error handling until after it has reduced one or more grammar
 rules first.  This behavior might be unexpected, but it's related to
 special states in the underlying parsing table known as "defaulted
 states."  A defaulted state is parsing condition where the same
 grammar rule will be reduced regardless of what <em>valid</em> token
 comes next on the input.  For such states, yacc chooses to go ahead
 and reduce the grammar rule <em>without reading the next input
 token</em>.  If the next token is bad, yacc will eventually get around to =
reading it and=20
 report a syntax error.  It's just a little unusual in that you might
 see some of your grammar rules firing immediately prior to the syntax=20
 error.
 </p>
=20
 <p>
 Usually, the delayed error reporting with defaulted states is harmless
 (and there are other reasons for wanting PLY to behave in this way).
 However, if you need to turn this behavior off for some reason.  You
 can clear the defaulted states table like this:
 </p>
=20
 <blockquote>
 <pre> parser =3D yacc.yacc()
 parser.defaulted_states =3D {}
 </pre>
 </blockquote>
=20
 <p>
 Disabling defaulted states is not recommended if your grammar makes use
 of embedded actions as described in Section 6.11.</p>
=20
 <h4><a name=3D"ply_nn32"></a>6.8.5 General comments on error handling</h4>
=20
 <p>
 For normal types of languages, error recovery with error rules and resynch=
ronization characters is probably the most reliable
 technique. This is because you can instrument the grammar to catch errors =
at selected places where it is relatively easy=20
 to recover and continue parsing.  Panic mode recovery is really only usefu=
l in certain specialized applications where you might want
 to discard huge portions of the input text to find a valid restart point.
 </p>
=20
 <h3><a name=3D"ply_nn33"></a>6.9 Line Number and Position Tracking</h3>
=20
 <p>
 Position tracking is often a tricky problem when writing compilers.
 By default, PLY tracks the line number and position of all tokens.
 This information is available using the following functions:
 </p>
=20
 <ul>
 <li><tt>p.lineno(num)</tt>. Return the line number for symbol <em>num</em>
 </li><li><tt>p.lexpos(num)</tt>. Return the lexing position for symbol <em=
>num</em>
 </li></ul>
=20
 <p>
 For example:
 </p>
=20
 <blockquote>
 <pre> def p_expression(p):
     'expression : expression PLUS expression'
     line   =3D p.lineno(2)        # line number of the PLUS token
     index  =3D p.lexpos(2)        # Position of the PLUS token
 </pre>
 </blockquote>
=20
 <p>
 As an optional feature, <tt>yacc.py</tt> can automatically track line
 numbers and positions for all of the grammar symbols as well.
 However, this extra tracking requires extra processing and can
 significantly slow down parsing.  Therefore, it must be enabled by
 passing the
 <tt>tracking=3DTrue</tt> option to <tt>yacc.parse()</tt>.  For example:
=20
 </p>
=20
 <blockquote>
 <pre> yacc.parse(data,tracking=3DTrue)
 </pre>
 </blockquote>
=20
 <p>
 Once enabled, the <tt>lineno()</tt> and <tt>lexpos()</tt> methods work
 for all grammar symbols.  In addition, two additional methods can be
 used:
 </p>
=20
 <ul>
 <li><tt>p.linespan(num)</tt>. Return a tuple (startline,endline) with the =
starting and ending line number for symbol <em>num</em>.
 </li><li><tt>p.lexspan(num)</tt>. Return a tuple (start,end) with the star=
ting and ending positions for symbol <em>num</em>.
 </li></ul>
=20
 <p>
 For example:
 </p>
=20
 <blockquote>
 <pre> def p_expression(p):
     'expression : expression PLUS expression'
     p.lineno(1)        # Line number of the left expression
     p.lineno(2)        # line number of the PLUS operator
     p.lineno(3)        # line number of the right expression
     ...
     start,end =3D p.linespan(3)    # Start,end lines of the right expressi=
on
     starti,endi =3D p.lexspan(3)   # Start,end positions of right expressi=
on
=20
 </pre>
 </blockquote>
=20
 <p>
 Note: The <tt>lexspan()</tt> function only returns the range of values up =
to the start of the last grammar symbol. =20
 </p>
=20
 <p>
 Although it may be convenient for PLY to track position information on
 all grammar symbols, this is often unnecessary.  For example, if you
 are merely using line number information in an error message, you can
 often just key off of a specific token in the grammar rule.  For
 example:
 </p>
=20
 <blockquote>
 <pre> def p_bad_func(p):
     'funccall : fname LPAREN error RPAREN'
     # Line number reported from LPAREN token
     print("Bad function call at line", p.lineno(2))
 </pre>
 </blockquote>
=20
 <p>
 Similarly, you may get better parsing performance if you only
 selectively propagate line number information where it's needed using
 the <tt>p.set_lineno()</tt> method.  For example:
 </p>
=20
 <blockquote>
 <pre> def p_fname(p):
     'fname : ID'
     p[0] =3D p[1]
     p.set_lineno(0,p.lineno(1))
 </pre>
 </blockquote>
=20
 <p>
 PLY doesn't retain line number information from rules that have already be=
en
 parsed.   If you are building an abstract syntax tree and need to have lin=
e numbers,
 you should make sure that the line numbers appear in the tree itself.
 </p>
=20
 <h3><a name=3D"ply_nn34"></a>6.10 AST Construction</h3>
=20
=20
 <p>
 <tt>yacc.py</tt> provides no special functions for constructing an
 abstract syntax tree.  However, such construction is easy enough to do
 on your own.=20
 </p>
=20
 <p>A minimal way to construct a tree is to simply create and
 propagate a tuple or list in each grammar rule function.   There
 are many possible ways to do this, but one example would be something
 like this:
 </p>
=20
 <blockquote>
 <pre> def p_expression_binop(p):
     '''expression : expression PLUS expression
                   | expression MINUS expression
                   | expression TIMES expression
                   | expression DIVIDE expression'''
=20
     p[0] =3D ('binary-expression',p[2],p[1],p[3])
=20
 def p_expression_group(p):
     'expression : LPAREN expression RPAREN'
     p[0] =3D ('group-expression',p[2])
=20
 def p_expression_number(p):
     'expression : NUMBER'
     p[0] =3D ('number-expression',p[1])
 </pre>
 </blockquote>
=20
 <p>
 Another approach is to create a set of data structure for different
 kinds of abstract syntax tree nodes and assign nodes to <tt>p[0]</tt>
 in each rule.  For example:
 </p>
=20
 <blockquote>
 <pre> class Expr: pass
=20
 class BinOp(Expr):
     def __init__(self,left,op,right):
         self.type =3D "binop"
         self.left =3D left
         self.right =3D right
         self.op =3D op
=20
 class Number(Expr):
     def __init__(self,value):
         self.type =3D "number"
         self.value =3D value
=20
 def p_expression_binop(p):
     '''expression : expression PLUS expression
                   | expression MINUS expression
                   | expression TIMES expression
                   | expression DIVIDE expression'''
=20
     p[0] =3D BinOp(p[1],p[2],p[3])
=20
 def p_expression_group(p):
     'expression : LPAREN expression RPAREN'
     p[0] =3D p[2]
=20
 def p_expression_number(p):
     'expression : NUMBER'
     p[0] =3D Number(p[1])
 </pre>
 </blockquote>
=20
 <p>
 The advantage to this approach is that it may make it easier to attach mor=
e complicated
 semantics, type checking, code generation, and other features to the node =
classes.
 </p>
=20
 <p>
 To simplify tree traversal, it may make sense to pick a very generic
 tree structure for your parse tree nodes.  For example:
 </p>
=20
 <blockquote>
 <pre> class Node:
     def __init__(self,type,children=3DNone,leaf=3DNone):
          self.type =3D type
          if children:
               self.children =3D children
          else:
               self.children =3D [ ]
          self.leaf =3D leaf
 	=20
 def p_expression_binop(p):
     '''expression : expression PLUS expression
                   | expression MINUS expression
                   | expression TIMES expression
                   | expression DIVIDE expression'''
=20
     p[0] =3D Node("binop", [p[1],p[3]], p[2])
 </pre>
 </blockquote>
=20
 <h3><a name=3D"ply_nn35b"></a>6.11 Embedded Actions</h3>
=20
 <p>
 The parsing technique used by yacc only allows actions to be executed at t=
he end of a rule.  For example,
 suppose you have a rule like this:
 </p>
=20
 <blockquote>
 <pre> def p_foo(p):
     "foo : A B C D"
     print("Parsed a foo", p[1],p[2],p[3],p[4])
 </pre>
 </blockquote>
=20
 <p>
 In this case, the supplied action code only executes after all of the
 symbols <tt>A</tt>, <tt>B</tt>, <tt>C</tt>, and <tt>D</tt> have been
 parsed. Sometimes, however, it is useful to execute small code
 fragments during intermediate stages of parsing.  For example, suppose
 you wanted to perform some action immediately after <tt>A</tt> has
 been parsed. To do this, write an empty rule like this:
 </p>
=20
 <blockquote>
 <pre> def p_foo(p):
     "foo : A seen_A B C D"
     print("Parsed a foo", p[1],p[3],p[4],p[5])
     print("seen_A returned", p[2])
=20
 def p_seen_A(p):
     "seen_A :"
     print("Saw an A =3D ", p[-1])   # Access grammar symbol to left
     p[0] =3D some_value            # Assign value to seen_A
=20
 </pre>
 </blockquote>
=20
 <p>
 In this example, the empty <tt>seen_A</tt> rule executes immediately
 after <tt>A</tt> is shifted onto the parsing stack.  Within this
 rule, <tt>p[-1]</tt> refers to the symbol on the stack that appears
 immediately to the left of the <tt>seen_A</tt> symbol.  In this case,
 it would be the value of <tt>A</tt> in the <tt>foo</tt> rule
 immediately above.  Like other rules, a value can be returned from an
 embedded action by simply assigning it to <tt>p[0]</tt>
 </p>
=20
 <p>
 The use of embedded actions can sometimes introduce extra shift/reduce con=
flicts.  For example,
 this grammar has no conflicts:
 </p>
=20
 <blockquote>
 <pre> def p_foo(p):
     """foo : abcd
            | abcx"""
=20
 def p_abcd(p):
     "abcd : A B C D"
=20
 def p_abcx(p):
     "abcx : A B C X"
 </pre>
 </blockquote>
=20
 <p>
 However, if you insert an embedded action into one of the rules like this,
 </p>
=20
 <blockquote>
 <pre> def p_foo(p):
     """foo : abcd
            | abcx"""
=20
 def p_abcd(p):
     "abcd : A B C D"
=20
 def p_abcx(p):
     "abcx : A B seen_AB C X"
=20
 def p_seen_AB(p):
     "seen_AB :"
 </pre>
 </blockquote>
=20
 <p>
 an extra shift-reduce conflict will be introduced.  This conflict is
 caused by the fact that the same symbol <tt>C</tt> appears next in
 both the <tt>abcd</tt> and <tt>abcx</tt> rules.  The parser can either
 shift the symbol (<tt>abcd</tt> rule) or reduce the empty
 rule <tt>seen_AB</tt> (<tt>abcx</tt> rule).
 </p>
=20
 <p>
 A common use of embedded rules is to control other aspects of parsing
 such as scoping of local variables.  For example, if you were parsing C co=
de, you might
 write code like this:
 </p>
=20
 <blockquote>
 <pre> def p_statements_block(p):
     "statements: LBRACE new_scope statements RBRACE"""
     # Action code
     ...
     pop_scope()        # Return to previous scope
=20
 def p_new_scope(p):
     "new_scope :"
     # Create a new scope for local variables
     s =3D new_scope()
     push_scope(s)
     ...
 </pre>
 </blockquote>
=20
 <p>
 In this case, the embedded action <tt>new_scope</tt> executes
 immediately after a <tt>LBRACE</tt> (<tt>{</tt>) symbol is parsed.
 This might adjust internal symbol tables and other aspects of the
 parser.  Upon completion of the rule <tt>statements_block</tt>, code
 might undo the operations performed in the embedded action
 (e.g., <tt>pop_scope()</tt>).
 </p>
=20
 <h3><a name=3D"ply_nn36"></a>6.12 Miscellaneous Yacc Notes</h3>
=20
=20
 <ul>
=20
 <li>By default, <tt>yacc.py</tt> relies on <tt>lex.py</tt> for tokenizing.=
  However, an alternative tokenizer
 can be supplied as follows:
=20
 <blockquote>
 <pre> parser =3D yacc.parse(lexer=3Dx)
 </pre>
 </blockquote>
 in this case, <tt>x</tt> must be a Lexer object that minimally has a <tt>x=
.token()</tt> method for retrieving the next
 token.   If an input string is given to <tt>yacc.parse()</tt>, the lexer m=
ust also have an <tt>x.input()</tt> method.
 </li>
=20
 <p>
 </p><li>By default, the yacc generates tables in debugging mode (which pro=
duces the parser.out file and other output).
 To disable this, use
=20
 <blockquote>
 <pre> parser =3D yacc.yacc(debug=3DFalse)
 </pre>
 </blockquote>
 </li><p></p>
=20
 <p>
 </p><li>To change the name of the <tt>parsetab.py</tt> file,  use:
=20
 <blockquote>
 <pre> parser =3D yacc.yacc(tabmodule=3D"foo")
 </pre>
 </blockquote>
=20
 <p>
 Normally, the <tt>parsetab.py</tt> file is placed into the same directory =
as
 the module where the parser is defined. If you want it to go somewhere els=
e, you can
 given an absolute package name for <tt>tabmodule</tt> instead.  In that ca=
se, the=20
 tables will be written there.
 </p>
 </li><p></p>
=20
 <p>
 </p><li>To change the directory in which the <tt>parsetab.py</tt> file (an=
d other output files) are written, use:
 <blockquote>
 <pre> parser =3D yacc.yacc(tabmodule=3D"foo",outputdir=3D"somedirectory")
 </pre>
 </blockquote>
=20
 <p>
 Note: Be aware that unless the directory specified is also on Python's pat=
h (<tt>sys.path</tt>), subsequent
 imports of the table file will fail.   As a general rule, it's better to s=
pecify a destination using the
 <tt>tabmodule</tt> argument instead of directly specifying a directory usi=
ng the <tt>outputdir</tt> argument.
 </p>
 </li>
 <p></p>
=20
 <p>
 </p><li>To prevent yacc from generating any kind of parser table file, use=
:
 <blockquote>
 <pre> parser =3D yacc.yacc(write_tables=3DFalse)
 </pre>
 </blockquote>
=20
 Note: If you disable table generation, yacc() will regenerate the parsing =
tables
 each time it runs (which may take awhile depending on how large your gramm=
ar is).
 </li>
 <p></p>
 <p>
 </p><li>To print copious amounts of debugging during parsing, use:
=20
 <blockquote>
 <pre> parser.parse(input_text, debug=3DTrue)    =20
 </pre>
 </blockquote>
 </li>
 <p></p>
=20
 <p>
 </p><li><p>Since the generation of the LALR tables is relatively expensive=
, previously generated tables are
 cached and reused if possible.  The decision to regenerate the tables is d=
etermined by taking an MD5
 checksum of all grammar rules and precedence rules.  Only in the event of =
a mismatch are the tables regenerated.
 </p>
 <p>
 It should be noted that table generation is reasonably efficient, even for=
 grammars that involve around a 100 rules
 and several hundred states.</p> </li><p></p>
=20
 <p>
 </p><li>Since LR parsing is driven by tables, the performance of the parse=
r is largely independent of the
 size of the grammar.   The biggest bottlenecks will be the lexer and the c=
omplexity of the code in your grammar rules.
 </li>
 <p></p>
=20
 <p>
 </p><li><tt>yacc()</tt> also allows parsers to be defined as classes and a=
s closures (see the section on alternative specification of
 lexers).  However, be aware that only one parser may be defined in a singl=
e module (source file).  There are various=20
 error checks and validation steps that may issue confusing error messages =
if you try to define multiple parsers
 in the same source file.
 </li>
 <p></p>
=20
 <p>
 </p><li>Decorators of production rules have to update the wrapped function=
's line number.  <tt>wrapper.co_firstlineno =3D func.__code__.co_firstlinen=
o</tt>:
=20
 <blockquote>
 <pre> from functools import wraps
 from nodes import Collection
=20
=20
 def strict(*types):
     def decorate(func):
         @wraps(func)
         def wrapper(p):
             func(p)
             if not isinstance(p[0], types):
                 raise TypeError
=20
         wrapper.co_firstlineno =3D func.__code__.co_firstlineno
         return wrapper
=20
     return decorate
=20
 @strict(Collection)
 def p_collection(p):
     """
     collection  : sequence
                 | map
     """
     p[0] =3D p[1]
 </pre>
 </blockquote>
=20
 </li>
 <p></p>
=20
 </ul>
 <p></p>
=20
=20
 <h2><a name=3D"ply_nn37"></a>7. Multiple Parsers and Lexers</h2>
=20
 <p>
 In advanced parsing applications, you may want to have multiple
 parsers and lexers.=20
 </p>
=20
 <p>
 As a general rules this isn't a problem.   However, to make it work,
 you need to carefully make sure everything gets hooked up correctly.
 First, make sure you save the objects returned by <tt>lex()</tt> and
 <tt>yacc()</tt>.  For example:
 </p>
=20
 <blockquote>
 <pre> lexer  =3D lex.lex()       # Return lexer object
 parser =3D yacc.yacc()     # Return parser object
 </pre>
 </blockquote>
=20
 <p>
 Next, when parsing, make sure you give the <tt>parse()</tt> function a ref=
erence to the lexer it
 should be using.  For example:
 </p>
=20
 <blockquote>
 <pre> parser.parse(text,lexer=3Dlexer)
 </pre>
 </blockquote>
=20
 <p>
 If you forget to do this, the parser will use the last lexer
 created--which is not always what you want.
 </p>
=20
 <p>
 Within lexer and parser rule functions, these objects are also
 available.  In the lexer, the "lexer" attribute of a token refers to
 the lexer object that triggered the rule. For example:
 </p>
=20
 <blockquote>
 <pre> def t_NUMBER(t):
    r'\d+'
    ...
    print(t.lexer)           # Show lexer object
 </pre>
 </blockquote>
=20
 <p>
 In the parser, the "lexer" and "parser" attributes refer to the lexer
 and parser objects respectively.
 </p>
=20
 <blockquote>
 <pre> def p_expr_plus(p):
    'expr : expr PLUS expr'
    ...
    print(p.parser)          # Show parser object
    print(p.lexer)           # Show lexer object
 </pre>
 </blockquote>
=20
 <p>
 If necessary, arbitrary attributes can be attached to the lexer or parser =
object.
 For example, if you wanted to have different parsing modes, you could atta=
ch a mode
 attribute to the parser object and look at it later.
 </p>
=20
 <h2><a name=3D"ply_nn38b"></a>8. Using Python's Optimized Mode</h2>
=20
 <p>
 Because PLY uses information from doc-strings, parsing and lexing
 information must be gathered while running the Python interpreter in
 normal mode (i.e., not with the -O or -OO options).  However, if you
 specify optimized mode like this:
 </p>
=20
 <blockquote>
 <pre> lex.lex(optimize=3D1)
 yacc.yacc(optimize=3D1)
 </pre>
 </blockquote>
 <p>
 then PLY can later be used when Python runs in optimized mode. To make thi=
s work,
 make sure you first run Python in normal mode.  Once the lexing and parsin=
g tables
 have been generated the first time, run Python in optimized mode. PLY will=
 use
 the tables without the need for doc strings.
 </p>
 <p>
 Beware: running PLY in optimized mode disables a lot of error
 checking.  You should only do this when your project has stabilized
 and you don't need to do any debugging.   One of the purposes of
 optimized mode is to substantially decrease the startup time of
 your compiler (by assuming that everything is already properly
 specified and works).
 </p>
=20
 <h2><a name=3D"ply_nn44"></a>9. Advanced Debugging</h2>
=20
=20
 <p>
 Debugging a compiler is typically not an easy task. PLY provides some
 advanced diagostic capabilities through the use of Python's
 <tt>logging</tt> module.   The next two sections describe this:
 </p>
=20
 <h3><a name=3D"ply_nn45"></a>9.1 Debugging the lex() and yacc() commands</=
h3>
=20
=20
 <p>
 Both the <tt>lex()</tt> and <tt>yacc()</tt> commands have a debugging
 mode that can be enabled using the <tt>debug</tt> flag.  For example:
 </p>
=20
 <blockquote>
 <pre> lex.lex(debug=3DTrue)
 yacc.yacc(debug=3DTrue)
 </pre>
 </blockquote>
=20
 <p>
 Normally, the output produced by debugging is routed to either
 standard error or, in the case of <tt>yacc()</tt>, to a file
 <tt>parser.out</tt>.  This output can be more carefully controlled
 by supplying a logging object.  Here is an example that adds
 information about where different debugging messages are coming from:
 </p>
=20
 <blockquote>
 <pre> # Set up a logging object
 import logging
 logging.basicConfig(
     level =3D logging.DEBUG,
     filename =3D "parselog.txt",
     filemode =3D "w",
     format =3D "%(filename)10s:%(lineno)4d:%(message)s"
 )
 log =3D logging.getLogger()
=20
 lex.lex(debug=3DTrue,debuglog=3Dlog)
 yacc.yacc(debug=3DTrue,debuglog=3Dlog)
 </pre>
 </blockquote>
=20
 <p>
 If you supply a custom logger, the amount of debugging
 information produced can be controlled by setting the logging level.
 Typically, debugging messages are either issued at the <tt>DEBUG</tt>,
 <tt>INFO</tt>, or <tt>WARNING</tt> levels.
 </p>
=20
 <p>
 PLY's error messages and warnings are also produced using the logging
 interface.  This can be controlled by passing a logging object
 using the <tt>errorlog</tt> parameter.
 </p>
=20
 <blockquote>
 <pre> lex.lex(errorlog=3Dlog)
 yacc.yacc(errorlog=3Dlog)
 </pre>
 </blockquote>
=20
 <p>
 If you want to completely silence warnings, you can either pass in a
 logging object with an appropriate filter level or use the <tt>NullLogger<=
/tt>
 object defined in either <tt>lex</tt> or <tt>yacc</tt>.  For example:
 </p>
=20
 <blockquote>
 <pre> yacc.yacc(errorlog=3Dyacc.NullLogger())
 </pre>
 </blockquote>
=20
 <h3><a name=3D"ply_nn46"></a>9.2 Run-time Debugging</h3>
=20
=20
 <p>
 To enable run-time debugging of a parser, use the <tt>debug</tt> option to=
 parse. This
 option can either be an integer (which simply turns debugging on or off) o=
r an instance
 of a logger object. For example:
 </p>
=20
 <blockquote>
 <pre> log =3D logging.getLogger()
 parser.parse(input,debug=3Dlog)
 </pre>
 </blockquote>
=20
 <p>
 If a logging object is passed, you can use its filtering level to control =
how much
 output gets generated.   The <tt>INFO</tt> level is used to produce inform=
ation
 about rule reductions.  The <tt>DEBUG</tt> level will show information abo=
ut the
 parsing stack, token shifts, and other details.  The <tt>ERROR</tt> level =
shows information
 related to parsing errors.
 </p>
=20
 <p>
 For very complicated problems, you should pass in a logging object that
 redirects to a file where you can more easily inspect the output after
 execution.
 </p>
=20
 <h2><a name=3D"ply_nn49"></a>10. Packaging Advice</h2>
=20
=20
 <p>
 If you are distributing a package that makes use of PLY, you should
 spend a few moments thinking about how you want to handle the files
 that are automatically generated.  For example, the <tt>parsetab.py</tt>
 file generated by the <tt>yacc()</tt> function.</p>
=20
 <p>
 Starting in PLY-3.6, the table files are created in the same directory
 as the file where a parser is defined.   This means that the
 <tt>parsetab.py</tt> file will live side-by-side with your parser
 specification.  In terms of packaging, this is probably the easiest and
 most sane approach to manage.  You don't need to give <tt>yacc()</tt>
 any extra arguments and it should just "work."</p>
=20
 <p>
 One concern is the management of the <tt>parsetab.py</tt> file itself.
 For example, should you have this file checked into version control (e.g.,=
 GitHub),
 should it be included in a package distribution as a normal file, or shoul=
d you
 just let PLY generate it automatically for the user when they install your=
 package?
 </p>
=20
 <p>
 As of PLY-3.6, the <tt>parsetab.py</tt> file should be compatible across a=
ll versions
 of Python including Python 2 and 3.  Thus, a table file generated in Pytho=
n 2 should
 work fine if it's used on Python 3.  Because of this, it should be relativ=
ely harmless=20
 to distribute the <tt>parsetab.py</tt> file yourself if you need to. Howev=
er, be aware
 that older/newer versions of PLY may try to regenerate the file if there a=
re future=20
 enhancements or changes to its format.
 </p>
=20
 <p>
 To make the generation of table files easier for the purposes of installat=
ion, you might
 way to make your parser files executable using the <tt>-m</tt> option or s=
imilar.  For
 example:
 </p>
=20
 <blockquote>
 <pre> # calc.py
 ...
 ...
 def make_parser():
     parser =3D yacc.yacc()
     return parser
=20
 if __name__ =3D=3D '__main__':
     make_parser()
 </pre>
 </blockquote>
=20
 <p>
 You can then use a command such as <tt>python -m calc.py</tt> to generate =
the tables. Alternatively,
 a <tt>setup.py</tt> script, can import the module and use <tt>make_parser(=
)</tt> to create the
 parsing tables.
 </p>
=20
 <p>
 If you're willing to sacrifice a little startup time, you can also instruc=
t PLY to never write the
 tables using <tt>yacc.yacc(write_tables=3DFalse, debug=3DFalse)</tt>.   In=
 this mode, PLY will regenerate
 the parsing tables from scratch each time.  For a small grammar, you proba=
bly won't notice.  For a=20
 large grammar, you should probably reconsider--the parsing tables are mean=
t to dramatically speed up this process.
 </p>
=20
 <p>
 During operation, is is normal for PLY to produce diagnostic error
 messages (usually printed to standard error).  These are generated
 entirely using the <tt>logging</tt> module.  If you want to redirect
 these messages or silence them, you can provide your own logging
 object to <tt>yacc()</tt>.  For example:
 </p>
=20
 <blockquote>
 <pre> import logging
 log =3D logging.getLogger('ply')
 ...
 parser =3D yacc.yacc(errorlog=3Dlog)
 </pre>
 </blockquote>
=20
 <h2><a name=3D"ply_nn39"></a>11. Where to go from here?</h2>
=20
 <p>
 The <tt>examples</tt> directory of the PLY distribution contains several s=
imple examples.   Please consult a
 compilers textbook for the theory and underlying implementation details or=
 LR parsing.
 </p>
=20
=20
=20
=20
=20

</div>

    <!-- Optional JavaScript -->
    <!-- jQuery first, then Popper.js, then Bootstrap JS -->
   =20
   =20
   =20
 =20

</body></html>
------MultipartBoundary--GnEf29mHDl0EdyFbl8ooKttanCHpj7LsdK6pxfyeVY----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: cid:css-228e2c9b-b99d-4c5f-a378-5f7956c28336@mhtml.blink

@charset "utf-8";

.talk { clear: both; margin-bottom: 2em; }

.talk h2 { line-height: 1.2; }

.talk h3 { line-height: 1.2; }

.talk h4 { line-height: 1.2; }

.talk img { display: block; margin: 0px auto; max-width: 90%; border: 2px s=
olid black; box-shadow: rgb(136, 136, 136) 0.4em 0.5em 0.4em; }

.course img { display: block; margin: 0px auto; max-width: 90%; }

.coursepage img { display: block; max-width: 90%; }

@media (max-width: 480pt) {
  .talk::before { display: block; margin: 1em auto; text-align: center; con=
tent: "<->"; }
  .talk img { margin: 15pt; }
  .coursepage img { margin: 15pt; }
}

@media (min-width: 480pt) {
  body { padding-left: 2.5em; padding-right: 2.5em; }
  .talk img { float: left; max-width: 166pt; }
  .talk h2, .talk p, .talk h3, .talk h4 { padding-left: 192pt; }
  .coursepage img { max-width: 50%; float: left; }
}
------MultipartBoundary--GnEf29mHDl0EdyFbl8ooKttanCHpj7LsdK6pxfyeVY----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta/css/bootstrap.min.css

@charset "utf-8";

@media print {
  *, ::after, ::before { text-shadow: none !important; box-shadow: none !im=
portant; }
  a, a:visited { text-decoration: underline; }
  abbr[title]::after { content: " (" attr(title) ")"; }
  pre { white-space: pre-wrap !important; }
  blockquote, pre { border: 1px solid rgb(153, 153, 153); break-inside: avo=
id; }
  thead { display: table-header-group; }
  img, tr { break-inside: avoid; }
  h2, h3, p { orphans: 3; widows: 3; }
  h2, h3 { break-after: avoid; }
  .navbar { display: none; }
  .badge { border: 1px solid rgb(0, 0, 0); }
  .table { border-collapse: collapse !important; }
  .table td, .table th { background-color: rgb(255, 255, 255) !important; }
  .table-bordered td, .table-bordered th { border: 1px solid rgb(221, 221, =
221) !important; }
}

html { box-sizing: border-box; font-family: sans-serif; line-height: 1.15; =
text-size-adjust: 100%; -webkit-tap-highlight-color: transparent; }

*, ::after, ::before { box-sizing: inherit; }

article, aside, dialog, figcaption, figure, footer, header, hgroup, main, n=
av, section { display: block; }

body { margin: 0px; font-family: -apple-system, BlinkMacSystemFont, "Segoe =
UI", Roboto, "Helvetica Neue", Arial, sans-serif; font-size: 1rem; font-wei=
ght: 400; line-height: 1.5; color: rgb(33, 37, 41); background-color: rgb(2=
55, 255, 255); }

[tabindex=3D"-1"]:focus { outline: 0px !important; }

hr { box-sizing: content-box; height: 0px; overflow: visible; }

h1, h2, h3, h4, h5, h6 { margin-top: 0px; margin-bottom: 0.5rem; }

p { margin-top: 0px; margin-bottom: 1rem; }

abbr[data-original-title], abbr[title] { text-decoration: underline dotted;=
 cursor: help; border-bottom: 0px; }

address { margin-bottom: 1rem; font-style: normal; line-height: inherit; }

dl, ol, ul { margin-top: 0px; margin-bottom: 1rem; }

ol ol, ol ul, ul ol, ul ul { margin-bottom: 0px; }

dt { font-weight: 700; }

dd { margin-bottom: 0.5rem; margin-left: 0px; }

blockquote { margin: 0px 0px 1rem; }

dfn { font-style: italic; }

b, strong { font-weight: bolder; }

small { font-size: 80%; }

sub, sup { position: relative; font-size: 75%; line-height: 0; vertical-ali=
gn: baseline; }

sub { bottom: -0.25em; }

sup { top: -0.5em; }

a { color: rgb(0, 123, 255); text-decoration: none; background-color: trans=
parent; }

a:hover { color: rgb(0, 86, 179); text-decoration: underline; }

a:not([href]):not([tabindex]) { color: inherit; text-decoration: none; }

a:not([href]):not([tabindex]):focus, a:not([href]):not([tabindex]):hover { =
color: inherit; text-decoration: none; }

a:not([href]):not([tabindex]):focus { outline: 0px; }

code, kbd, pre, samp { font-family: monospace, monospace; font-size: 1em; }

pre { margin-top: 0px; margin-bottom: 1rem; overflow: auto; }

figure { margin: 0px 0px 1rem; }

img { vertical-align: middle; border-style: none; }

svg:not(:root) { overflow: hidden; }

[role=3D"button"], a, area, button, input, label, select, summary, textarea=
 { touch-action: manipulation; }

table { border-collapse: collapse; }

caption { padding-top: 0.75rem; padding-bottom: 0.75rem; color: rgb(134, 14=
2, 150); text-align: left; caption-side: bottom; }

th { text-align: left; }

label { display: inline-block; margin-bottom: 0.5rem; }

button:focus { outline: -webkit-focus-ring-color auto 5px; }

button, input, optgroup, select, textarea { margin: 0px; font-family: inher=
it; font-size: inherit; line-height: inherit; }

button, input { overflow: visible; }

button, select { text-transform: none; }

[type=3D"reset"], [type=3D"submit"], button, html [type=3D"button"] { appea=
rance: button; }

input[type=3D"checkbox"], input[type=3D"radio"] { box-sizing: border-box; p=
adding: 0px; }

input[type=3D"date"], input[type=3D"datetime-local"], input[type=3D"month"]=
, input[type=3D"time"] { appearance: listbox; }

textarea { overflow: auto; resize: vertical; }

fieldset { min-width: 0px; padding: 0px; margin: 0px; border: 0px; }

legend { display: block; width: 100%; max-width: 100%; padding: 0px; margin=
-bottom: 0.5rem; font-size: 1.5rem; line-height: inherit; color: inherit; w=
hite-space: normal; }

progress { vertical-align: baseline; }

[type=3D"number"]::-webkit-inner-spin-button, [type=3D"number"]::-webkit-ou=
ter-spin-button { height: auto; }

[type=3D"search"] { outline-offset: -2px; appearance: none; }

[type=3D"search"]::-webkit-search-cancel-button, [type=3D"search"]::-webkit=
-search-decoration { appearance: none; }

::-webkit-file-upload-button { font: inherit; appearance: button; }

output { display: inline-block; }

summary { display: list-item; }

template { display: none; }

[hidden] { display: none !important; }

.h1, .h2, .h3, .h4, .h5, .h6, h1, h2, h3, h4, h5, h6 { margin-bottom: 0.5re=
m; font-family: inherit; font-weight: 500; line-height: 1.1; color: inherit=
; }

.h1, h1 { font-size: 2.5rem; }

.h2, h2 { font-size: 2rem; }

.h3, h3 { font-size: 1.75rem; }

.h4, h4 { font-size: 1.5rem; }

.h5, h5 { font-size: 1.25rem; }

.h6, h6 { font-size: 1rem; }

.lead { font-size: 1.25rem; font-weight: 300; }

.display-1 { font-size: 6rem; font-weight: 300; line-height: 1.1; }

.display-2 { font-size: 5.5rem; font-weight: 300; line-height: 1.1; }

.display-3 { font-size: 4.5rem; font-weight: 300; line-height: 1.1; }

.display-4 { font-size: 3.5rem; font-weight: 300; line-height: 1.1; }

hr { margin-top: 1rem; margin-bottom: 1rem; border-width: 1px 0px 0px; bord=
er-right-style: initial; border-bottom-style: initial; border-left-style: i=
nitial; border-right-color: initial; border-bottom-color: initial; border-l=
eft-color: initial; border-image: initial; border-top-style: solid; border-=
top-color: rgba(0, 0, 0, 0.1); }

.small, small { font-size: 80%; font-weight: 400; }

.mark, mark { padding: 0.2em; background-color: rgb(252, 248, 227); }

.list-unstyled { padding-left: 0px; list-style: none; }

.list-inline { padding-left: 0px; list-style: none; }

.list-inline-item { display: inline-block; }

.list-inline-item:not(:last-child) { margin-right: 5px; }

.initialism { font-size: 90%; text-transform: uppercase; }

.blockquote { margin-bottom: 1rem; font-size: 1.25rem; }

.blockquote-footer { display: block; font-size: 80%; color: rgb(134, 142, 1=
50); }

.blockquote-footer::before { content: "=E2=80=94=C2=A0"; }

.img-fluid { max-width: 100%; height: auto; }

.img-thumbnail { padding: 0.25rem; background-color: rgb(255, 255, 255); bo=
rder: 1px solid rgb(221, 221, 221); border-radius: 0.25rem; transition: all=
 0.2s ease-in-out 0s; max-width: 100%; height: auto; }

.figure { display: inline-block; }

.figure-img { margin-bottom: 0.5rem; line-height: 1; }

.figure-caption { font-size: 90%; color: rgb(134, 142, 150); }

code, kbd, pre, samp { font-family: Menlo, Monaco, Consolas, "Liberation Mo=
no", "Courier New", monospace; }

code { padding: 0.2rem 0.4rem; font-size: 90%; color: rgb(189, 65, 71); bac=
kground-color: rgb(248, 249, 250); border-radius: 0.25rem; }

a > code { padding: 0px; color: inherit; background-color: inherit; }

kbd { padding: 0.2rem 0.4rem; font-size: 90%; color: rgb(255, 255, 255); ba=
ckground-color: rgb(33, 37, 41); border-radius: 0.2rem; }

kbd kbd { padding: 0px; font-size: 100%; font-weight: 700; }

pre { display: block; margin-top: 0px; margin-bottom: 1rem; font-size: 90%;=
 color: rgb(33, 37, 41); }

pre code { padding: 0px; font-size: inherit; color: inherit; background-col=
or: transparent; border-radius: 0px; }

.pre-scrollable { max-height: 340px; overflow-y: scroll; }

.container { margin-right: auto; margin-left: auto; padding-right: 15px; pa=
dding-left: 15px; width: 100%; }

@media (min-width: 576px) {
  .container { max-width: 540px; }
}

@media (min-width: 768px) {
  .container { max-width: 720px; }
}

@media (min-width: 992px) {
  .container { max-width: 960px; }
}

@media (min-width: 1200px) {
  .container { max-width: 1140px; }
}

.container-fluid { margin-right: auto; margin-left: auto; padding-right: 15=
px; padding-left: 15px; width: 100%; }

.row { display: flex; flex-wrap: wrap; margin-right: -15px; margin-left: -1=
5px; }

.no-gutters { margin-right: 0px; margin-left: 0px; }

.no-gutters > .col, .no-gutters > [class*=3D"col-"] { padding-right: 0px; p=
adding-left: 0px; }

.col, .col-1, .col-10, .col-11, .col-12, .col-2, .col-3, .col-4, .col-5, .c=
ol-6, .col-7, .col-8, .col-9, .col-auto, .col-lg, .col-lg-1, .col-lg-10, .c=
ol-lg-11, .col-lg-12, .col-lg-2, .col-lg-3, .col-lg-4, .col-lg-5, .col-lg-6=
, .col-lg-7, .col-lg-8, .col-lg-9, .col-lg-auto, .col-md, .col-md-1, .col-m=
d-10, .col-md-11, .col-md-12, .col-md-2, .col-md-3, .col-md-4, .col-md-5, .=
col-md-6, .col-md-7, .col-md-8, .col-md-9, .col-md-auto, .col-sm, .col-sm-1=
, .col-sm-10, .col-sm-11, .col-sm-12, .col-sm-2, .col-sm-3, .col-sm-4, .col=
-sm-5, .col-sm-6, .col-sm-7, .col-sm-8, .col-sm-9, .col-sm-auto, .col-xl, .=
col-xl-1, .col-xl-10, .col-xl-11, .col-xl-12, .col-xl-2, .col-xl-3, .col-xl=
-4, .col-xl-5, .col-xl-6, .col-xl-7, .col-xl-8, .col-xl-9, .col-xl-auto { p=
osition: relative; width: 100%; min-height: 1px; padding-right: 15px; paddi=
ng-left: 15px; }

.col { flex-basis: 0px; flex-grow: 1; max-width: 100%; }

.col-auto { flex: 0 0 auto; width: auto; max-width: none; }

.col-1 { flex: 0 0 8.33333%; max-width: 8.33333%; }

.col-2 { flex: 0 0 16.6667%; max-width: 16.6667%; }

.col-3 { flex: 0 0 25%; max-width: 25%; }

.col-4 { flex: 0 0 33.3333%; max-width: 33.3333%; }

.col-5 { flex: 0 0 41.6667%; max-width: 41.6667%; }

.col-6 { flex: 0 0 50%; max-width: 50%; }

.col-7 { flex: 0 0 58.3333%; max-width: 58.3333%; }

.col-8 { flex: 0 0 66.6667%; max-width: 66.6667%; }

.col-9 { flex: 0 0 75%; max-width: 75%; }

.col-10 { flex: 0 0 83.3333%; max-width: 83.3333%; }

.col-11 { flex: 0 0 91.6667%; max-width: 91.6667%; }

.col-12 { flex: 0 0 100%; max-width: 100%; }

.order-1 { order: 1; }

.order-2 { order: 2; }

.order-3 { order: 3; }

.order-4 { order: 4; }

.order-5 { order: 5; }

.order-6 { order: 6; }

.order-7 { order: 7; }

.order-8 { order: 8; }

.order-9 { order: 9; }

.order-10 { order: 10; }

.order-11 { order: 11; }

.order-12 { order: 12; }

@media (min-width: 576px) {
  .col-sm { flex-basis: 0px; flex-grow: 1; max-width: 100%; }
  .col-sm-auto { flex: 0 0 auto; width: auto; max-width: none; }
  .col-sm-1 { flex: 0 0 8.33333%; max-width: 8.33333%; }
  .col-sm-2 { flex: 0 0 16.6667%; max-width: 16.6667%; }
  .col-sm-3 { flex: 0 0 25%; max-width: 25%; }
  .col-sm-4 { flex: 0 0 33.3333%; max-width: 33.3333%; }
  .col-sm-5 { flex: 0 0 41.6667%; max-width: 41.6667%; }
  .col-sm-6 { flex: 0 0 50%; max-width: 50%; }
  .col-sm-7 { flex: 0 0 58.3333%; max-width: 58.3333%; }
  .col-sm-8 { flex: 0 0 66.6667%; max-width: 66.6667%; }
  .col-sm-9 { flex: 0 0 75%; max-width: 75%; }
  .col-sm-10 { flex: 0 0 83.3333%; max-width: 83.3333%; }
  .col-sm-11 { flex: 0 0 91.6667%; max-width: 91.6667%; }
  .col-sm-12 { flex: 0 0 100%; max-width: 100%; }
  .order-sm-1 { order: 1; }
  .order-sm-2 { order: 2; }
  .order-sm-3 { order: 3; }
  .order-sm-4 { order: 4; }
  .order-sm-5 { order: 5; }
  .order-sm-6 { order: 6; }
  .order-sm-7 { order: 7; }
  .order-sm-8 { order: 8; }
  .order-sm-9 { order: 9; }
  .order-sm-10 { order: 10; }
  .order-sm-11 { order: 11; }
  .order-sm-12 { order: 12; }
}

@media (min-width: 768px) {
  .col-md { flex-basis: 0px; flex-grow: 1; max-width: 100%; }
  .col-md-auto { flex: 0 0 auto; width: auto; max-width: none; }
  .col-md-1 { flex: 0 0 8.33333%; max-width: 8.33333%; }
  .col-md-2 { flex: 0 0 16.6667%; max-width: 16.6667%; }
  .col-md-3 { flex: 0 0 25%; max-width: 25%; }
  .col-md-4 { flex: 0 0 33.3333%; max-width: 33.3333%; }
  .col-md-5 { flex: 0 0 41.6667%; max-width: 41.6667%; }
  .col-md-6 { flex: 0 0 50%; max-width: 50%; }
  .col-md-7 { flex: 0 0 58.3333%; max-width: 58.3333%; }
  .col-md-8 { flex: 0 0 66.6667%; max-width: 66.6667%; }
  .col-md-9 { flex: 0 0 75%; max-width: 75%; }
  .col-md-10 { flex: 0 0 83.3333%; max-width: 83.3333%; }
  .col-md-11 { flex: 0 0 91.6667%; max-width: 91.6667%; }
  .col-md-12 { flex: 0 0 100%; max-width: 100%; }
  .order-md-1 { order: 1; }
  .order-md-2 { order: 2; }
  .order-md-3 { order: 3; }
  .order-md-4 { order: 4; }
  .order-md-5 { order: 5; }
  .order-md-6 { order: 6; }
  .order-md-7 { order: 7; }
  .order-md-8 { order: 8; }
  .order-md-9 { order: 9; }
  .order-md-10 { order: 10; }
  .order-md-11 { order: 11; }
  .order-md-12 { order: 12; }
}

@media (min-width: 992px) {
  .col-lg { flex-basis: 0px; flex-grow: 1; max-width: 100%; }
  .col-lg-auto { flex: 0 0 auto; width: auto; max-width: none; }
  .col-lg-1 { flex: 0 0 8.33333%; max-width: 8.33333%; }
  .col-lg-2 { flex: 0 0 16.6667%; max-width: 16.6667%; }
  .col-lg-3 { flex: 0 0 25%; max-width: 25%; }
  .col-lg-4 { flex: 0 0 33.3333%; max-width: 33.3333%; }
  .col-lg-5 { flex: 0 0 41.6667%; max-width: 41.6667%; }
  .col-lg-6 { flex: 0 0 50%; max-width: 50%; }
  .col-lg-7 { flex: 0 0 58.3333%; max-width: 58.3333%; }
  .col-lg-8 { flex: 0 0 66.6667%; max-width: 66.6667%; }
  .col-lg-9 { flex: 0 0 75%; max-width: 75%; }
  .col-lg-10 { flex: 0 0 83.3333%; max-width: 83.3333%; }
  .col-lg-11 { flex: 0 0 91.6667%; max-width: 91.6667%; }
  .col-lg-12 { flex: 0 0 100%; max-width: 100%; }
  .order-lg-1 { order: 1; }
  .order-lg-2 { order: 2; }
  .order-lg-3 { order: 3; }
  .order-lg-4 { order: 4; }
  .order-lg-5 { order: 5; }
  .order-lg-6 { order: 6; }
  .order-lg-7 { order: 7; }
  .order-lg-8 { order: 8; }
  .order-lg-9 { order: 9; }
  .order-lg-10 { order: 10; }
  .order-lg-11 { order: 11; }
  .order-lg-12 { order: 12; }
}

@media (min-width: 1200px) {
  .col-xl { flex-basis: 0px; flex-grow: 1; max-width: 100%; }
  .col-xl-auto { flex: 0 0 auto; width: auto; max-width: none; }
  .col-xl-1 { flex: 0 0 8.33333%; max-width: 8.33333%; }
  .col-xl-2 { flex: 0 0 16.6667%; max-width: 16.6667%; }
  .col-xl-3 { flex: 0 0 25%; max-width: 25%; }
  .col-xl-4 { flex: 0 0 33.3333%; max-width: 33.3333%; }
  .col-xl-5 { flex: 0 0 41.6667%; max-width: 41.6667%; }
  .col-xl-6 { flex: 0 0 50%; max-width: 50%; }
  .col-xl-7 { flex: 0 0 58.3333%; max-width: 58.3333%; }
  .col-xl-8 { flex: 0 0 66.6667%; max-width: 66.6667%; }
  .col-xl-9 { flex: 0 0 75%; max-width: 75%; }
  .col-xl-10 { flex: 0 0 83.3333%; max-width: 83.3333%; }
  .col-xl-11 { flex: 0 0 91.6667%; max-width: 91.6667%; }
  .col-xl-12 { flex: 0 0 100%; max-width: 100%; }
  .order-xl-1 { order: 1; }
  .order-xl-2 { order: 2; }
  .order-xl-3 { order: 3; }
  .order-xl-4 { order: 4; }
  .order-xl-5 { order: 5; }
  .order-xl-6 { order: 6; }
  .order-xl-7 { order: 7; }
  .order-xl-8 { order: 8; }
  .order-xl-9 { order: 9; }
  .order-xl-10 { order: 10; }
  .order-xl-11 { order: 11; }
  .order-xl-12 { order: 12; }
}

.table { width: 100%; max-width: 100%; margin-bottom: 1rem; background-colo=
r: transparent; }

.table td, .table th { padding: 0.75rem; vertical-align: top; border-top: 1=
px solid rgb(233, 236, 239); }

.table thead th { vertical-align: bottom; border-bottom: 2px solid rgb(233,=
 236, 239); }

.table tbody + tbody { border-top: 2px solid rgb(233, 236, 239); }

.table .table { background-color: rgb(255, 255, 255); }

.table-sm td, .table-sm th { padding: 0.3rem; }

.table-bordered { border: 1px solid rgb(233, 236, 239); }

.table-bordered td, .table-bordered th { border: 1px solid rgb(233, 236, 23=
9); }

.table-bordered thead td, .table-bordered thead th { border-bottom-width: 2=
px; }

.table-striped tbody tr:nth-of-type(2n+1) { background-color: rgba(0, 0, 0,=
 0.05); }

.table-hover tbody tr:hover { background-color: rgba(0, 0, 0, 0.075); }

.table-primary, .table-primary > td, .table-primary > th { background-color=
: rgb(184, 218, 255); }

.table-hover .table-primary:hover { background-color: rgb(159, 205, 255); }

.table-hover .table-primary:hover > td, .table-hover .table-primary:hover >=
 th { background-color: rgb(159, 205, 255); }

.table-secondary, .table-secondary > td, .table-secondary > th { background=
-color: rgb(221, 223, 226); }

.table-hover .table-secondary:hover { background-color: rgb(207, 210, 214);=
 }

.table-hover .table-secondary:hover > td, .table-hover .table-secondary:hov=
er > th { background-color: rgb(207, 210, 214); }

.table-success, .table-success > td, .table-success > th { background-color=
: rgb(195, 230, 203); }

.table-hover .table-success:hover { background-color: rgb(177, 223, 187); }

.table-hover .table-success:hover > td, .table-hover .table-success:hover >=
 th { background-color: rgb(177, 223, 187); }

.table-info, .table-info > td, .table-info > th { background-color: rgb(190=
, 229, 235); }

.table-hover .table-info:hover { background-color: rgb(171, 221, 229); }

.table-hover .table-info:hover > td, .table-hover .table-info:hover > th { =
background-color: rgb(171, 221, 229); }

.table-warning, .table-warning > td, .table-warning > th { background-color=
: rgb(255, 238, 186); }

.table-hover .table-warning:hover { background-color: rgb(255, 232, 161); }

.table-hover .table-warning:hover > td, .table-hover .table-warning:hover >=
 th { background-color: rgb(255, 232, 161); }

.table-danger, .table-danger > td, .table-danger > th { background-color: r=
gb(245, 198, 203); }

.table-hover .table-danger:hover { background-color: rgb(241, 176, 183); }

.table-hover .table-danger:hover > td, .table-hover .table-danger:hover > t=
h { background-color: rgb(241, 176, 183); }

.table-light, .table-light > td, .table-light > th { background-color: rgb(=
253, 253, 254); }

.table-hover .table-light:hover { background-color: rgb(236, 236, 246); }

.table-hover .table-light:hover > td, .table-hover .table-light:hover > th =
{ background-color: rgb(236, 236, 246); }

.table-dark, .table-dark > td, .table-dark > th { background-color: rgb(198=
, 200, 202); }

.table-hover .table-dark:hover { background-color: rgb(185, 187, 190); }

.table-hover .table-dark:hover > td, .table-hover .table-dark:hover > th { =
background-color: rgb(185, 187, 190); }

.table-active, .table-active > td, .table-active > th { background-color: r=
gba(0, 0, 0, 0.075); }

.table-hover .table-active:hover { background-color: rgba(0, 0, 0, 0.075); =
}

.table-hover .table-active:hover > td, .table-hover .table-active:hover > t=
h { background-color: rgba(0, 0, 0, 0.075); }

.thead-inverse th { color: rgb(255, 255, 255); background-color: rgb(33, 37=
, 41); }

.thead-default th { color: rgb(73, 80, 87); background-color: rgb(233, 236,=
 239); }

.table-inverse { color: rgb(255, 255, 255); background-color: rgb(33, 37, 4=
1); }

.table-inverse td, .table-inverse th, .table-inverse thead th { border-colo=
r: rgb(50, 56, 62); }

.table-inverse.table-bordered { border: 0px; }

.table-inverse.table-striped tbody tr:nth-of-type(2n+1) { background-color:=
 rgba(255, 255, 255, 0.05); }

.table-inverse.table-hover tbody tr:hover { background-color: rgba(255, 255=
, 255, 0.075); }

@media (max-width: 991px) {
  .table-responsive { display: block; width: 100%; overflow-x: auto; }
  .table-responsive.table-bordered { border: 0px; }
}

.form-control { display: block; width: 100%; padding: 0.5rem 0.75rem; font-=
size: 1rem; line-height: 1.25; color: rgb(73, 80, 87); background-color: rg=
b(255, 255, 255); background-image: none; background-clip: padding-box; bor=
der: 1px solid rgba(0, 0, 0, 0.15); border-radius: 0.25rem; transition: bor=
der-color 0.15s ease-in-out 0s, box-shadow 0.15s ease-in-out 0s; }

.form-control:focus { color: rgb(73, 80, 87); background-color: rgb(255, 25=
5, 255); border-color: rgb(128, 189, 255); outline: 0px; }

.form-control::-webkit-input-placeholder { color: rgb(134, 142, 150); opaci=
ty: 1; }

.form-control::placeholder { color: rgb(134, 142, 150); opacity: 1; }

.form-control:disabled, .form-control[readonly] { background-color: rgb(233=
, 236, 239); opacity: 1; }

select.form-control:not([size]):not([multiple]) { height: calc(2.25rem + 2p=
x); }

.form-control-file, .form-control-range { display: block; }

.col-form-label { padding-top: calc(0.5rem - 2px); padding-bottom: calc(0.5=
rem - 2px); margin-bottom: 0px; }

.col-form-label-lg { padding-top: calc(0.5rem - 2px); padding-bottom: calc(=
0.5rem - 2px); font-size: 1.25rem; }

.col-form-label-sm { padding-top: calc(0.25rem - 2px); padding-bottom: calc=
(0.25rem - 2px); font-size: 0.875rem; }

.col-form-legend { padding-top: 0.5rem; padding-bottom: 0.5rem; margin-bott=
om: 0px; font-size: 1rem; }

.form-control-plaintext { padding-top: 0.5rem; padding-bottom: 0.5rem; marg=
in-bottom: 0px; line-height: 1.25; border-style: solid; border-color: trans=
parent; border-image: initial; border-width: 1px 0px; }

.form-control-plaintext.form-control-lg, .form-control-plaintext.form-contr=
ol-sm, .input-group-lg > .form-control-plaintext.form-control, .input-group=
-lg > .form-control-plaintext.input-group-addon, .input-group-lg > .input-g=
roup-btn > .form-control-plaintext.btn, .input-group-sm > .form-control-pla=
intext.form-control, .input-group-sm > .form-control-plaintext.input-group-=
addon, .input-group-sm > .input-group-btn > .form-control-plaintext.btn { p=
adding-right: 0px; padding-left: 0px; }

.form-control-sm, .input-group-sm > .form-control, .input-group-sm > .input=
-group-addon, .input-group-sm > .input-group-btn > .btn { padding: 0.25rem =
0.5rem; font-size: 0.875rem; line-height: 1.5; border-radius: 0.2rem; }

.input-group-sm > .input-group-btn > select.btn:not([size]):not([multiple])=
, .input-group-sm > select.form-control:not([size]):not([multiple]), .input=
-group-sm > select.input-group-addon:not([size]):not([multiple]), select.fo=
rm-control-sm:not([size]):not([multiple]) { height: calc(1.8125rem + 2px); =
}

.form-control-lg, .input-group-lg > .form-control, .input-group-lg > .input=
-group-addon, .input-group-lg > .input-group-btn > .btn { padding: 0.5rem 1=
rem; font-size: 1.25rem; line-height: 1.5; border-radius: 0.3rem; }

.input-group-lg > .input-group-btn > select.btn:not([size]):not([multiple])=
, .input-group-lg > select.form-control:not([size]):not([multiple]), .input=
-group-lg > select.input-group-addon:not([size]):not([multiple]), select.fo=
rm-control-lg:not([size]):not([multiple]) { height: calc(2.3125rem + 2px); =
}

.form-group { margin-bottom: 1rem; }

.form-text { display: block; margin-top: 0.25rem; }

.form-row { display: flex; flex-wrap: wrap; margin-right: -5px; margin-left=
: -5px; }

.form-row > .col, .form-row > [class*=3D"col-"] { padding-right: 5px; paddi=
ng-left: 5px; }

.form-check { position: relative; display: block; margin-bottom: 0.5rem; }

.form-check.disabled .form-check-label { color: rgb(134, 142, 150); }

.form-check-label { padding-left: 1.25rem; margin-bottom: 0px; }

.form-check-input { position: absolute; margin-top: 0.25rem; margin-left: -=
1.25rem; }

.form-check-input:only-child { position: static; }

.form-check-inline { display: inline-block; }

.form-check-inline .form-check-label { vertical-align: middle; }

.form-check-inline + .form-check-inline { margin-left: 0.75rem; }

.invalid-feedback { display: none; margin-top: 0.25rem; font-size: 0.875rem=
; color: rgb(220, 53, 69); }

.invalid-tooltip { position: absolute; top: 100%; z-index: 5; display: none=
; width: 250px; padding: 0.5rem; margin-top: 0.1rem; font-size: 0.875rem; l=
ine-height: 1; color: rgb(255, 255, 255); background-color: rgba(220, 53, 6=
9, 0.8); border-radius: 0.2rem; }

.custom-select.is-valid, .form-control.is-valid, .was-validated .custom-sel=
ect:valid, .was-validated .form-control:valid { border-color: rgb(40, 167, =
69); }

.custom-select.is-valid:focus, .form-control.is-valid:focus, .was-validated=
 .custom-select:valid:focus, .was-validated .form-control:valid:focus { box=
-shadow: rgba(40, 167, 69, 0.25) 0px 0px 0px 0.2rem; }

.custom-select.is-valid ~ .invalid-feedback, .custom-select.is-valid ~ .inv=
alid-tooltip, .form-control.is-valid ~ .invalid-feedback, .form-control.is-=
valid ~ .invalid-tooltip, .was-validated .custom-select:valid ~ .invalid-fe=
edback, .was-validated .custom-select:valid ~ .invalid-tooltip, .was-valida=
ted .form-control:valid ~ .invalid-feedback, .was-validated .form-control:v=
alid ~ .invalid-tooltip { display: block; }

.form-check-input.is-valid + .form-check-label, .was-validated .form-check-=
input:valid + .form-check-label { color: rgb(40, 167, 69); }

.custom-control-input.is-valid ~ .custom-control-indicator, .was-validated =
.custom-control-input:valid ~ .custom-control-indicator { background-color:=
 rgba(40, 167, 69, 0.25); }

.custom-control-input.is-valid ~ .custom-control-description, .was-validate=
d .custom-control-input:valid ~ .custom-control-description { color: rgb(40=
, 167, 69); }

.custom-file-input.is-valid ~ .custom-file-control, .was-validated .custom-=
file-input:valid ~ .custom-file-control { border-color: rgb(40, 167, 69); }

.custom-file-input.is-valid ~ .custom-file-control::before, .was-validated =
.custom-file-input:valid ~ .custom-file-control::before { border-color: inh=
erit; }

.custom-file-input.is-valid:focus, .was-validated .custom-file-input:valid:=
focus { box-shadow: rgba(40, 167, 69, 0.25) 0px 0px 0px 0.2rem; }

.custom-select.is-invalid, .form-control.is-invalid, .was-validated .custom=
-select:invalid, .was-validated .form-control:invalid { border-color: rgb(2=
20, 53, 69); }

.custom-select.is-invalid:focus, .form-control.is-invalid:focus, .was-valid=
ated .custom-select:invalid:focus, .was-validated .form-control:invalid:foc=
us { box-shadow: rgba(220, 53, 69, 0.25) 0px 0px 0px 0.2rem; }

.custom-select.is-invalid ~ .invalid-feedback, .custom-select.is-invalid ~ =
.invalid-tooltip, .form-control.is-invalid ~ .invalid-feedback, .form-contr=
ol.is-invalid ~ .invalid-tooltip, .was-validated .custom-select:invalid ~ .=
invalid-feedback, .was-validated .custom-select:invalid ~ .invalid-tooltip,=
 .was-validated .form-control:invalid ~ .invalid-feedback, .was-validated .=
form-control:invalid ~ .invalid-tooltip { display: block; }

.form-check-input.is-invalid + .form-check-label, .was-validated .form-chec=
k-input:invalid + .form-check-label { color: rgb(220, 53, 69); }

.custom-control-input.is-invalid ~ .custom-control-indicator, .was-validate=
d .custom-control-input:invalid ~ .custom-control-indicator { background-co=
lor: rgba(220, 53, 69, 0.25); }

.custom-control-input.is-invalid ~ .custom-control-description, .was-valida=
ted .custom-control-input:invalid ~ .custom-control-description { color: rg=
b(220, 53, 69); }

.custom-file-input.is-invalid ~ .custom-file-control, .was-validated .custo=
m-file-input:invalid ~ .custom-file-control { border-color: rgb(220, 53, 69=
); }

.custom-file-input.is-invalid ~ .custom-file-control::before, .was-validate=
d .custom-file-input:invalid ~ .custom-file-control::before { border-color:=
 inherit; }

.custom-file-input.is-invalid:focus, .was-validated .custom-file-input:inva=
lid:focus { box-shadow: rgba(220, 53, 69, 0.25) 0px 0px 0px 0.2rem; }

.form-inline { display: flex; flex-flow: row wrap; align-items: center; }

.form-inline .form-check { width: 100%; }

@media (min-width: 576px) {
  .form-inline label { display: flex; align-items: center; justify-content:=
 center; margin-bottom: 0px; }
  .form-inline .form-group { display: flex; flex: 0 0 auto; flex-flow: row =
wrap; align-items: center; margin-bottom: 0px; }
  .form-inline .form-control { display: inline-block; width: auto; vertical=
-align: middle; }
  .form-inline .form-control-plaintext { display: inline-block; }
  .form-inline .input-group { width: auto; }
  .form-inline .form-control-label { margin-bottom: 0px; vertical-align: mi=
ddle; }
  .form-inline .form-check { display: flex; align-items: center; justify-co=
ntent: center; width: auto; margin-top: 0px; margin-bottom: 0px; }
  .form-inline .form-check-label { padding-left: 0px; }
  .form-inline .form-check-input { position: relative; margin-top: 0px; mar=
gin-right: 0.25rem; margin-left: 0px; }
  .form-inline .custom-control { display: flex; align-items: center; justif=
y-content: center; padding-left: 0px; }
  .form-inline .custom-control-indicator { position: static; display: inlin=
e-block; margin-right: 0.25rem; vertical-align: text-bottom; }
  .form-inline .has-feedback .form-control-feedback { top: 0px; }
}

.btn { display: inline-block; font-weight: 400; text-align: center; white-s=
pace: nowrap; vertical-align: middle; user-select: none; border: 1px solid =
transparent; padding: 0.5rem 0.75rem; font-size: 1rem; line-height: 1.25; b=
order-radius: 0.25rem; transition: all 0.15s ease-in-out 0s; }

.btn:focus, .btn:hover { text-decoration: none; }

.btn.focus, .btn:focus { outline: 0px; box-shadow: rgba(0, 123, 255, 0.25) =
0px 0px 0px 3px; }

.btn.disabled, .btn:disabled { opacity: 0.65; }

.btn.active, .btn:active { background-image: none; }

a.btn.disabled, fieldset[disabled] a.btn { pointer-events: none; }

.btn-primary { color: rgb(255, 255, 255); background-color: rgb(0, 123, 255=
); border-color: rgb(0, 123, 255); }

.btn-primary:hover { color: rgb(255, 255, 255); background-color: rgb(0, 10=
5, 217); border-color: rgb(0, 98, 204); }

.btn-primary.focus, .btn-primary:focus { box-shadow: rgba(0, 123, 255, 0.5)=
 0px 0px 0px 3px; }

.btn-primary.disabled, .btn-primary:disabled { background-color: rgb(0, 123=
, 255); border-color: rgb(0, 123, 255); }

.btn-primary.active, .btn-primary:active, .show > .btn-primary.dropdown-tog=
gle { background-color: rgb(0, 105, 217); background-image: none; border-co=
lor: rgb(0, 98, 204); }

.btn-secondary { color: rgb(255, 255, 255); background-color: rgb(134, 142,=
 150); border-color: rgb(134, 142, 150); }

.btn-secondary:hover { color: rgb(255, 255, 255); background-color: rgb(114=
, 123, 132); border-color: rgb(108, 117, 125); }

.btn-secondary.focus, .btn-secondary:focus { box-shadow: rgba(134, 142, 150=
, 0.5) 0px 0px 0px 3px; }

.btn-secondary.disabled, .btn-secondary:disabled { background-color: rgb(13=
4, 142, 150); border-color: rgb(134, 142, 150); }

.btn-secondary.active, .btn-secondary:active, .show > .btn-secondary.dropdo=
wn-toggle { background-color: rgb(114, 123, 132); background-image: none; b=
order-color: rgb(108, 117, 125); }

.btn-success { color: rgb(255, 255, 255); background-color: rgb(40, 167, 69=
); border-color: rgb(40, 167, 69); }

.btn-success:hover { color: rgb(255, 255, 255); background-color: rgb(33, 1=
36, 56); border-color: rgb(30, 126, 52); }

.btn-success.focus, .btn-success:focus { box-shadow: rgba(40, 167, 69, 0.5)=
 0px 0px 0px 3px; }

.btn-success.disabled, .btn-success:disabled { background-color: rgb(40, 16=
7, 69); border-color: rgb(40, 167, 69); }

.btn-success.active, .btn-success:active, .show > .btn-success.dropdown-tog=
gle { background-color: rgb(33, 136, 56); background-image: none; border-co=
lor: rgb(30, 126, 52); }

.btn-info { color: rgb(255, 255, 255); background-color: rgb(23, 162, 184);=
 border-color: rgb(23, 162, 184); }

.btn-info:hover { color: rgb(255, 255, 255); background-color: rgb(19, 132,=
 150); border-color: rgb(17, 122, 139); }

.btn-info.focus, .btn-info:focus { box-shadow: rgba(23, 162, 184, 0.5) 0px =
0px 0px 3px; }

.btn-info.disabled, .btn-info:disabled { background-color: rgb(23, 162, 184=
); border-color: rgb(23, 162, 184); }

.btn-info.active, .btn-info:active, .show > .btn-info.dropdown-toggle { bac=
kground-color: rgb(19, 132, 150); background-image: none; border-color: rgb=
(17, 122, 139); }

.btn-warning { color: rgb(17, 17, 17); background-color: rgb(255, 193, 7); =
border-color: rgb(255, 193, 7); }

.btn-warning:hover { color: rgb(17, 17, 17); background-color: rgb(224, 168=
, 0); border-color: rgb(211, 158, 0); }

.btn-warning.focus, .btn-warning:focus { box-shadow: rgba(255, 193, 7, 0.5)=
 0px 0px 0px 3px; }

.btn-warning.disabled, .btn-warning:disabled { background-color: rgb(255, 1=
93, 7); border-color: rgb(255, 193, 7); }

.btn-warning.active, .btn-warning:active, .show > .btn-warning.dropdown-tog=
gle { background-color: rgb(224, 168, 0); background-image: none; border-co=
lor: rgb(211, 158, 0); }

.btn-danger { color: rgb(255, 255, 255); background-color: rgb(220, 53, 69)=
; border-color: rgb(220, 53, 69); }

.btn-danger:hover { color: rgb(255, 255, 255); background-color: rgb(200, 3=
5, 51); border-color: rgb(189, 33, 48); }

.btn-danger.focus, .btn-danger:focus { box-shadow: rgba(220, 53, 69, 0.5) 0=
px 0px 0px 3px; }

.btn-danger.disabled, .btn-danger:disabled { background-color: rgb(220, 53,=
 69); border-color: rgb(220, 53, 69); }

.btn-danger.active, .btn-danger:active, .show > .btn-danger.dropdown-toggle=
 { background-color: rgb(200, 35, 51); background-image: none; border-color=
: rgb(189, 33, 48); }

.btn-light { color: rgb(17, 17, 17); background-color: rgb(248, 249, 250); =
border-color: rgb(248, 249, 250); }

.btn-light:hover { color: rgb(17, 17, 17); background-color: rgb(226, 230, =
234); border-color: rgb(218, 224, 229); }

.btn-light.focus, .btn-light:focus { box-shadow: rgba(248, 249, 250, 0.5) 0=
px 0px 0px 3px; }

.btn-light.disabled, .btn-light:disabled { background-color: rgb(248, 249, =
250); border-color: rgb(248, 249, 250); }

.btn-light.active, .btn-light:active, .show > .btn-light.dropdown-toggle { =
background-color: rgb(226, 230, 234); background-image: none; border-color:=
 rgb(218, 224, 229); }

.btn-dark { color: rgb(255, 255, 255); background-color: rgb(52, 58, 64); b=
order-color: rgb(52, 58, 64); }

.btn-dark:hover { color: rgb(255, 255, 255); background-color: rgb(35, 39, =
43); border-color: rgb(29, 33, 36); }

.btn-dark.focus, .btn-dark:focus { box-shadow: rgba(52, 58, 64, 0.5) 0px 0p=
x 0px 3px; }

.btn-dark.disabled, .btn-dark:disabled { background-color: rgb(52, 58, 64);=
 border-color: rgb(52, 58, 64); }

.btn-dark.active, .btn-dark:active, .show > .btn-dark.dropdown-toggle { bac=
kground-color: rgb(35, 39, 43); background-image: none; border-color: rgb(2=
9, 33, 36); }

.btn-outline-primary { color: rgb(0, 123, 255); background-color: transpare=
nt; background-image: none; border-color: rgb(0, 123, 255); }

.btn-outline-primary:hover { color: rgb(255, 255, 255); background-color: r=
gb(0, 123, 255); border-color: rgb(0, 123, 255); }

.btn-outline-primary.focus, .btn-outline-primary:focus { box-shadow: rgba(0=
, 123, 255, 0.5) 0px 0px 0px 3px; }

.btn-outline-primary.disabled, .btn-outline-primary:disabled { color: rgb(0=
, 123, 255); background-color: transparent; }

.btn-outline-primary.active, .btn-outline-primary:active, .show > .btn-outl=
ine-primary.dropdown-toggle { color: rgb(255, 255, 255); background-color: =
rgb(0, 123, 255); border-color: rgb(0, 123, 255); }

.btn-outline-secondary { color: rgb(134, 142, 150); background-color: trans=
parent; background-image: none; border-color: rgb(134, 142, 150); }

.btn-outline-secondary:hover { color: rgb(255, 255, 255); background-color:=
 rgb(134, 142, 150); border-color: rgb(134, 142, 150); }

.btn-outline-secondary.focus, .btn-outline-secondary:focus { box-shadow: rg=
ba(134, 142, 150, 0.5) 0px 0px 0px 3px; }

.btn-outline-secondary.disabled, .btn-outline-secondary:disabled { color: r=
gb(134, 142, 150); background-color: transparent; }

.btn-outline-secondary.active, .btn-outline-secondary:active, .show > .btn-=
outline-secondary.dropdown-toggle { color: rgb(255, 255, 255); background-c=
olor: rgb(134, 142, 150); border-color: rgb(134, 142, 150); }

.btn-outline-success { color: rgb(40, 167, 69); background-color: transpare=
nt; background-image: none; border-color: rgb(40, 167, 69); }

.btn-outline-success:hover { color: rgb(255, 255, 255); background-color: r=
gb(40, 167, 69); border-color: rgb(40, 167, 69); }

.btn-outline-success.focus, .btn-outline-success:focus { box-shadow: rgba(4=
0, 167, 69, 0.5) 0px 0px 0px 3px; }

.btn-outline-success.disabled, .btn-outline-success:disabled { color: rgb(4=
0, 167, 69); background-color: transparent; }

.btn-outline-success.active, .btn-outline-success:active, .show > .btn-outl=
ine-success.dropdown-toggle { color: rgb(255, 255, 255); background-color: =
rgb(40, 167, 69); border-color: rgb(40, 167, 69); }

.btn-outline-info { color: rgb(23, 162, 184); background-color: transparent=
; background-image: none; border-color: rgb(23, 162, 184); }

.btn-outline-info:hover { color: rgb(255, 255, 255); background-color: rgb(=
23, 162, 184); border-color: rgb(23, 162, 184); }

.btn-outline-info.focus, .btn-outline-info:focus { box-shadow: rgba(23, 162=
, 184, 0.5) 0px 0px 0px 3px; }

.btn-outline-info.disabled, .btn-outline-info:disabled { color: rgb(23, 162=
, 184); background-color: transparent; }

.btn-outline-info.active, .btn-outline-info:active, .show > .btn-outline-in=
fo.dropdown-toggle { color: rgb(255, 255, 255); background-color: rgb(23, 1=
62, 184); border-color: rgb(23, 162, 184); }

.btn-outline-warning { color: rgb(255, 193, 7); background-color: transpare=
nt; background-image: none; border-color: rgb(255, 193, 7); }

.btn-outline-warning:hover { color: rgb(255, 255, 255); background-color: r=
gb(255, 193, 7); border-color: rgb(255, 193, 7); }

.btn-outline-warning.focus, .btn-outline-warning:focus { box-shadow: rgba(2=
55, 193, 7, 0.5) 0px 0px 0px 3px; }

.btn-outline-warning.disabled, .btn-outline-warning:disabled { color: rgb(2=
55, 193, 7); background-color: transparent; }

.btn-outline-warning.active, .btn-outline-warning:active, .show > .btn-outl=
ine-warning.dropdown-toggle { color: rgb(255, 255, 255); background-color: =
rgb(255, 193, 7); border-color: rgb(255, 193, 7); }

.btn-outline-danger { color: rgb(220, 53, 69); background-color: transparen=
t; background-image: none; border-color: rgb(220, 53, 69); }

.btn-outline-danger:hover { color: rgb(255, 255, 255); background-color: rg=
b(220, 53, 69); border-color: rgb(220, 53, 69); }

.btn-outline-danger.focus, .btn-outline-danger:focus { box-shadow: rgba(220=
, 53, 69, 0.5) 0px 0px 0px 3px; }

.btn-outline-danger.disabled, .btn-outline-danger:disabled { color: rgb(220=
, 53, 69); background-color: transparent; }

.btn-outline-danger.active, .btn-outline-danger:active, .show > .btn-outlin=
e-danger.dropdown-toggle { color: rgb(255, 255, 255); background-color: rgb=
(220, 53, 69); border-color: rgb(220, 53, 69); }

.btn-outline-light { color: rgb(248, 249, 250); background-color: transpare=
nt; background-image: none; border-color: rgb(248, 249, 250); }

.btn-outline-light:hover { color: rgb(255, 255, 255); background-color: rgb=
(248, 249, 250); border-color: rgb(248, 249, 250); }

.btn-outline-light.focus, .btn-outline-light:focus { box-shadow: rgba(248, =
249, 250, 0.5) 0px 0px 0px 3px; }

.btn-outline-light.disabled, .btn-outline-light:disabled { color: rgb(248, =
249, 250); background-color: transparent; }

.btn-outline-light.active, .btn-outline-light:active, .show > .btn-outline-=
light.dropdown-toggle { color: rgb(255, 255, 255); background-color: rgb(24=
8, 249, 250); border-color: rgb(248, 249, 250); }

.btn-outline-dark { color: rgb(52, 58, 64); background-color: transparent; =
background-image: none; border-color: rgb(52, 58, 64); }

.btn-outline-dark:hover { color: rgb(255, 255, 255); background-color: rgb(=
52, 58, 64); border-color: rgb(52, 58, 64); }

.btn-outline-dark.focus, .btn-outline-dark:focus { box-shadow: rgba(52, 58,=
 64, 0.5) 0px 0px 0px 3px; }

.btn-outline-dark.disabled, .btn-outline-dark:disabled { color: rgb(52, 58,=
 64); background-color: transparent; }

.btn-outline-dark.active, .btn-outline-dark:active, .show > .btn-outline-da=
rk.dropdown-toggle { color: rgb(255, 255, 255); background-color: rgb(52, 5=
8, 64); border-color: rgb(52, 58, 64); }

.btn-link { font-weight: 400; color: rgb(0, 123, 255); border-radius: 0px; =
}

.btn-link, .btn-link.active, .btn-link:active, .btn-link:disabled { backgro=
und-color: transparent; }

.btn-link, .btn-link:active, .btn-link:focus { border-color: transparent; b=
ox-shadow: none; }

.btn-link:hover { border-color: transparent; }

.btn-link:focus, .btn-link:hover { color: rgb(0, 86, 179); text-decoration:=
 underline; background-color: transparent; }

.btn-link:disabled { color: rgb(134, 142, 150); }

.btn-link:disabled:focus, .btn-link:disabled:hover { text-decoration: none;=
 }

.btn-group-lg > .btn, .btn-lg { padding: 0.5rem 1rem; font-size: 1.25rem; l=
ine-height: 1.5; border-radius: 0.3rem; }

.btn-group-sm > .btn, .btn-sm { padding: 0.25rem 0.5rem; font-size: 0.875re=
m; line-height: 1.5; border-radius: 0.2rem; }

.btn-block { display: block; width: 100%; }

.btn-block + .btn-block { margin-top: 0.5rem; }

input[type=3D"button"].btn-block, input[type=3D"reset"].btn-block, input[ty=
pe=3D"submit"].btn-block { width: 100%; }

.fade { opacity: 0; transition: opacity 0.15s linear 0s; }

.fade.show { opacity: 1; }

.collapse { display: none; }

.collapse.show { display: block; }

tr.collapse.show { display: table-row; }

tbody.collapse.show { display: table-row-group; }

.collapsing { position: relative; height: 0px; overflow: hidden; transition=
: height 0.35s ease 0s; }

.dropdown, .dropup { position: relative; }

.dropdown-toggle::after { display: inline-block; width: 0px; height: 0px; m=
argin-left: 0.255em; vertical-align: 0.255em; content: ""; border-top: 0.3e=
m solid; border-right: 0.3em solid transparent; border-left: 0.3em solid tr=
ansparent; }

.dropdown-toggle:empty::after { margin-left: 0px; }

.dropup .dropdown-menu { margin-top: 0px; margin-bottom: 0.125rem; }

.dropup .dropdown-toggle::after { border-top: 0px; border-bottom: 0.3em sol=
id; }

.dropdown-menu { position: absolute; top: 100%; left: 0px; z-index: 1000; d=
isplay: none; float: left; min-width: 10rem; padding: 0.5rem 0px; margin: 0=
.125rem 0px 0px; font-size: 1rem; color: rgb(33, 37, 41); text-align: left;=
 list-style: none; background-color: rgb(255, 255, 255); background-clip: p=
adding-box; border: 1px solid rgba(0, 0, 0, 0.15); border-radius: 0.25rem; =
}

.dropdown-divider { height: 0px; margin: 0.5rem 0px; overflow: hidden; bord=
er-top: 1px solid rgb(233, 236, 239); }

.dropdown-item { display: block; width: 100%; padding: 0.25rem 1.5rem; clea=
r: both; font-weight: 400; color: rgb(33, 37, 41); text-align: inherit; whi=
te-space: nowrap; background: 0px 0px; border: 0px; }

.dropdown-item:focus, .dropdown-item:hover { color: rgb(22, 24, 27); text-d=
ecoration: none; background-color: rgb(248, 249, 250); }

.dropdown-item.active, .dropdown-item:active { color: rgb(255, 255, 255); t=
ext-decoration: none; background-color: rgb(0, 123, 255); }

.dropdown-item.disabled, .dropdown-item:disabled { color: rgb(134, 142, 150=
); background-color: transparent; }

.show > a { outline: 0px; }

.dropdown-menu.show { display: block; }

.dropdown-header { display: block; padding: 0.5rem 1.5rem; margin-bottom: 0=
px; font-size: 0.875rem; color: rgb(134, 142, 150); white-space: nowrap; }

.btn-group, .btn-group-vertical { position: relative; display: inline-flex;=
 vertical-align: middle; }

.btn-group-vertical > .btn, .btn-group > .btn { position: relative; flex: 0=
 1 auto; margin-bottom: 0px; }

.btn-group-vertical > .btn:hover, .btn-group > .btn:hover { z-index: 2; }

.btn-group-vertical > .btn.active, .btn-group-vertical > .btn:active, .btn-=
group-vertical > .btn:focus, .btn-group > .btn.active, .btn-group > .btn:ac=
tive, .btn-group > .btn:focus { z-index: 2; }

.btn-group .btn + .btn, .btn-group .btn + .btn-group, .btn-group .btn-group=
 + .btn, .btn-group .btn-group + .btn-group, .btn-group-vertical .btn + .bt=
n, .btn-group-vertical .btn + .btn-group, .btn-group-vertical .btn-group + =
.btn, .btn-group-vertical .btn-group + .btn-group { margin-left: -1px; }

.btn-toolbar { display: flex; flex-wrap: wrap; justify-content: flex-start;=
 }

.btn-toolbar .input-group { width: auto; }

.btn-group > .btn:not(:first-child):not(:last-child):not(.dropdown-toggle) =
{ border-radius: 0px; }

.btn-group > .btn:first-child { margin-left: 0px; }

.btn-group > .btn:first-child:not(:last-child):not(.dropdown-toggle) { bord=
er-top-right-radius: 0px; border-bottom-right-radius: 0px; }

.btn-group > .btn:last-child:not(:first-child), .btn-group > .dropdown-togg=
le:not(:first-child) { border-top-left-radius: 0px; border-bottom-left-radi=
us: 0px; }

.btn-group > .btn-group { float: left; }

.btn-group > .btn-group:not(:first-child):not(:last-child) > .btn { border-=
radius: 0px; }

.btn-group > .btn-group:first-child:not(:last-child) > .btn:last-child, .bt=
n-group > .btn-group:first-child:not(:last-child) > .dropdown-toggle { bord=
er-top-right-radius: 0px; border-bottom-right-radius: 0px; }

.btn-group > .btn-group:last-child:not(:first-child) > .btn:first-child { b=
order-top-left-radius: 0px; border-bottom-left-radius: 0px; }

.btn + .dropdown-toggle-split { padding-right: 0.5625rem; padding-left: 0.5=
625rem; }

.btn + .dropdown-toggle-split::after { margin-left: 0px; }

.btn-group-sm > .btn + .dropdown-toggle-split, .btn-sm + .dropdown-toggle-s=
plit { padding-right: 0.375rem; padding-left: 0.375rem; }

.btn-group-lg > .btn + .dropdown-toggle-split, .btn-lg + .dropdown-toggle-s=
plit { padding-right: 0.75rem; padding-left: 0.75rem; }

.btn-group-vertical { display: inline-flex; flex-direction: column; align-i=
tems: flex-start; justify-content: center; }

.btn-group-vertical .btn, .btn-group-vertical .btn-group { width: 100%; }

.btn-group-vertical > .btn + .btn, .btn-group-vertical > .btn + .btn-group,=
 .btn-group-vertical > .btn-group + .btn, .btn-group-vertical > .btn-group =
+ .btn-group { margin-top: -1px; margin-left: 0px; }

.btn-group-vertical > .btn:not(:first-child):not(:last-child) { border-radi=
us: 0px; }

.btn-group-vertical > .btn:first-child:not(:last-child) { border-bottom-rig=
ht-radius: 0px; border-bottom-left-radius: 0px; }

.btn-group-vertical > .btn:last-child:not(:first-child) { border-top-left-r=
adius: 0px; border-top-right-radius: 0px; }

.btn-group-vertical > .btn-group:not(:first-child):not(:last-child) > .btn =
{ border-radius: 0px; }

.btn-group-vertical > .btn-group:first-child:not(:last-child) > .btn:last-c=
hild, .btn-group-vertical > .btn-group:first-child:not(:last-child) > .drop=
down-toggle { border-bottom-right-radius: 0px; border-bottom-left-radius: 0=
px; }

.btn-group-vertical > .btn-group:last-child:not(:first-child) > .btn:first-=
child { border-top-left-radius: 0px; border-top-right-radius: 0px; }

[data-toggle=3D"buttons"] > .btn input[type=3D"checkbox"], [data-toggle=3D"=
buttons"] > .btn input[type=3D"radio"], [data-toggle=3D"buttons"] > .btn-gr=
oup > .btn input[type=3D"checkbox"], [data-toggle=3D"buttons"] > .btn-group=
 > .btn input[type=3D"radio"] { position: absolute; clip: rect(0px, 0px, 0p=
x, 0px); pointer-events: none; }

.input-group { position: relative; display: flex; width: 100%; }

.input-group .form-control { position: relative; z-index: 2; flex: 1 1 auto=
; width: 1%; margin-bottom: 0px; }

.input-group .form-control:active, .input-group .form-control:focus, .input=
-group .form-control:hover { z-index: 3; }

.input-group .form-control, .input-group-addon, .input-group-btn { display:=
 flex; align-items: center; }

.input-group .form-control:not(:first-child):not(:last-child), .input-group=
-addon:not(:first-child):not(:last-child), .input-group-btn:not(:first-chil=
d):not(:last-child) { border-radius: 0px; }

.input-group-addon, .input-group-btn { white-space: nowrap; vertical-align:=
 middle; }

.input-group-addon { padding: 0.5rem 0.75rem; margin-bottom: 0px; font-size=
: 1rem; font-weight: 400; line-height: 1.25; color: rgb(73, 80, 87); text-a=
lign: center; background-color: rgb(233, 236, 239); border: 1px solid rgba(=
0, 0, 0, 0.15); border-radius: 0.25rem; }

.input-group-addon.form-control-sm, .input-group-sm > .input-group-addon, .=
input-group-sm > .input-group-btn > .input-group-addon.btn { padding: 0.25r=
em 0.5rem; font-size: 0.875rem; border-radius: 0.2rem; }

.input-group-addon.form-control-lg, .input-group-lg > .input-group-addon, .=
input-group-lg > .input-group-btn > .input-group-addon.btn { padding: 0.5re=
m 1rem; font-size: 1.25rem; border-radius: 0.3rem; }

.input-group-addon input[type=3D"checkbox"], .input-group-addon input[type=
=3D"radio"] { margin-top: 0px; }

.input-group .form-control:not(:last-child), .input-group-addon:not(:last-c=
hild), .input-group-btn:not(:first-child) > .btn-group:not(:last-child) > .=
btn, .input-group-btn:not(:first-child) > .btn:not(:last-child):not(.dropdo=
wn-toggle), .input-group-btn:not(:last-child) > .btn, .input-group-btn:not(=
:last-child) > .btn-group > .btn, .input-group-btn:not(:last-child) > .drop=
down-toggle { border-top-right-radius: 0px; border-bottom-right-radius: 0px=
; }

.input-group-addon:not(:last-child) { border-right: 0px; }

.input-group .form-control:not(:first-child), .input-group-addon:not(:first=
-child), .input-group-btn:not(:first-child) > .btn, .input-group-btn:not(:f=
irst-child) > .btn-group > .btn, .input-group-btn:not(:first-child) > .drop=
down-toggle, .input-group-btn:not(:last-child) > .btn-group:not(:first-chil=
d) > .btn, .input-group-btn:not(:last-child) > .btn:not(:first-child) { bor=
der-top-left-radius: 0px; border-bottom-left-radius: 0px; }

.form-control + .input-group-addon:not(:first-child) { border-left: 0px; }

.input-group-btn { position: relative; font-size: 0px; white-space: nowrap;=
 }

.input-group-btn > .btn { position: relative; }

.input-group-btn > .btn + .btn { margin-left: -1px; }

.input-group-btn > .btn:active, .input-group-btn > .btn:focus, .input-group=
-btn > .btn:hover { z-index: 3; }

.input-group-btn:not(:last-child) > .btn, .input-group-btn:not(:last-child)=
 > .btn-group { margin-right: -1px; }

.input-group-btn:not(:first-child) > .btn, .input-group-btn:not(:first-chil=
d) > .btn-group { z-index: 2; margin-left: -1px; }

.input-group-btn:not(:first-child) > .btn-group:active, .input-group-btn:no=
t(:first-child) > .btn-group:focus, .input-group-btn:not(:first-child) > .b=
tn-group:hover, .input-group-btn:not(:first-child) > .btn:active, .input-gr=
oup-btn:not(:first-child) > .btn:focus, .input-group-btn:not(:first-child) =
> .btn:hover { z-index: 3; }

.custom-control { position: relative; display: inline-flex; min-height: 1.5=
rem; padding-left: 1.5rem; margin-right: 1rem; }

.custom-control-input { position: absolute; z-index: -1; opacity: 0; }

.custom-control-input:checked ~ .custom-control-indicator { color: rgb(255,=
 255, 255); background-color: rgb(0, 123, 255); }

.custom-control-input:focus ~ .custom-control-indicator { box-shadow: rgb(2=
55, 255, 255) 0px 0px 0px 1px, rgb(0, 123, 255) 0px 0px 0px 3px; }

.custom-control-input:active ~ .custom-control-indicator { color: rgb(255, =
255, 255); background-color: rgb(179, 215, 255); }

.custom-control-input:disabled ~ .custom-control-indicator { background-col=
or: rgb(233, 236, 239); }

.custom-control-input:disabled ~ .custom-control-description { color: rgb(1=
34, 142, 150); }

.custom-control-indicator { position: absolute; top: 0.25rem; left: 0px; di=
splay: block; width: 1rem; height: 1rem; pointer-events: none; user-select:=
 none; background-color: rgb(221, 221, 221); background-repeat: no-repeat; =
background-position: center center; background-size: 50% 50%; }

.custom-checkbox .custom-control-indicator { border-radius: 0.25rem; }

.custom-checkbox .custom-control-input:checked ~ .custom-control-indicator =
{ background-image: url("data:image/svg+xml;charset=3Dutf8,%3Csvg xmlns=3D'=
http://www.w3.org/2000/svg' viewBox=3D'0 0 8 8'%3E%3Cpath fill=3D'%23fff' d=
=3D'M6.564.75l-3.59 3.612-1.538-1.55L0 4.26 2.974 7.25 8 2.193z'/%3E%3C/svg=
%3E"); }

.custom-checkbox .custom-control-input:indeterminate ~ .custom-control-indi=
cator { background-color: rgb(0, 123, 255); background-image: url("data:ima=
ge/svg+xml;charset=3Dutf8,%3Csvg xmlns=3D'http://www.w3.org/2000/svg' viewB=
ox=3D'0 0 4 4'%3E%3Cpath stroke=3D'%23fff' d=3D'M0 2h4'/%3E%3C/svg%3E"); }

.custom-radio .custom-control-indicator { border-radius: 50%; }

.custom-radio .custom-control-input:checked ~ .custom-control-indicator { b=
ackground-image: url("data:image/svg+xml;charset=3Dutf8,%3Csvg xmlns=3D'htt=
p://www.w3.org/2000/svg' viewBox=3D'-4 -4 8 8'%3E%3Ccircle r=3D'3' fill=3D'=
%23fff'/%3E%3C/svg%3E"); }

.custom-controls-stacked { display: flex; flex-direction: column; }

.custom-controls-stacked .custom-control { margin-bottom: 0.25rem; }

.custom-controls-stacked .custom-control + .custom-control { margin-left: 0=
px; }

.custom-select { display: inline-block; max-width: 100%; height: calc(2.25r=
em + 2px); padding: 0.375rem 1.75rem 0.375rem 0.75rem; line-height: 1.25; c=
olor: rgb(73, 80, 87); vertical-align: middle; background: url("data:image/=
svg+xml;charset=3Dutf8,%3Csvg xmlns=3D'http://www.w3.org/2000/svg' viewBox=
=3D'0 0 4 5'%3E%3Cpath fill=3D'%23333' d=3D'M2 0L0 2h4zm0 5L0 3h4z'/%3E%3C/=
svg%3E") right 0.75rem center / 8px 10px no-repeat rgb(255, 255, 255); bord=
er: 1px solid rgba(0, 0, 0, 0.15); border-radius: 0.25rem; appearance: none=
; }

.custom-select:focus { border-color: rgb(128, 189, 255); outline: 0px; }

.custom-select:disabled { color: rgb(134, 142, 150); background-color: rgb(=
233, 236, 239); }

.custom-select-sm { height: calc(1.8125rem + 2px); padding-top: 0.375rem; p=
adding-bottom: 0.375rem; font-size: 75%; }

.custom-file { position: relative; display: inline-block; max-width: 100%; =
height: 2.5rem; margin-bottom: 0px; }

.custom-file-input { min-width: 14rem; max-width: 100%; height: 2.5rem; mar=
gin: 0px; opacity: 0; }

.custom-file-control { position: absolute; top: 0px; right: 0px; left: 0px;=
 z-index: 5; height: 2.5rem; padding: 0.5rem 1rem; line-height: 1.5; color:=
 rgb(73, 80, 87); pointer-events: none; user-select: none; background-color=
: rgb(255, 255, 255); border: 1px solid rgba(0, 0, 0, 0.15); border-radius:=
 0.25rem; }

.custom-file-control:lang(en):empty::after { content: "Choose file..."; }

.custom-file-control::before { position: absolute; top: -1px; right: -1px; =
bottom: -1px; z-index: 6; display: block; height: 2.5rem; padding: 0.5rem 1=
rem; line-height: 1.5; color: rgb(73, 80, 87); background-color: rgb(233, 2=
36, 239); border: 1px solid rgba(0, 0, 0, 0.15); border-radius: 0px 0.25rem=
 0.25rem 0px; }

.custom-file-control:lang(en)::before { content: "Browse"; }

.nav { display: flex; flex-wrap: wrap; padding-left: 0px; margin-bottom: 0p=
x; list-style: none; }

.nav-link { display: block; padding: 0.5rem 1rem; }

.nav-link:focus, .nav-link:hover { text-decoration: none; }

.nav-link.disabled { color: rgb(134, 142, 150); }

.nav-tabs { border-bottom: 1px solid rgb(221, 221, 221); }

.nav-tabs .nav-item { margin-bottom: -1px; }

.nav-tabs .nav-link { border: 1px solid transparent; border-top-left-radius=
: 0.25rem; border-top-right-radius: 0.25rem; }

.nav-tabs .nav-link:focus, .nav-tabs .nav-link:hover { border-color: rgb(23=
3, 236, 239) rgb(233, 236, 239) rgb(221, 221, 221); }

.nav-tabs .nav-link.disabled { color: rgb(134, 142, 150); background-color:=
 transparent; border-color: transparent; }

.nav-tabs .nav-item.show .nav-link, .nav-tabs .nav-link.active { color: rgb=
(73, 80, 87); background-color: rgb(255, 255, 255); border-color: rgb(221, =
221, 221) rgb(221, 221, 221) rgb(255, 255, 255); }

.nav-tabs .dropdown-menu { margin-top: -1px; border-top-left-radius: 0px; b=
order-top-right-radius: 0px; }

.nav-pills .nav-link { border-radius: 0.25rem; }

.nav-pills .nav-link.active, .show > .nav-pills .nav-link { color: rgb(255,=
 255, 255); background-color: rgb(0, 123, 255); }

.nav-fill .nav-item { flex: 1 1 auto; text-align: center; }

.nav-justified .nav-item { flex-basis: 0px; flex-grow: 1; text-align: cente=
r; }

.tab-content > .tab-pane { display: none; }

.tab-content > .active { display: block; }

.navbar { position: relative; display: flex; flex-wrap: wrap; align-items: =
center; justify-content: space-between; padding: 0.5rem 1rem; }

.navbar > .container, .navbar > .container-fluid { display: flex; flex-wrap=
: wrap; align-items: center; justify-content: space-between; }

.navbar-brand { display: inline-block; padding-top: 0.3125rem; padding-bott=
om: 0.3125rem; margin-right: 1rem; font-size: 1.25rem; line-height: inherit=
; white-space: nowrap; }

.navbar-brand:focus, .navbar-brand:hover { text-decoration: none; }

.navbar-nav { display: flex; flex-direction: column; padding-left: 0px; mar=
gin-bottom: 0px; list-style: none; }

.navbar-nav .nav-link { padding-right: 0px; padding-left: 0px; }

.navbar-nav .dropdown-menu { position: static; float: none; }

.navbar-text { display: inline-block; padding-top: 0.5rem; padding-bottom: =
0.5rem; }

.navbar-collapse { flex-basis: 100%; align-items: center; }

.navbar-toggler { padding: 0.25rem 0.75rem; font-size: 1.25rem; line-height=
: 1; background: 0px 0px; border: 1px solid transparent; border-radius: 0.2=
5rem; }

.navbar-toggler:focus, .navbar-toggler:hover { text-decoration: none; }

.navbar-toggler-icon { display: inline-block; width: 1.5em; height: 1.5em; =
vertical-align: middle; content: ""; background: center center / 100% 100% =
no-repeat; }

@media (max-width: 575px) {
  .navbar-expand-sm > .container, .navbar-expand-sm > .container-fluid { pa=
dding-right: 0px; padding-left: 0px; }
}

@media (min-width: 576px) {
  .navbar-expand-sm { flex-flow: row nowrap; justify-content: flex-start; }
  .navbar-expand-sm .navbar-nav { flex-direction: row; }
  .navbar-expand-sm .navbar-nav .dropdown-menu { position: absolute; }
  .navbar-expand-sm .navbar-nav .dropdown-menu-right { right: 0px; left: au=
to; }
  .navbar-expand-sm .navbar-nav .nav-link { padding-right: 0.5rem; padding-=
left: 0.5rem; }
  .navbar-expand-sm > .container, .navbar-expand-sm > .container-fluid { fl=
ex-wrap: nowrap; }
  .navbar-expand-sm .navbar-collapse { display: flex !important; }
  .navbar-expand-sm .navbar-toggler { display: none; }
}

@media (max-width: 767px) {
  .navbar-expand-md > .container, .navbar-expand-md > .container-fluid { pa=
dding-right: 0px; padding-left: 0px; }
}

@media (min-width: 768px) {
  .navbar-expand-md { flex-flow: row nowrap; justify-content: flex-start; }
  .navbar-expand-md .navbar-nav { flex-direction: row; }
  .navbar-expand-md .navbar-nav .dropdown-menu { position: absolute; }
  .navbar-expand-md .navbar-nav .dropdown-menu-right { right: 0px; left: au=
to; }
  .navbar-expand-md .navbar-nav .nav-link { padding-right: 0.5rem; padding-=
left: 0.5rem; }
  .navbar-expand-md > .container, .navbar-expand-md > .container-fluid { fl=
ex-wrap: nowrap; }
  .navbar-expand-md .navbar-collapse { display: flex !important; }
  .navbar-expand-md .navbar-toggler { display: none; }
}

@media (max-width: 991px) {
  .navbar-expand-lg > .container, .navbar-expand-lg > .container-fluid { pa=
dding-right: 0px; padding-left: 0px; }
}

@media (min-width: 992px) {
  .navbar-expand-lg { flex-flow: row nowrap; justify-content: flex-start; }
  .navbar-expand-lg .navbar-nav { flex-direction: row; }
  .navbar-expand-lg .navbar-nav .dropdown-menu { position: absolute; }
  .navbar-expand-lg .navbar-nav .dropdown-menu-right { right: 0px; left: au=
to; }
  .navbar-expand-lg .navbar-nav .nav-link { padding-right: 0.5rem; padding-=
left: 0.5rem; }
  .navbar-expand-lg > .container, .navbar-expand-lg > .container-fluid { fl=
ex-wrap: nowrap; }
  .navbar-expand-lg .navbar-collapse { display: flex !important; }
  .navbar-expand-lg .navbar-toggler { display: none; }
}

@media (max-width: 1199px) {
  .navbar-expand-xl > .container, .navbar-expand-xl > .container-fluid { pa=
dding-right: 0px; padding-left: 0px; }
}

@media (min-width: 1200px) {
  .navbar-expand-xl { flex-flow: row nowrap; justify-content: flex-start; }
  .navbar-expand-xl .navbar-nav { flex-direction: row; }
  .navbar-expand-xl .navbar-nav .dropdown-menu { position: absolute; }
  .navbar-expand-xl .navbar-nav .dropdown-menu-right { right: 0px; left: au=
to; }
  .navbar-expand-xl .navbar-nav .nav-link { padding-right: 0.5rem; padding-=
left: 0.5rem; }
  .navbar-expand-xl > .container, .navbar-expand-xl > .container-fluid { fl=
ex-wrap: nowrap; }
  .navbar-expand-xl .navbar-collapse { display: flex !important; }
  .navbar-expand-xl .navbar-toggler { display: none; }
}

.navbar-expand { flex-flow: row nowrap; justify-content: flex-start; }

.navbar-expand > .container, .navbar-expand > .container-fluid { padding-ri=
ght: 0px; padding-left: 0px; }

.navbar-expand .navbar-nav { flex-direction: row; }

.navbar-expand .navbar-nav .dropdown-menu { position: absolute; }

.navbar-expand .navbar-nav .dropdown-menu-right { right: 0px; left: auto; }

.navbar-expand .navbar-nav .nav-link { padding-right: 0.5rem; padding-left:=
 0.5rem; }

.navbar-expand > .container, .navbar-expand > .container-fluid { flex-wrap:=
 nowrap; }

.navbar-expand .navbar-collapse { display: flex !important; }

.navbar-expand .navbar-toggler { display: none; }

.navbar-light .navbar-brand { color: rgba(0, 0, 0, 0.9); }

.navbar-light .navbar-brand:focus, .navbar-light .navbar-brand:hover { colo=
r: rgba(0, 0, 0, 0.9); }

.navbar-light .navbar-nav .nav-link { color: rgba(0, 0, 0, 0.5); }

.navbar-light .navbar-nav .nav-link:focus, .navbar-light .navbar-nav .nav-l=
ink:hover { color: rgba(0, 0, 0, 0.7); }

.navbar-light .navbar-nav .nav-link.disabled { color: rgba(0, 0, 0, 0.3); }

.navbar-light .navbar-nav .active > .nav-link, .navbar-light .navbar-nav .n=
av-link.active, .navbar-light .navbar-nav .nav-link.show, .navbar-light .na=
vbar-nav .show > .nav-link { color: rgba(0, 0, 0, 0.9); }

.navbar-light .navbar-toggler { color: rgba(0, 0, 0, 0.5); border-color: rg=
ba(0, 0, 0, 0.1); }

.navbar-light .navbar-toggler-icon { background-image: url("data:image/svg+=
xml;charset=3Dutf8,%3Csvg viewBox=3D'0 0 30 30' xmlns=3D'http://www.w3.org/=
2000/svg'%3E%3Cpath stroke=3D'rgba(0, 0, 0, 0.5)' stroke-width=3D'2' stroke=
-linecap=3D'round' stroke-miterlimit=3D'10' d=3D'M4 7h22M4 15h22M4 23h22'/%=
3E%3C/svg%3E"); }

.navbar-light .navbar-text { color: rgba(0, 0, 0, 0.5); }

.navbar-dark .navbar-brand { color: rgb(255, 255, 255); }

.navbar-dark .navbar-brand:focus, .navbar-dark .navbar-brand:hover { color:=
 rgb(255, 255, 255); }

.navbar-dark .navbar-nav .nav-link { color: rgba(255, 255, 255, 0.5); }

.navbar-dark .navbar-nav .nav-link:focus, .navbar-dark .navbar-nav .nav-lin=
k:hover { color: rgba(255, 255, 255, 0.75); }

.navbar-dark .navbar-nav .nav-link.disabled { color: rgba(255, 255, 255, 0.=
25); }

.navbar-dark .navbar-nav .active > .nav-link, .navbar-dark .navbar-nav .nav=
-link.active, .navbar-dark .navbar-nav .nav-link.show, .navbar-dark .navbar=
-nav .show > .nav-link { color: rgb(255, 255, 255); }

.navbar-dark .navbar-toggler { color: rgba(255, 255, 255, 0.5); border-colo=
r: rgba(255, 255, 255, 0.1); }

.navbar-dark .navbar-toggler-icon { background-image: url("data:image/svg+x=
ml;charset=3Dutf8,%3Csvg viewBox=3D'0 0 30 30' xmlns=3D'http://www.w3.org/2=
000/svg'%3E%3Cpath stroke=3D'rgba(255, 255, 255, 0.5)' stroke-width=3D'2' s=
troke-linecap=3D'round' stroke-miterlimit=3D'10' d=3D'M4 7h22M4 15h22M4 23h=
22'/%3E%3C/svg%3E"); }

.navbar-dark .navbar-text { color: rgba(255, 255, 255, 0.5); }

.card { position: relative; display: flex; flex-direction: column; min-widt=
h: 0px; overflow-wrap: break-word; background-color: rgb(255, 255, 255); ba=
ckground-clip: border-box; border: 1px solid rgba(0, 0, 0, 0.125); border-r=
adius: 0.25rem; }

.card-body { flex: 1 1 auto; padding: 1.25rem; }

.card-title { margin-bottom: 0.75rem; }

.card-subtitle { margin-top: -0.375rem; margin-bottom: 0px; }

.card-text:last-child { margin-bottom: 0px; }

.card-link:hover { text-decoration: none; }

.card-link + .card-link { margin-left: 1.25rem; }

.card > .list-group:first-child .list-group-item:first-child { border-top-l=
eft-radius: 0.25rem; border-top-right-radius: 0.25rem; }

.card > .list-group:last-child .list-group-item:last-child { border-bottom-=
right-radius: 0.25rem; border-bottom-left-radius: 0.25rem; }

.card-header { padding: 0.75rem 1.25rem; margin-bottom: 0px; background-col=
or: rgba(0, 0, 0, 0.03); border-bottom: 1px solid rgba(0, 0, 0, 0.125); }

.card-header:first-child { border-radius: calc(0.25rem - 1px) calc(0.25rem =
- 1px) 0px 0px; }

.card-footer { padding: 0.75rem 1.25rem; background-color: rgba(0, 0, 0, 0.=
03); border-top: 1px solid rgba(0, 0, 0, 0.125); }

.card-footer:last-child { border-radius: 0px 0px calc(0.25rem - 1px) calc(0=
.25rem - 1px); }

.card-header-tabs { margin-right: -0.625rem; margin-bottom: -0.75rem; margi=
n-left: -0.625rem; border-bottom: 0px; }

.card-header-pills { margin-right: -0.625rem; margin-left: -0.625rem; }

.card-img-overlay { position: absolute; inset: 0px; padding: 1.25rem; }

.card-img { width: 100%; border-radius: calc(0.25rem - 1px); }

.card-img-top { width: 100%; border-top-left-radius: calc(0.25rem - 1px); b=
order-top-right-radius: calc(0.25rem - 1px); }

.card-img-bottom { width: 100%; border-bottom-right-radius: calc(0.25rem - =
1px); border-bottom-left-radius: calc(0.25rem - 1px); }

@media (min-width: 576px) {
  .card-deck { display: flex; flex-flow: row wrap; margin-right: -15px; mar=
gin-left: -15px; }
  .card-deck .card { display: flex; flex: 1 0 0%; flex-direction: column; m=
argin-right: 15px; margin-left: 15px; }
}

@media (min-width: 576px) {
  .card-group { display: flex; flex-flow: row wrap; }
  .card-group .card { flex: 1 0 0%; }
  .card-group .card + .card { margin-left: 0px; border-left: 0px; }
  .card-group .card:first-child { border-top-right-radius: 0px; border-bott=
om-right-radius: 0px; }
  .card-group .card:first-child .card-img-top { border-top-right-radius: 0p=
x; }
  .card-group .card:first-child .card-img-bottom { border-bottom-right-radi=
us: 0px; }
  .card-group .card:last-child { border-top-left-radius: 0px; border-bottom=
-left-radius: 0px; }
  .card-group .card:last-child .card-img-top { border-top-left-radius: 0px;=
 }
  .card-group .card:last-child .card-img-bottom { border-bottom-left-radius=
: 0px; }
  .card-group .card:not(:first-child):not(:last-child) { border-radius: 0px=
; }
  .card-group .card:not(:first-child):not(:last-child) .card-img-bottom, .c=
ard-group .card:not(:first-child):not(:last-child) .card-img-top { border-r=
adius: 0px; }
}

.card-columns .card { margin-bottom: 0.75rem; }

@media (min-width: 576px) {
  .card-columns { column-count: 3; column-gap: 1.25rem; }
  .card-columns .card { display: inline-block; width: 100%; }
}

.breadcrumb { padding: 0.75rem 1rem; margin-bottom: 1rem; list-style: none;=
 background-color: rgb(233, 236, 239); border-radius: 0.25rem; }

.breadcrumb::after { display: block; clear: both; content: ""; }

.breadcrumb-item { float: left; }

.breadcrumb-item + .breadcrumb-item::before { display: inline-block; paddin=
g-right: 0.5rem; padding-left: 0.5rem; color: rgb(134, 142, 150); content: =
"/"; }

.breadcrumb-item + .breadcrumb-item:hover::before { text-decoration: underl=
ine; }

.breadcrumb-item + .breadcrumb-item:hover::before { text-decoration: none; =
}

.breadcrumb-item.active { color: rgb(134, 142, 150); }

.pagination { display: flex; padding-left: 0px; list-style: none; border-ra=
dius: 0.25rem; }

.page-item:first-child .page-link { margin-left: 0px; border-top-left-radiu=
s: 0.25rem; border-bottom-left-radius: 0.25rem; }

.page-item:last-child .page-link { border-top-right-radius: 0.25rem; border=
-bottom-right-radius: 0.25rem; }

.page-item.active .page-link { z-index: 2; color: rgb(255, 255, 255); backg=
round-color: rgb(0, 123, 255); border-color: rgb(0, 123, 255); }

.page-item.disabled .page-link { color: rgb(134, 142, 150); pointer-events:=
 none; background-color: rgb(255, 255, 255); border-color: rgb(221, 221, 22=
1); }

.page-link { position: relative; display: block; padding: 0.5rem 0.75rem; m=
argin-left: -1px; line-height: 1.25; color: rgb(0, 123, 255); background-co=
lor: rgb(255, 255, 255); border: 1px solid rgb(221, 221, 221); }

.page-link:focus, .page-link:hover { color: rgb(0, 86, 179); text-decoratio=
n: none; background-color: rgb(233, 236, 239); border-color: rgb(221, 221, =
221); }

.pagination-lg .page-link { padding: 0.75rem 1.5rem; font-size: 1.25rem; li=
ne-height: 1.5; }

.pagination-lg .page-item:first-child .page-link { border-top-left-radius: =
0.3rem; border-bottom-left-radius: 0.3rem; }

.pagination-lg .page-item:last-child .page-link { border-top-right-radius: =
0.3rem; border-bottom-right-radius: 0.3rem; }

.pagination-sm .page-link { padding: 0.25rem 0.5rem; font-size: 0.875rem; l=
ine-height: 1.5; }

.pagination-sm .page-item:first-child .page-link { border-top-left-radius: =
0.2rem; border-bottom-left-radius: 0.2rem; }

.pagination-sm .page-item:last-child .page-link { border-top-right-radius: =
0.2rem; border-bottom-right-radius: 0.2rem; }

.badge { display: inline-block; padding: 0.25em 0.4em; font-size: 75%; font=
-weight: 700; line-height: 1; color: rgb(255, 255, 255); text-align: center=
; white-space: nowrap; vertical-align: baseline; border-radius: 0.25rem; }

.badge:empty { display: none; }

.btn .badge { position: relative; top: -1px; }

.badge-pill { padding-right: 0.6em; padding-left: 0.6em; border-radius: 10r=
em; }

.badge-primary { color: rgb(255, 255, 255); background-color: rgb(0, 123, 2=
55); }

.badge-primary[href]:focus, .badge-primary[href]:hover { color: rgb(255, 25=
5, 255); text-decoration: none; background-color: rgb(0, 98, 204); }

.badge-secondary { color: rgb(255, 255, 255); background-color: rgb(134, 14=
2, 150); }

.badge-secondary[href]:focus, .badge-secondary[href]:hover { color: rgb(255=
, 255, 255); text-decoration: none; background-color: rgb(108, 117, 125); }

.badge-success { color: rgb(255, 255, 255); background-color: rgb(40, 167, =
69); }

.badge-success[href]:focus, .badge-success[href]:hover { color: rgb(255, 25=
5, 255); text-decoration: none; background-color: rgb(30, 126, 52); }

.badge-info { color: rgb(255, 255, 255); background-color: rgb(23, 162, 184=
); }

.badge-info[href]:focus, .badge-info[href]:hover { color: rgb(255, 255, 255=
); text-decoration: none; background-color: rgb(17, 122, 139); }

.badge-warning { color: rgb(17, 17, 17); background-color: rgb(255, 193, 7)=
; }

.badge-warning[href]:focus, .badge-warning[href]:hover { color: rgb(17, 17,=
 17); text-decoration: none; background-color: rgb(211, 158, 0); }

.badge-danger { color: rgb(255, 255, 255); background-color: rgb(220, 53, 6=
9); }

.badge-danger[href]:focus, .badge-danger[href]:hover { color: rgb(255, 255,=
 255); text-decoration: none; background-color: rgb(189, 33, 48); }

.badge-light { color: rgb(17, 17, 17); background-color: rgb(248, 249, 250)=
; }

.badge-light[href]:focus, .badge-light[href]:hover { color: rgb(17, 17, 17)=
; text-decoration: none; background-color: rgb(218, 224, 229); }

.badge-dark { color: rgb(255, 255, 255); background-color: rgb(52, 58, 64);=
 }

.badge-dark[href]:focus, .badge-dark[href]:hover { color: rgb(255, 255, 255=
); text-decoration: none; background-color: rgb(29, 33, 36); }

.jumbotron { padding: 2rem 1rem; margin-bottom: 2rem; background-color: rgb=
(233, 236, 239); border-radius: 0.3rem; }

@media (min-width: 576px) {
  .jumbotron { padding: 4rem 2rem; }
}

.jumbotron-fluid { padding-right: 0px; padding-left: 0px; border-radius: 0p=
x; }

.alert { padding: 0.75rem 1.25rem; margin-bottom: 1rem; border: 1px solid t=
ransparent; border-radius: 0.25rem; }

.alert-heading { color: inherit; }

.alert-link { font-weight: 700; }

.alert-dismissible .close { position: relative; top: -0.75rem; right: -1.25=
rem; padding: 0.75rem 1.25rem; color: inherit; }

.alert-primary { color: rgb(0, 64, 133); background-color: rgb(204, 229, 25=
5); border-color: rgb(184, 218, 255); }

.alert-primary hr { border-top-color: rgb(159, 205, 255); }

.alert-primary .alert-link { color: rgb(0, 39, 82); }

.alert-secondary { color: rgb(70, 74, 78); background-color: rgb(231, 232, =
234); border-color: rgb(221, 223, 226); }

.alert-secondary hr { border-top-color: rgb(207, 210, 214); }

.alert-secondary .alert-link { color: rgb(46, 49, 51); }

.alert-success { color: rgb(21, 87, 36); background-color: rgb(212, 237, 21=
8); border-color: rgb(195, 230, 203); }

.alert-success hr { border-top-color: rgb(177, 223, 187); }

.alert-success .alert-link { color: rgb(11, 46, 19); }

.alert-info { color: rgb(12, 84, 96); background-color: rgb(209, 236, 241);=
 border-color: rgb(190, 229, 235); }

.alert-info hr { border-top-color: rgb(171, 221, 229); }

.alert-info .alert-link { color: rgb(6, 44, 51); }

.alert-warning { color: rgb(133, 100, 4); background-color: rgb(255, 243, 2=
05); border-color: rgb(255, 238, 186); }

.alert-warning hr { border-top-color: rgb(255, 232, 161); }

.alert-warning .alert-link { color: rgb(83, 63, 3); }

.alert-danger { color: rgb(114, 28, 36); background-color: rgb(248, 215, 21=
8); border-color: rgb(245, 198, 203); }

.alert-danger hr { border-top-color: rgb(241, 176, 183); }

.alert-danger .alert-link { color: rgb(73, 18, 23); }

.alert-light { color: rgb(129, 129, 130); background-color: rgb(254, 254, 2=
54); border-color: rgb(253, 253, 254); }

.alert-light hr { border-top-color: rgb(236, 236, 246); }

.alert-light .alert-link { color: rgb(104, 104, 104); }

.alert-dark { color: rgb(27, 30, 33); background-color: rgb(214, 216, 217);=
 border-color: rgb(198, 200, 202); }

.alert-dark hr { border-top-color: rgb(185, 187, 190); }

.alert-dark .alert-link { color: rgb(4, 5, 5); }

@-webkit-keyframes progress-bar-stripes {=20
  0% { background-position: 1rem 0px; }
  100% { background-position: 0px 0px; }
}

@keyframes progress-bar-stripes {=20
  0% { background-position: 1rem 0px; }
  100% { background-position: 0px 0px; }
}

.progress { display: flex; overflow: hidden; font-size: 0.75rem; line-heigh=
t: 1rem; text-align: center; background-color: rgb(233, 236, 239); border-r=
adius: 0.25rem; }

.progress-bar { height: 1rem; line-height: 1rem; color: rgb(255, 255, 255);=
 background-color: rgb(0, 123, 255); transition: width 0.6s ease 0s; }

.progress-bar-striped { background-image: linear-gradient(45deg, rgba(255, =
255, 255, 0.15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, =
0.15) 50%, rgba(255, 255, 255, 0.15) 75%, transparent 75%, transparent); ba=
ckground-size: 1rem 1rem; }

.progress-bar-animated { animation: 1s linear 0s infinite normal none runni=
ng progress-bar-stripes; }

.media { display: flex; align-items: flex-start; }

.media-body { flex: 1 1 0%; }

.list-group { display: flex; flex-direction: column; padding-left: 0px; mar=
gin-bottom: 0px; }

.list-group-item-action { width: 100%; color: rgb(73, 80, 87); text-align: =
inherit; }

.list-group-item-action:focus, .list-group-item-action:hover { color: rgb(7=
3, 80, 87); text-decoration: none; background-color: rgb(248, 249, 250); }

.list-group-item-action:active { color: rgb(33, 37, 41); background-color: =
rgb(233, 236, 239); }

.list-group-item { position: relative; display: block; padding: 0.75rem 1.2=
5rem; margin-bottom: -1px; background-color: rgb(255, 255, 255); border: 1p=
x solid rgba(0, 0, 0, 0.125); }

.list-group-item:first-child { border-top-left-radius: 0.25rem; border-top-=
right-radius: 0.25rem; }

.list-group-item:last-child { margin-bottom: 0px; border-bottom-right-radiu=
s: 0.25rem; border-bottom-left-radius: 0.25rem; }

.list-group-item:focus, .list-group-item:hover { text-decoration: none; }

.list-group-item.disabled, .list-group-item:disabled { color: rgb(134, 142,=
 150); background-color: rgb(255, 255, 255); }

.list-group-item.active { z-index: 2; color: rgb(255, 255, 255); background=
-color: rgb(0, 123, 255); border-color: rgb(0, 123, 255); }

.list-group-flush .list-group-item { border-right: 0px; border-left: 0px; b=
order-radius: 0px; }

.list-group-flush:first-child .list-group-item:first-child { border-top: 0p=
x; }

.list-group-flush:last-child .list-group-item:last-child { border-bottom: 0=
px; }

.list-group-item-primary { color: rgb(0, 64, 133); background-color: rgb(18=
4, 218, 255); }

a.list-group-item-primary, button.list-group-item-primary { color: rgb(0, 6=
4, 133); }

a.list-group-item-primary:focus, a.list-group-item-primary:hover, button.li=
st-group-item-primary:focus, button.list-group-item-primary:hover { color: =
rgb(0, 64, 133); background-color: rgb(159, 205, 255); }

a.list-group-item-primary.active, button.list-group-item-primary.active { c=
olor: rgb(255, 255, 255); background-color: rgb(0, 64, 133); border-color: =
rgb(0, 64, 133); }

.list-group-item-secondary { color: rgb(70, 74, 78); background-color: rgb(=
221, 223, 226); }

a.list-group-item-secondary, button.list-group-item-secondary { color: rgb(=
70, 74, 78); }

a.list-group-item-secondary:focus, a.list-group-item-secondary:hover, butto=
n.list-group-item-secondary:focus, button.list-group-item-secondary:hover {=
 color: rgb(70, 74, 78); background-color: rgb(207, 210, 214); }

a.list-group-item-secondary.active, button.list-group-item-secondary.active=
 { color: rgb(255, 255, 255); background-color: rgb(70, 74, 78); border-col=
or: rgb(70, 74, 78); }

.list-group-item-success { color: rgb(21, 87, 36); background-color: rgb(19=
5, 230, 203); }

a.list-group-item-success, button.list-group-item-success { color: rgb(21, =
87, 36); }

a.list-group-item-success:focus, a.list-group-item-success:hover, button.li=
st-group-item-success:focus, button.list-group-item-success:hover { color: =
rgb(21, 87, 36); background-color: rgb(177, 223, 187); }

a.list-group-item-success.active, button.list-group-item-success.active { c=
olor: rgb(255, 255, 255); background-color: rgb(21, 87, 36); border-color: =
rgb(21, 87, 36); }

.list-group-item-info { color: rgb(12, 84, 96); background-color: rgb(190, =
229, 235); }

a.list-group-item-info, button.list-group-item-info { color: rgb(12, 84, 96=
); }

a.list-group-item-info:focus, a.list-group-item-info:hover, button.list-gro=
up-item-info:focus, button.list-group-item-info:hover { color: rgb(12, 84, =
96); background-color: rgb(171, 221, 229); }

a.list-group-item-info.active, button.list-group-item-info.active { color: =
rgb(255, 255, 255); background-color: rgb(12, 84, 96); border-color: rgb(12=
, 84, 96); }

.list-group-item-warning { color: rgb(133, 100, 4); background-color: rgb(2=
55, 238, 186); }

a.list-group-item-warning, button.list-group-item-warning { color: rgb(133,=
 100, 4); }

a.list-group-item-warning:focus, a.list-group-item-warning:hover, button.li=
st-group-item-warning:focus, button.list-group-item-warning:hover { color: =
rgb(133, 100, 4); background-color: rgb(255, 232, 161); }

a.list-group-item-warning.active, button.list-group-item-warning.active { c=
olor: rgb(255, 255, 255); background-color: rgb(133, 100, 4); border-color:=
 rgb(133, 100, 4); }

.list-group-item-danger { color: rgb(114, 28, 36); background-color: rgb(24=
5, 198, 203); }

a.list-group-item-danger, button.list-group-item-danger { color: rgb(114, 2=
8, 36); }

a.list-group-item-danger:focus, a.list-group-item-danger:hover, button.list=
-group-item-danger:focus, button.list-group-item-danger:hover { color: rgb(=
114, 28, 36); background-color: rgb(241, 176, 183); }

a.list-group-item-danger.active, button.list-group-item-danger.active { col=
or: rgb(255, 255, 255); background-color: rgb(114, 28, 36); border-color: r=
gb(114, 28, 36); }

.list-group-item-light { color: rgb(129, 129, 130); background-color: rgb(2=
53, 253, 254); }

a.list-group-item-light, button.list-group-item-light { color: rgb(129, 129=
, 130); }

a.list-group-item-light:focus, a.list-group-item-light:hover, button.list-g=
roup-item-light:focus, button.list-group-item-light:hover { color: rgb(129,=
 129, 130); background-color: rgb(236, 236, 246); }

a.list-group-item-light.active, button.list-group-item-light.active { color=
: rgb(255, 255, 255); background-color: rgb(129, 129, 130); border-color: r=
gb(129, 129, 130); }

.list-group-item-dark { color: rgb(27, 30, 33); background-color: rgb(198, =
200, 202); }

a.list-group-item-dark, button.list-group-item-dark { color: rgb(27, 30, 33=
); }

a.list-group-item-dark:focus, a.list-group-item-dark:hover, button.list-gro=
up-item-dark:focus, button.list-group-item-dark:hover { color: rgb(27, 30, =
33); background-color: rgb(185, 187, 190); }

a.list-group-item-dark.active, button.list-group-item-dark.active { color: =
rgb(255, 255, 255); background-color: rgb(27, 30, 33); border-color: rgb(27=
, 30, 33); }

.close { float: right; font-size: 1.5rem; font-weight: 700; line-height: 1;=
 color: rgb(0, 0, 0); text-shadow: rgb(255, 255, 255) 0px 1px 0px; opacity:=
 0.5; }

.close:focus, .close:hover { color: rgb(0, 0, 0); text-decoration: none; op=
acity: 0.75; }

button.close { padding: 0px; background: 0px 0px; border: 0px; appearance: =
none; }

.modal-open { overflow: hidden; }

.modal { position: fixed; inset: 0px; z-index: 1050; display: none; overflo=
w: hidden; outline: 0px; }

.modal.fade .modal-dialog { transition: transform 0.3s ease-out 0s, -webkit=
-transform 0.3s ease-out 0s; transform: translate(0px, -25%); }

.modal.show .modal-dialog { transform: translate(0px, 0px); }

.modal-open .modal { overflow: hidden auto; }

.modal-dialog { position: relative; width: auto; margin: 10px; }

.modal-content { position: relative; display: flex; flex-direction: column;=
 background-color: rgb(255, 255, 255); background-clip: padding-box; border=
: 1px solid rgba(0, 0, 0, 0.2); border-radius: 0.3rem; outline: 0px; }

.modal-backdrop { position: fixed; inset: 0px; z-index: 1040; background-co=
lor: rgb(0, 0, 0); }

.modal-backdrop.fade { opacity: 0; }

.modal-backdrop.show { opacity: 0.5; }

.modal-header { display: flex; align-items: center; justify-content: space-=
between; padding: 15px; border-bottom: 1px solid rgb(233, 236, 239); }

.modal-title { margin-bottom: 0px; line-height: 1.5; }

.modal-body { position: relative; flex: 1 1 auto; padding: 15px; }

.modal-footer { display: flex; align-items: center; justify-content: flex-e=
nd; padding: 15px; border-top: 1px solid rgb(233, 236, 239); }

.modal-footer > :not(:first-child) { margin-left: 0.25rem; }

.modal-footer > :not(:last-child) { margin-right: 0.25rem; }

.modal-scrollbar-measure { position: absolute; top: -9999px; width: 50px; h=
eight: 50px; overflow: scroll; }

@media (min-width: 576px) {
  .modal-dialog { max-width: 500px; margin: 30px auto; }
  .modal-sm { max-width: 300px; }
}

@media (min-width: 992px) {
  .modal-lg { max-width: 800px; }
}

.tooltip { position: absolute; z-index: 1070; display: block; margin: 0px; =
font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvet=
ica Neue", Arial, sans-serif; font-style: normal; font-weight: 400; line-he=
ight: 1.5; text-align: start; text-decoration: none; text-shadow: none; tex=
t-transform: none; letter-spacing: normal; word-break: normal; word-spacing=
: normal; white-space: normal; line-break: auto; font-size: 0.875rem; overf=
low-wrap: break-word; opacity: 0; }

.tooltip.show { opacity: 0.9; }

.tooltip .arrow { position: absolute; display: block; width: 5px; height: 5=
px; }

.tooltip.bs-tooltip-auto[x-placement^=3D"top"], .tooltip.bs-tooltip-top { p=
adding: 5px 0px; }

.tooltip.bs-tooltip-auto[x-placement^=3D"top"] .arrow, .tooltip.bs-tooltip-=
top .arrow { bottom: 0px; }

.tooltip.bs-tooltip-auto[x-placement^=3D"top"] .arrow::before, .tooltip.bs-=
tooltip-top .arrow::before { margin-left: -3px; content: ""; border-width: =
5px 5px 0px; border-top-color: rgb(0, 0, 0); }

.tooltip.bs-tooltip-auto[x-placement^=3D"right"], .tooltip.bs-tooltip-right=
 { padding: 0px 5px; }

.tooltip.bs-tooltip-auto[x-placement^=3D"right"] .arrow, .tooltip.bs-toolti=
p-right .arrow { left: 0px; }

.tooltip.bs-tooltip-auto[x-placement^=3D"right"] .arrow::before, .tooltip.b=
s-tooltip-right .arrow::before { margin-top: -3px; content: ""; border-widt=
h: 5px 5px 5px 0px; border-right-color: rgb(0, 0, 0); }

.tooltip.bs-tooltip-auto[x-placement^=3D"bottom"], .tooltip.bs-tooltip-bott=
om { padding: 5px 0px; }

.tooltip.bs-tooltip-auto[x-placement^=3D"bottom"] .arrow, .tooltip.bs-toolt=
ip-bottom .arrow { top: 0px; }

.tooltip.bs-tooltip-auto[x-placement^=3D"bottom"] .arrow::before, .tooltip.=
bs-tooltip-bottom .arrow::before { margin-left: -3px; content: ""; border-w=
idth: 0px 5px 5px; border-bottom-color: rgb(0, 0, 0); }

.tooltip.bs-tooltip-auto[x-placement^=3D"left"], .tooltip.bs-tooltip-left {=
 padding: 0px 5px; }

.tooltip.bs-tooltip-auto[x-placement^=3D"left"] .arrow, .tooltip.bs-tooltip=
-left .arrow { right: 0px; }

.tooltip.bs-tooltip-auto[x-placement^=3D"left"] .arrow::before, .tooltip.bs=
-tooltip-left .arrow::before { right: 0px; margin-top: -3px; content: ""; b=
order-width: 5px 0px 5px 5px; border-left-color: rgb(0, 0, 0); }

.tooltip .arrow::before { position: absolute; border-color: transparent; bo=
rder-style: solid; }

.tooltip-inner { max-width: 200px; padding: 3px 8px; color: rgb(255, 255, 2=
55); text-align: center; background-color: rgb(0, 0, 0); border-radius: 0.2=
5rem; }

.popover { position: absolute; top: 0px; left: 0px; z-index: 1060; display:=
 block; max-width: 276px; padding: 1px; font-family: -apple-system, BlinkMa=
cSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif; font-=
style: normal; font-weight: 400; line-height: 1.5; text-align: start; text-=
decoration: none; text-shadow: none; text-transform: none; letter-spacing: =
normal; word-break: normal; word-spacing: normal; white-space: normal; line=
-break: auto; font-size: 0.875rem; overflow-wrap: break-word; background-co=
lor: rgb(255, 255, 255); background-clip: padding-box; border: 1px solid rg=
ba(0, 0, 0, 0.2); border-radius: 0.3rem; }

.popover .arrow { position: absolute; display: block; width: 10px; height: =
5px; }

.popover .arrow::after, .popover .arrow::before { position: absolute; displ=
ay: block; border-color: transparent; border-style: solid; }

.popover .arrow::before { content: ""; border-width: 11px; }

.popover .arrow::after { content: ""; border-width: 11px; }

.popover.bs-popover-auto[x-placement^=3D"top"], .popover.bs-popover-top { m=
argin-bottom: 10px; }

.popover.bs-popover-auto[x-placement^=3D"top"] .arrow, .popover.bs-popover-=
top .arrow { bottom: 0px; }

.popover.bs-popover-auto[x-placement^=3D"top"] .arrow::after, .popover.bs-p=
opover-auto[x-placement^=3D"top"] .arrow::before, .popover.bs-popover-top .=
arrow::after, .popover.bs-popover-top .arrow::before { border-bottom-width:=
 0px; }

.popover.bs-popover-auto[x-placement^=3D"top"] .arrow::before, .popover.bs-=
popover-top .arrow::before { bottom: -11px; margin-left: -6px; border-top-c=
olor: rgba(0, 0, 0, 0.25); }

.popover.bs-popover-auto[x-placement^=3D"top"] .arrow::after, .popover.bs-p=
opover-top .arrow::after { bottom: -10px; margin-left: -6px; border-top-col=
or: rgb(255, 255, 255); }

.popover.bs-popover-auto[x-placement^=3D"right"], .popover.bs-popover-right=
 { margin-left: 10px; }

.popover.bs-popover-auto[x-placement^=3D"right"] .arrow, .popover.bs-popove=
r-right .arrow { left: 0px; }

.popover.bs-popover-auto[x-placement^=3D"right"] .arrow::after, .popover.bs=
-popover-auto[x-placement^=3D"right"] .arrow::before, .popover.bs-popover-r=
ight .arrow::after, .popover.bs-popover-right .arrow::before { margin-top: =
-8px; border-left-width: 0px; }

.popover.bs-popover-auto[x-placement^=3D"right"] .arrow::before, .popover.b=
s-popover-right .arrow::before { left: -11px; border-right-color: rgba(0, 0=
, 0, 0.25); }

.popover.bs-popover-auto[x-placement^=3D"right"] .arrow::after, .popover.bs=
-popover-right .arrow::after { left: -10px; border-right-color: rgb(255, 25=
5, 255); }

.popover.bs-popover-auto[x-placement^=3D"bottom"], .popover.bs-popover-bott=
om { margin-top: 10px; }

.popover.bs-popover-auto[x-placement^=3D"bottom"] .arrow, .popover.bs-popov=
er-bottom .arrow { top: 0px; }

.popover.bs-popover-auto[x-placement^=3D"bottom"] .arrow::after, .popover.b=
s-popover-auto[x-placement^=3D"bottom"] .arrow::before, .popover.bs-popover=
-bottom .arrow::after, .popover.bs-popover-bottom .arrow::before { margin-l=
eft: -7px; border-top-width: 0px; }

.popover.bs-popover-auto[x-placement^=3D"bottom"] .arrow::before, .popover.=
bs-popover-bottom .arrow::before { top: -11px; border-bottom-color: rgba(0,=
 0, 0, 0.25); }

.popover.bs-popover-auto[x-placement^=3D"bottom"] .arrow::after, .popover.b=
s-popover-bottom .arrow::after { top: -10px; border-bottom-color: rgb(255, =
255, 255); }

.popover.bs-popover-auto[x-placement^=3D"bottom"] .popover-header::before, =
.popover.bs-popover-bottom .popover-header::before { position: absolute; to=
p: 0px; left: 50%; display: block; width: 20px; margin-left: -10px; content=
: ""; border-bottom: 1px solid rgb(247, 247, 247); }

.popover.bs-popover-auto[x-placement^=3D"left"], .popover.bs-popover-left {=
 margin-right: 10px; }

.popover.bs-popover-auto[x-placement^=3D"left"] .arrow, .popover.bs-popover=
-left .arrow { right: 0px; }

.popover.bs-popover-auto[x-placement^=3D"left"] .arrow::after, .popover.bs-=
popover-auto[x-placement^=3D"left"] .arrow::before, .popover.bs-popover-lef=
t .arrow::after, .popover.bs-popover-left .arrow::before { margin-top: -8px=
; border-right-width: 0px; }

.popover.bs-popover-auto[x-placement^=3D"left"] .arrow::before, .popover.bs=
-popover-left .arrow::before { right: -11px; border-left-color: rgba(0, 0, =
0, 0.25); }

.popover.bs-popover-auto[x-placement^=3D"left"] .arrow::after, .popover.bs-=
popover-left .arrow::after { right: -10px; border-left-color: rgb(255, 255,=
 255); }

.popover-header { padding: 8px 14px; margin-bottom: 0px; font-size: 1rem; c=
olor: inherit; background-color: rgb(247, 247, 247); border-bottom: 1px sol=
id rgb(235, 235, 235); border-top-left-radius: calc(0.3rem - 1px); border-t=
op-right-radius: calc(0.3rem - 1px); }

.popover-header:empty { display: none; }

.popover-body { padding: 9px 14px; color: rgb(33, 37, 41); }

.carousel { position: relative; }

.carousel-inner { position: relative; width: 100%; overflow: hidden; }

.carousel-item { position: relative; display: none; align-items: center; wi=
dth: 100%; transition: transform 0.6s ease 0s, -webkit-transform 0.6s ease =
0s; backface-visibility: hidden; perspective: 1000px; }

.carousel-item-next, .carousel-item-prev, .carousel-item.active { display: =
block; }

.carousel-item-next, .carousel-item-prev { position: absolute; top: 0px; }

.carousel-item-next.carousel-item-left, .carousel-item-prev.carousel-item-r=
ight { transform: translateX(0px); }

@supports ((-webkit-transform-style:preserve-3d) or (transform-style:preser=
ve-3d)) {
  .carousel-item-next.carousel-item-left, .carousel-item-prev.carousel-item=
-right { transform: translate3d(0px, 0px, 0px); }
}

.active.carousel-item-right, .carousel-item-next { transform: translateX(10=
0%); }

@supports ((-webkit-transform-style:preserve-3d) or (transform-style:preser=
ve-3d)) {
  .active.carousel-item-right, .carousel-item-next { transform: translate3d=
(100%, 0px, 0px); }
}

.active.carousel-item-left, .carousel-item-prev { transform: translateX(-10=
0%); }

@supports ((-webkit-transform-style:preserve-3d) or (transform-style:preser=
ve-3d)) {
  .active.carousel-item-left, .carousel-item-prev { transform: translate3d(=
-100%, 0px, 0px); }
}

.carousel-control-next, .carousel-control-prev { position: absolute; top: 0=
px; bottom: 0px; display: flex; align-items: center; justify-content: cente=
r; width: 15%; color: rgb(255, 255, 255); text-align: center; opacity: 0.5;=
 }

.carousel-control-next:focus, .carousel-control-next:hover, .carousel-contr=
ol-prev:focus, .carousel-control-prev:hover { color: rgb(255, 255, 255); te=
xt-decoration: none; outline: 0px; opacity: 0.9; }

.carousel-control-prev { left: 0px; }

.carousel-control-next { right: 0px; }

.carousel-control-next-icon, .carousel-control-prev-icon { display: inline-=
block; width: 20px; height: 20px; background: center center / 100% 100% no-=
repeat transparent; }

.carousel-control-prev-icon { background-image: url("data:image/svg+xml;cha=
rset=3Dutf8,%3Csvg xmlns=3D'http://www.w3.org/2000/svg' fill=3D'%23fff' vie=
wBox=3D'0 0 8 8'%3E%3Cpath d=3D'M4 0l-4 4 4 4 1.5-1.5-2.5-2.5 2.5-2.5-1.5-1=
.5z'/%3E%3C/svg%3E"); }

.carousel-control-next-icon { background-image: url("data:image/svg+xml;cha=
rset=3Dutf8,%3Csvg xmlns=3D'http://www.w3.org/2000/svg' fill=3D'%23fff' vie=
wBox=3D'0 0 8 8'%3E%3Cpath d=3D'M1.5 0l-1.5 1.5 2.5 2.5-2.5 2.5 1.5 1.5 4-4=
-4-4z'/%3E%3C/svg%3E"); }

.carousel-indicators { position: absolute; right: 0px; bottom: 10px; left: =
0px; z-index: 15; display: flex; justify-content: center; padding-left: 0px=
; margin-right: 15%; margin-left: 15%; list-style: none; }

.carousel-indicators li { position: relative; flex: 0 1 auto; width: 30px; =
height: 3px; margin-right: 3px; margin-left: 3px; text-indent: -999px; back=
ground-color: rgba(255, 255, 255, 0.5); }

.carousel-indicators li::before { position: absolute; top: -10px; left: 0px=
; display: inline-block; width: 100%; height: 10px; content: ""; }

.carousel-indicators li::after { position: absolute; bottom: -10px; left: 0=
px; display: inline-block; width: 100%; height: 10px; content: ""; }

.carousel-indicators .active { background-color: rgb(255, 255, 255); }

.carousel-caption { position: absolute; right: 15%; bottom: 20px; left: 15%=
; z-index: 10; padding-top: 20px; padding-bottom: 20px; color: rgb(255, 255=
, 255); text-align: center; }

.align-baseline { vertical-align: baseline !important; }

.align-top { vertical-align: top !important; }

.align-middle { vertical-align: middle !important; }

.align-bottom { vertical-align: bottom !important; }

.align-text-bottom { vertical-align: text-bottom !important; }

.align-text-top { vertical-align: text-top !important; }

.bg-primary { background-color: rgb(0, 123, 255) !important; }

a.bg-primary:focus, a.bg-primary:hover { background-color: rgb(0, 98, 204) =
!important; }

.bg-secondary { background-color: rgb(134, 142, 150) !important; }

a.bg-secondary:focus, a.bg-secondary:hover { background-color: rgb(108, 117=
, 125) !important; }

.bg-success { background-color: rgb(40, 167, 69) !important; }

a.bg-success:focus, a.bg-success:hover { background-color: rgb(30, 126, 52)=
 !important; }

.bg-info { background-color: rgb(23, 162, 184) !important; }

a.bg-info:focus, a.bg-info:hover { background-color: rgb(17, 122, 139) !imp=
ortant; }

.bg-warning { background-color: rgb(255, 193, 7) !important; }

a.bg-warning:focus, a.bg-warning:hover { background-color: rgb(211, 158, 0)=
 !important; }

.bg-danger { background-color: rgb(220, 53, 69) !important; }

a.bg-danger:focus, a.bg-danger:hover { background-color: rgb(189, 33, 48) !=
important; }

.bg-light { background-color: rgb(248, 249, 250) !important; }

a.bg-light:focus, a.bg-light:hover { background-color: rgb(218, 224, 229) !=
important; }

.bg-dark { background-color: rgb(52, 58, 64) !important; }

a.bg-dark:focus, a.bg-dark:hover { background-color: rgb(29, 33, 36) !impor=
tant; }

.bg-white { background-color: rgb(255, 255, 255) !important; }

.bg-transparent { background-color: transparent !important; }

.border { border: 1px solid rgb(233, 236, 239) !important; }

.border-0 { border: 0px !important; }

.border-top-0 { border-top: 0px !important; }

.border-right-0 { border-right: 0px !important; }

.border-bottom-0 { border-bottom: 0px !important; }

.border-left-0 { border-left: 0px !important; }

.border-primary { border-color: rgb(0, 123, 255) !important; }

.border-secondary { border-color: rgb(134, 142, 150) !important; }

.border-success { border-color: rgb(40, 167, 69) !important; }

.border-info { border-color: rgb(23, 162, 184) !important; }

.border-warning { border-color: rgb(255, 193, 7) !important; }

.border-danger { border-color: rgb(220, 53, 69) !important; }

.border-light { border-color: rgb(248, 249, 250) !important; }

.border-dark { border-color: rgb(52, 58, 64) !important; }

.border-white { border-color: rgb(255, 255, 255) !important; }

.rounded { border-radius: 0.25rem !important; }

.rounded-top { border-top-left-radius: 0.25rem !important; border-top-right=
-radius: 0.25rem !important; }

.rounded-right { border-top-right-radius: 0.25rem !important; border-bottom=
-right-radius: 0.25rem !important; }

.rounded-bottom { border-bottom-right-radius: 0.25rem !important; border-bo=
ttom-left-radius: 0.25rem !important; }

.rounded-left { border-top-left-radius: 0.25rem !important; border-bottom-l=
eft-radius: 0.25rem !important; }

.rounded-circle { border-radius: 50%; }

.rounded-0 { border-radius: 0px; }

.clearfix::after { display: block; clear: both; content: ""; }

.d-none { display: none !important; }

.d-inline { display: inline !important; }

.d-inline-block { display: inline-block !important; }

.d-block { display: block !important; }

.d-table { display: table !important; }

.d-table-cell { display: table-cell !important; }

.d-flex { display: flex !important; }

.d-inline-flex { display: inline-flex !important; }

@media (min-width: 576px) {
  .d-sm-none { display: none !important; }
  .d-sm-inline { display: inline !important; }
  .d-sm-inline-block { display: inline-block !important; }
  .d-sm-block { display: block !important; }
  .d-sm-table { display: table !important; }
  .d-sm-table-cell { display: table-cell !important; }
  .d-sm-flex { display: flex !important; }
  .d-sm-inline-flex { display: inline-flex !important; }
}

@media (min-width: 768px) {
  .d-md-none { display: none !important; }
  .d-md-inline { display: inline !important; }
  .d-md-inline-block { display: inline-block !important; }
  .d-md-block { display: block !important; }
  .d-md-table { display: table !important; }
  .d-md-table-cell { display: table-cell !important; }
  .d-md-flex { display: flex !important; }
  .d-md-inline-flex { display: inline-flex !important; }
}

@media (min-width: 992px) {
  .d-lg-none { display: none !important; }
  .d-lg-inline { display: inline !important; }
  .d-lg-inline-block { display: inline-block !important; }
  .d-lg-block { display: block !important; }
  .d-lg-table { display: table !important; }
  .d-lg-table-cell { display: table-cell !important; }
  .d-lg-flex { display: flex !important; }
  .d-lg-inline-flex { display: inline-flex !important; }
}

@media (min-width: 1200px) {
  .d-xl-none { display: none !important; }
  .d-xl-inline { display: inline !important; }
  .d-xl-inline-block { display: inline-block !important; }
  .d-xl-block { display: block !important; }
  .d-xl-table { display: table !important; }
  .d-xl-table-cell { display: table-cell !important; }
  .d-xl-flex { display: flex !important; }
  .d-xl-inline-flex { display: inline-flex !important; }
}

.d-print-block { display: none !important; }

@media print {
  .d-print-block { display: block !important; }
}

.d-print-inline { display: none !important; }

@media print {
  .d-print-inline { display: inline !important; }
}

.d-print-inline-block { display: none !important; }

@media print {
  .d-print-inline-block { display: inline-block !important; }
}

@media print {
  .d-print-none { display: none !important; }
}

.embed-responsive { position: relative; display: block; width: 100%; paddin=
g: 0px; overflow: hidden; }

.embed-responsive::before { display: block; content: ""; }

.embed-responsive .embed-responsive-item, .embed-responsive embed, .embed-r=
esponsive iframe, .embed-responsive object, .embed-responsive video { posit=
ion: absolute; top: 0px; bottom: 0px; left: 0px; width: 100%; height: 100%;=
 border: 0px; }

.embed-responsive-21by9::before { padding-top: 42.8571%; }

.embed-responsive-16by9::before { padding-top: 56.25%; }

.embed-responsive-4by3::before { padding-top: 75%; }

.embed-responsive-1by1::before { padding-top: 100%; }

.flex-row { flex-direction: row !important; }

.flex-column { flex-direction: column !important; }

.flex-row-reverse { flex-direction: row-reverse !important; }

.flex-column-reverse { flex-direction: column-reverse !important; }

.flex-wrap { flex-wrap: wrap !important; }

.flex-nowrap { flex-wrap: nowrap !important; }

.flex-wrap-reverse { flex-wrap: wrap-reverse !important; }

.justify-content-start { justify-content: flex-start !important; }

.justify-content-end { justify-content: flex-end !important; }

.justify-content-center { justify-content: center !important; }

.justify-content-between { justify-content: space-between !important; }

.justify-content-around { justify-content: space-around !important; }

.align-items-start { align-items: flex-start !important; }

.align-items-end { align-items: flex-end !important; }

.align-items-center { align-items: center !important; }

.align-items-baseline { align-items: baseline !important; }

.align-items-stretch { align-items: stretch !important; }

.align-content-start { align-content: flex-start !important; }

.align-content-end { align-content: flex-end !important; }

.align-content-center { align-content: center !important; }

.align-content-between { align-content: space-between !important; }

.align-content-around { align-content: space-around !important; }

.align-content-stretch { align-content: stretch !important; }

.align-self-auto { align-self: auto !important; }

.align-self-start { align-self: flex-start !important; }

.align-self-end { align-self: flex-end !important; }

.align-self-center { align-self: center !important; }

.align-self-baseline { align-self: baseline !important; }

.align-self-stretch { align-self: stretch !important; }

@media (min-width: 576px) {
  .flex-sm-row { flex-direction: row !important; }
  .flex-sm-column { flex-direction: column !important; }
  .flex-sm-row-reverse { flex-direction: row-reverse !important; }
  .flex-sm-column-reverse { flex-direction: column-reverse !important; }
  .flex-sm-wrap { flex-wrap: wrap !important; }
  .flex-sm-nowrap { flex-wrap: nowrap !important; }
  .flex-sm-wrap-reverse { flex-wrap: wrap-reverse !important; }
  .justify-content-sm-start { justify-content: flex-start !important; }
  .justify-content-sm-end { justify-content: flex-end !important; }
  .justify-content-sm-center { justify-content: center !important; }
  .justify-content-sm-between { justify-content: space-between !important; =
}
  .justify-content-sm-around { justify-content: space-around !important; }
  .align-items-sm-start { align-items: flex-start !important; }
  .align-items-sm-end { align-items: flex-end !important; }
  .align-items-sm-center { align-items: center !important; }
  .align-items-sm-baseline { align-items: baseline !important; }
  .align-items-sm-stretch { align-items: stretch !important; }
  .align-content-sm-start { align-content: flex-start !important; }
  .align-content-sm-end { align-content: flex-end !important; }
  .align-content-sm-center { align-content: center !important; }
  .align-content-sm-between { align-content: space-between !important; }
  .align-content-sm-around { align-content: space-around !important; }
  .align-content-sm-stretch { align-content: stretch !important; }
  .align-self-sm-auto { align-self: auto !important; }
  .align-self-sm-start { align-self: flex-start !important; }
  .align-self-sm-end { align-self: flex-end !important; }
  .align-self-sm-center { align-self: center !important; }
  .align-self-sm-baseline { align-self: baseline !important; }
  .align-self-sm-stretch { align-self: stretch !important; }
}

@media (min-width: 768px) {
  .flex-md-row { flex-direction: row !important; }
  .flex-md-column { flex-direction: column !important; }
  .flex-md-row-reverse { flex-direction: row-reverse !important; }
  .flex-md-column-reverse { flex-direction: column-reverse !important; }
  .flex-md-wrap { flex-wrap: wrap !important; }
  .flex-md-nowrap { flex-wrap: nowrap !important; }
  .flex-md-wrap-reverse { flex-wrap: wrap-reverse !important; }
  .justify-content-md-start { justify-content: flex-start !important; }
  .justify-content-md-end { justify-content: flex-end !important; }
  .justify-content-md-center { justify-content: center !important; }
  .justify-content-md-between { justify-content: space-between !important; =
}
  .justify-content-md-around { justify-content: space-around !important; }
  .align-items-md-start { align-items: flex-start !important; }
  .align-items-md-end { align-items: flex-end !important; }
  .align-items-md-center { align-items: center !important; }
  .align-items-md-baseline { align-items: baseline !important; }
  .align-items-md-stretch { align-items: stretch !important; }
  .align-content-md-start { align-content: flex-start !important; }
  .align-content-md-end { align-content: flex-end !important; }
  .align-content-md-center { align-content: center !important; }
  .align-content-md-between { align-content: space-between !important; }
  .align-content-md-around { align-content: space-around !important; }
  .align-content-md-stretch { align-content: stretch !important; }
  .align-self-md-auto { align-self: auto !important; }
  .align-self-md-start { align-self: flex-start !important; }
  .align-self-md-end { align-self: flex-end !important; }
  .align-self-md-center { align-self: center !important; }
  .align-self-md-baseline { align-self: baseline !important; }
  .align-self-md-stretch { align-self: stretch !important; }
}

@media (min-width: 992px) {
  .flex-lg-row { flex-direction: row !important; }
  .flex-lg-column { flex-direction: column !important; }
  .flex-lg-row-reverse { flex-direction: row-reverse !important; }
  .flex-lg-column-reverse { flex-direction: column-reverse !important; }
  .flex-lg-wrap { flex-wrap: wrap !important; }
  .flex-lg-nowrap { flex-wrap: nowrap !important; }
  .flex-lg-wrap-reverse { flex-wrap: wrap-reverse !important; }
  .justify-content-lg-start { justify-content: flex-start !important; }
  .justify-content-lg-end { justify-content: flex-end !important; }
  .justify-content-lg-center { justify-content: center !important; }
  .justify-content-lg-between { justify-content: space-between !important; =
}
  .justify-content-lg-around { justify-content: space-around !important; }
  .align-items-lg-start { align-items: flex-start !important; }
  .align-items-lg-end { align-items: flex-end !important; }
  .align-items-lg-center { align-items: center !important; }
  .align-items-lg-baseline { align-items: baseline !important; }
  .align-items-lg-stretch { align-items: stretch !important; }
  .align-content-lg-start { align-content: flex-start !important; }
  .align-content-lg-end { align-content: flex-end !important; }
  .align-content-lg-center { align-content: center !important; }
  .align-content-lg-between { align-content: space-between !important; }
  .align-content-lg-around { align-content: space-around !important; }
  .align-content-lg-stretch { align-content: stretch !important; }
  .align-self-lg-auto { align-self: auto !important; }
  .align-self-lg-start { align-self: flex-start !important; }
  .align-self-lg-end { align-self: flex-end !important; }
  .align-self-lg-center { align-self: center !important; }
  .align-self-lg-baseline { align-self: baseline !important; }
  .align-self-lg-stretch { align-self: stretch !important; }
}

@media (min-width: 1200px) {
  .flex-xl-row { flex-direction: row !important; }
  .flex-xl-column { flex-direction: column !important; }
  .flex-xl-row-reverse { flex-direction: row-reverse !important; }
  .flex-xl-column-reverse { flex-direction: column-reverse !important; }
  .flex-xl-wrap { flex-wrap: wrap !important; }
  .flex-xl-nowrap { flex-wrap: nowrap !important; }
  .flex-xl-wrap-reverse { flex-wrap: wrap-reverse !important; }
  .justify-content-xl-start { justify-content: flex-start !important; }
  .justify-content-xl-end { justify-content: flex-end !important; }
  .justify-content-xl-center { justify-content: center !important; }
  .justify-content-xl-between { justify-content: space-between !important; =
}
  .justify-content-xl-around { justify-content: space-around !important; }
  .align-items-xl-start { align-items: flex-start !important; }
  .align-items-xl-end { align-items: flex-end !important; }
  .align-items-xl-center { align-items: center !important; }
  .align-items-xl-baseline { align-items: baseline !important; }
  .align-items-xl-stretch { align-items: stretch !important; }
  .align-content-xl-start { align-content: flex-start !important; }
  .align-content-xl-end { align-content: flex-end !important; }
  .align-content-xl-center { align-content: center !important; }
  .align-content-xl-between { align-content: space-between !important; }
  .align-content-xl-around { align-content: space-around !important; }
  .align-content-xl-stretch { align-content: stretch !important; }
  .align-self-xl-auto { align-self: auto !important; }
  .align-self-xl-start { align-self: flex-start !important; }
  .align-self-xl-end { align-self: flex-end !important; }
  .align-self-xl-center { align-self: center !important; }
  .align-self-xl-baseline { align-self: baseline !important; }
  .align-self-xl-stretch { align-self: stretch !important; }
}

.float-left { float: left !important; }

.float-right { float: right !important; }

.float-none { float: none !important; }

@media (min-width: 576px) {
  .float-sm-left { float: left !important; }
  .float-sm-right { float: right !important; }
  .float-sm-none { float: none !important; }
}

@media (min-width: 768px) {
  .float-md-left { float: left !important; }
  .float-md-right { float: right !important; }
  .float-md-none { float: none !important; }
}

@media (min-width: 992px) {
  .float-lg-left { float: left !important; }
  .float-lg-right { float: right !important; }
  .float-lg-none { float: none !important; }
}

@media (min-width: 1200px) {
  .float-xl-left { float: left !important; }
  .float-xl-right { float: right !important; }
  .float-xl-none { float: none !important; }
}

.fixed-top { position: fixed; top: 0px; right: 0px; left: 0px; z-index: 103=
0; }

.fixed-bottom { position: fixed; right: 0px; bottom: 0px; left: 0px; z-inde=
x: 1030; }

@supports ((position:-webkit-sticky) or (position:sticky)) {
  .sticky-top { position: sticky; top: 0px; z-index: 1020; }
}

.sr-only { position: absolute; width: 1px; height: 1px; padding: 0px; overf=
low: hidden; clip: rect(0px, 0px, 0px, 0px); white-space: nowrap; clip-path=
: inset(50%); border: 0px; }

.sr-only-focusable:active, .sr-only-focusable:focus { position: static; wid=
th: auto; height: auto; overflow: visible; clip: auto; white-space: normal;=
 clip-path: none; }

.w-25 { width: 25% !important; }

.w-50 { width: 50% !important; }

.w-75 { width: 75% !important; }

.w-100 { width: 100% !important; }

.h-25 { height: 25% !important; }

.h-50 { height: 50% !important; }

.h-75 { height: 75% !important; }

.h-100 { height: 100% !important; }

.mw-100 { max-width: 100% !important; }

.mh-100 { max-height: 100% !important; }

.m-0 { margin: 0px !important; }

.mt-0 { margin-top: 0px !important; }

.mr-0 { margin-right: 0px !important; }

.mb-0 { margin-bottom: 0px !important; }

.ml-0 { margin-left: 0px !important; }

.mx-0 { margin-right: 0px !important; margin-left: 0px !important; }

.my-0 { margin-top: 0px !important; margin-bottom: 0px !important; }

.m-1 { margin: 0.25rem !important; }

.mt-1 { margin-top: 0.25rem !important; }

.mr-1 { margin-right: 0.25rem !important; }

.mb-1 { margin-bottom: 0.25rem !important; }

.ml-1 { margin-left: 0.25rem !important; }

.mx-1 { margin-right: 0.25rem !important; margin-left: 0.25rem !important; =
}

.my-1 { margin-top: 0.25rem !important; margin-bottom: 0.25rem !important; =
}

.m-2 { margin: 0.5rem !important; }

.mt-2 { margin-top: 0.5rem !important; }

.mr-2 { margin-right: 0.5rem !important; }

.mb-2 { margin-bottom: 0.5rem !important; }

.ml-2 { margin-left: 0.5rem !important; }

.mx-2 { margin-right: 0.5rem !important; margin-left: 0.5rem !important; }

.my-2 { margin-top: 0.5rem !important; margin-bottom: 0.5rem !important; }

.m-3 { margin: 1rem !important; }

.mt-3 { margin-top: 1rem !important; }

.mr-3 { margin-right: 1rem !important; }

.mb-3 { margin-bottom: 1rem !important; }

.ml-3 { margin-left: 1rem !important; }

.mx-3 { margin-right: 1rem !important; margin-left: 1rem !important; }

.my-3 { margin-top: 1rem !important; margin-bottom: 1rem !important; }

.m-4 { margin: 1.5rem !important; }

.mt-4 { margin-top: 1.5rem !important; }

.mr-4 { margin-right: 1.5rem !important; }

.mb-4 { margin-bottom: 1.5rem !important; }

.ml-4 { margin-left: 1.5rem !important; }

.mx-4 { margin-right: 1.5rem !important; margin-left: 1.5rem !important; }

.my-4 { margin-top: 1.5rem !important; margin-bottom: 1.5rem !important; }

.m-5 { margin: 3rem !important; }

.mt-5 { margin-top: 3rem !important; }

.mr-5 { margin-right: 3rem !important; }

.mb-5 { margin-bottom: 3rem !important; }

.ml-5 { margin-left: 3rem !important; }

.mx-5 { margin-right: 3rem !important; margin-left: 3rem !important; }

.my-5 { margin-top: 3rem !important; margin-bottom: 3rem !important; }

.p-0 { padding: 0px !important; }

.pt-0 { padding-top: 0px !important; }

.pr-0 { padding-right: 0px !important; }

.pb-0 { padding-bottom: 0px !important; }

.pl-0 { padding-left: 0px !important; }

.px-0 { padding-right: 0px !important; padding-left: 0px !important; }

.py-0 { padding-top: 0px !important; padding-bottom: 0px !important; }

.p-1 { padding: 0.25rem !important; }

.pt-1 { padding-top: 0.25rem !important; }

.pr-1 { padding-right: 0.25rem !important; }

.pb-1 { padding-bottom: 0.25rem !important; }

.pl-1 { padding-left: 0.25rem !important; }

.px-1 { padding-right: 0.25rem !important; padding-left: 0.25rem !important=
; }

.py-1 { padding-top: 0.25rem !important; padding-bottom: 0.25rem !important=
; }

.p-2 { padding: 0.5rem !important; }

.pt-2 { padding-top: 0.5rem !important; }

.pr-2 { padding-right: 0.5rem !important; }

.pb-2 { padding-bottom: 0.5rem !important; }

.pl-2 { padding-left: 0.5rem !important; }

.px-2 { padding-right: 0.5rem !important; padding-left: 0.5rem !important; =
}

.py-2 { padding-top: 0.5rem !important; padding-bottom: 0.5rem !important; =
}

.p-3 { padding: 1rem !important; }

.pt-3 { padding-top: 1rem !important; }

.pr-3 { padding-right: 1rem !important; }

.pb-3 { padding-bottom: 1rem !important; }

.pl-3 { padding-left: 1rem !important; }

.px-3 { padding-right: 1rem !important; padding-left: 1rem !important; }

.py-3 { padding-top: 1rem !important; padding-bottom: 1rem !important; }

.p-4 { padding: 1.5rem !important; }

.pt-4 { padding-top: 1.5rem !important; }

.pr-4 { padding-right: 1.5rem !important; }

.pb-4 { padding-bottom: 1.5rem !important; }

.pl-4 { padding-left: 1.5rem !important; }

.px-4 { padding-right: 1.5rem !important; padding-left: 1.5rem !important; =
}

.py-4 { padding-top: 1.5rem !important; padding-bottom: 1.5rem !important; =
}

.p-5 { padding: 3rem !important; }

.pt-5 { padding-top: 3rem !important; }

.pr-5 { padding-right: 3rem !important; }

.pb-5 { padding-bottom: 3rem !important; }

.pl-5 { padding-left: 3rem !important; }

.px-5 { padding-right: 3rem !important; padding-left: 3rem !important; }

.py-5 { padding-top: 3rem !important; padding-bottom: 3rem !important; }

.m-auto { margin: auto !important; }

.mt-auto { margin-top: auto !important; }

.mr-auto { margin-right: auto !important; }

.mb-auto { margin-bottom: auto !important; }

.ml-auto { margin-left: auto !important; }

.mx-auto { margin-right: auto !important; margin-left: auto !important; }

.my-auto { margin-top: auto !important; margin-bottom: auto !important; }

@media (min-width: 576px) {
  .m-sm-0 { margin: 0px !important; }
  .mt-sm-0 { margin-top: 0px !important; }
  .mr-sm-0 { margin-right: 0px !important; }
  .mb-sm-0 { margin-bottom: 0px !important; }
  .ml-sm-0 { margin-left: 0px !important; }
  .mx-sm-0 { margin-right: 0px !important; margin-left: 0px !important; }
  .my-sm-0 { margin-top: 0px !important; margin-bottom: 0px !important; }
  .m-sm-1 { margin: 0.25rem !important; }
  .mt-sm-1 { margin-top: 0.25rem !important; }
  .mr-sm-1 { margin-right: 0.25rem !important; }
  .mb-sm-1 { margin-bottom: 0.25rem !important; }
  .ml-sm-1 { margin-left: 0.25rem !important; }
  .mx-sm-1 { margin-right: 0.25rem !important; margin-left: 0.25rem !import=
ant; }
  .my-sm-1 { margin-top: 0.25rem !important; margin-bottom: 0.25rem !import=
ant; }
  .m-sm-2 { margin: 0.5rem !important; }
  .mt-sm-2 { margin-top: 0.5rem !important; }
  .mr-sm-2 { margin-right: 0.5rem !important; }
  .mb-sm-2 { margin-bottom: 0.5rem !important; }
  .ml-sm-2 { margin-left: 0.5rem !important; }
  .mx-sm-2 { margin-right: 0.5rem !important; margin-left: 0.5rem !importan=
t; }
  .my-sm-2 { margin-top: 0.5rem !important; margin-bottom: 0.5rem !importan=
t; }
  .m-sm-3 { margin: 1rem !important; }
  .mt-sm-3 { margin-top: 1rem !important; }
  .mr-sm-3 { margin-right: 1rem !important; }
  .mb-sm-3 { margin-bottom: 1rem !important; }
  .ml-sm-3 { margin-left: 1rem !important; }
  .mx-sm-3 { margin-right: 1rem !important; margin-left: 1rem !important; }
  .my-sm-3 { margin-top: 1rem !important; margin-bottom: 1rem !important; }
  .m-sm-4 { margin: 1.5rem !important; }
  .mt-sm-4 { margin-top: 1.5rem !important; }
  .mr-sm-4 { margin-right: 1.5rem !important; }
  .mb-sm-4 { margin-bottom: 1.5rem !important; }
  .ml-sm-4 { margin-left: 1.5rem !important; }
  .mx-sm-4 { margin-right: 1.5rem !important; margin-left: 1.5rem !importan=
t; }
  .my-sm-4 { margin-top: 1.5rem !important; margin-bottom: 1.5rem !importan=
t; }
  .m-sm-5 { margin: 3rem !important; }
  .mt-sm-5 { margin-top: 3rem !important; }
  .mr-sm-5 { margin-right: 3rem !important; }
  .mb-sm-5 { margin-bottom: 3rem !important; }
  .ml-sm-5 { margin-left: 3rem !important; }
  .mx-sm-5 { margin-right: 3rem !important; margin-left: 3rem !important; }
  .my-sm-5 { margin-top: 3rem !important; margin-bottom: 3rem !important; }
  .p-sm-0 { padding: 0px !important; }
  .pt-sm-0 { padding-top: 0px !important; }
  .pr-sm-0 { padding-right: 0px !important; }
  .pb-sm-0 { padding-bottom: 0px !important; }
  .pl-sm-0 { padding-left: 0px !important; }
  .px-sm-0 { padding-right: 0px !important; padding-left: 0px !important; }
  .py-sm-0 { padding-top: 0px !important; padding-bottom: 0px !important; }
  .p-sm-1 { padding: 0.25rem !important; }
  .pt-sm-1 { padding-top: 0.25rem !important; }
  .pr-sm-1 { padding-right: 0.25rem !important; }
  .pb-sm-1 { padding-bottom: 0.25rem !important; }
  .pl-sm-1 { padding-left: 0.25rem !important; }
  .px-sm-1 { padding-right: 0.25rem !important; padding-left: 0.25rem !impo=
rtant; }
  .py-sm-1 { padding-top: 0.25rem !important; padding-bottom: 0.25rem !impo=
rtant; }
  .p-sm-2 { padding: 0.5rem !important; }
  .pt-sm-2 { padding-top: 0.5rem !important; }
  .pr-sm-2 { padding-right: 0.5rem !important; }
  .pb-sm-2 { padding-bottom: 0.5rem !important; }
  .pl-sm-2 { padding-left: 0.5rem !important; }
  .px-sm-2 { padding-right: 0.5rem !important; padding-left: 0.5rem !import=
ant; }
  .py-sm-2 { padding-top: 0.5rem !important; padding-bottom: 0.5rem !import=
ant; }
  .p-sm-3 { padding: 1rem !important; }
  .pt-sm-3 { padding-top: 1rem !important; }
  .pr-sm-3 { padding-right: 1rem !important; }
  .pb-sm-3 { padding-bottom: 1rem !important; }
  .pl-sm-3 { padding-left: 1rem !important; }
  .px-sm-3 { padding-right: 1rem !important; padding-left: 1rem !important;=
 }
  .py-sm-3 { padding-top: 1rem !important; padding-bottom: 1rem !important;=
 }
  .p-sm-4 { padding: 1.5rem !important; }
  .pt-sm-4 { padding-top: 1.5rem !important; }
  .pr-sm-4 { padding-right: 1.5rem !important; }
  .pb-sm-4 { padding-bottom: 1.5rem !important; }
  .pl-sm-4 { padding-left: 1.5rem !important; }
  .px-sm-4 { padding-right: 1.5rem !important; padding-left: 1.5rem !import=
ant; }
  .py-sm-4 { padding-top: 1.5rem !important; padding-bottom: 1.5rem !import=
ant; }
  .p-sm-5 { padding: 3rem !important; }
  .pt-sm-5 { padding-top: 3rem !important; }
  .pr-sm-5 { padding-right: 3rem !important; }
  .pb-sm-5 { padding-bottom: 3rem !important; }
  .pl-sm-5 { padding-left: 3rem !important; }
  .px-sm-5 { padding-right: 3rem !important; padding-left: 3rem !important;=
 }
  .py-sm-5 { padding-top: 3rem !important; padding-bottom: 3rem !important;=
 }
  .m-sm-auto { margin: auto !important; }
  .mt-sm-auto { margin-top: auto !important; }
  .mr-sm-auto { margin-right: auto !important; }
  .mb-sm-auto { margin-bottom: auto !important; }
  .ml-sm-auto { margin-left: auto !important; }
  .mx-sm-auto { margin-right: auto !important; margin-left: auto !important=
; }
  .my-sm-auto { margin-top: auto !important; margin-bottom: auto !important=
; }
}

@media (min-width: 768px) {
  .m-md-0 { margin: 0px !important; }
  .mt-md-0 { margin-top: 0px !important; }
  .mr-md-0 { margin-right: 0px !important; }
  .mb-md-0 { margin-bottom: 0px !important; }
  .ml-md-0 { margin-left: 0px !important; }
  .mx-md-0 { margin-right: 0px !important; margin-left: 0px !important; }
  .my-md-0 { margin-top: 0px !important; margin-bottom: 0px !important; }
  .m-md-1 { margin: 0.25rem !important; }
  .mt-md-1 { margin-top: 0.25rem !important; }
  .mr-md-1 { margin-right: 0.25rem !important; }
  .mb-md-1 { margin-bottom: 0.25rem !important; }
  .ml-md-1 { margin-left: 0.25rem !important; }
  .mx-md-1 { margin-right: 0.25rem !important; margin-left: 0.25rem !import=
ant; }
  .my-md-1 { margin-top: 0.25rem !important; margin-bottom: 0.25rem !import=
ant; }
  .m-md-2 { margin: 0.5rem !important; }
  .mt-md-2 { margin-top: 0.5rem !important; }
  .mr-md-2 { margin-right: 0.5rem !important; }
  .mb-md-2 { margin-bottom: 0.5rem !important; }
  .ml-md-2 { margin-left: 0.5rem !important; }
  .mx-md-2 { margin-right: 0.5rem !important; margin-left: 0.5rem !importan=
t; }
  .my-md-2 { margin-top: 0.5rem !important; margin-bottom: 0.5rem !importan=
t; }
  .m-md-3 { margin: 1rem !important; }
  .mt-md-3 { margin-top: 1rem !important; }
  .mr-md-3 { margin-right: 1rem !important; }
  .mb-md-3 { margin-bottom: 1rem !important; }
  .ml-md-3 { margin-left: 1rem !important; }
  .mx-md-3 { margin-right: 1rem !important; margin-left: 1rem !important; }
  .my-md-3 { margin-top: 1rem !important; margin-bottom: 1rem !important; }
  .m-md-4 { margin: 1.5rem !important; }
  .mt-md-4 { margin-top: 1.5rem !important; }
  .mr-md-4 { margin-right: 1.5rem !important; }
  .mb-md-4 { margin-bottom: 1.5rem !important; }
  .ml-md-4 { margin-left: 1.5rem !important; }
  .mx-md-4 { margin-right: 1.5rem !important; margin-left: 1.5rem !importan=
t; }
  .my-md-4 { margin-top: 1.5rem !important; margin-bottom: 1.5rem !importan=
t; }
  .m-md-5 { margin: 3rem !important; }
  .mt-md-5 { margin-top: 3rem !important; }
  .mr-md-5 { margin-right: 3rem !important; }
  .mb-md-5 { margin-bottom: 3rem !important; }
  .ml-md-5 { margin-left: 3rem !important; }
  .mx-md-5 { margin-right: 3rem !important; margin-left: 3rem !important; }
  .my-md-5 { margin-top: 3rem !important; margin-bottom: 3rem !important; }
  .p-md-0 { padding: 0px !important; }
  .pt-md-0 { padding-top: 0px !important; }
  .pr-md-0 { padding-right: 0px !important; }
  .pb-md-0 { padding-bottom: 0px !important; }
  .pl-md-0 { padding-left: 0px !important; }
  .px-md-0 { padding-right: 0px !important; padding-left: 0px !important; }
  .py-md-0 { padding-top: 0px !important; padding-bottom: 0px !important; }
  .p-md-1 { padding: 0.25rem !important; }
  .pt-md-1 { padding-top: 0.25rem !important; }
  .pr-md-1 { padding-right: 0.25rem !important; }
  .pb-md-1 { padding-bottom: 0.25rem !important; }
  .pl-md-1 { padding-left: 0.25rem !important; }
  .px-md-1 { padding-right: 0.25rem !important; padding-left: 0.25rem !impo=
rtant; }
  .py-md-1 { padding-top: 0.25rem !important; padding-bottom: 0.25rem !impo=
rtant; }
  .p-md-2 { padding: 0.5rem !important; }
  .pt-md-2 { padding-top: 0.5rem !important; }
  .pr-md-2 { padding-right: 0.5rem !important; }
  .pb-md-2 { padding-bottom: 0.5rem !important; }
  .pl-md-2 { padding-left: 0.5rem !important; }
  .px-md-2 { padding-right: 0.5rem !important; padding-left: 0.5rem !import=
ant; }
  .py-md-2 { padding-top: 0.5rem !important; padding-bottom: 0.5rem !import=
ant; }
  .p-md-3 { padding: 1rem !important; }
  .pt-md-3 { padding-top: 1rem !important; }
  .pr-md-3 { padding-right: 1rem !important; }
  .pb-md-3 { padding-bottom: 1rem !important; }
  .pl-md-3 { padding-left: 1rem !important; }
  .px-md-3 { padding-right: 1rem !important; padding-left: 1rem !important;=
 }
  .py-md-3 { padding-top: 1rem !important; padding-bottom: 1rem !important;=
 }
  .p-md-4 { padding: 1.5rem !important; }
  .pt-md-4 { padding-top: 1.5rem !important; }
  .pr-md-4 { padding-right: 1.5rem !important; }
  .pb-md-4 { padding-bottom: 1.5rem !important; }
  .pl-md-4 { padding-left: 1.5rem !important; }
  .px-md-4 { padding-right: 1.5rem !important; padding-left: 1.5rem !import=
ant; }
  .py-md-4 { padding-top: 1.5rem !important; padding-bottom: 1.5rem !import=
ant; }
  .p-md-5 { padding: 3rem !important; }
  .pt-md-5 { padding-top: 3rem !important; }
  .pr-md-5 { padding-right: 3rem !important; }
  .pb-md-5 { padding-bottom: 3rem !important; }
  .pl-md-5 { padding-left: 3rem !important; }
  .px-md-5 { padding-right: 3rem !important; padding-left: 3rem !important;=
 }
  .py-md-5 { padding-top: 3rem !important; padding-bottom: 3rem !important;=
 }
  .m-md-auto { margin: auto !important; }
  .mt-md-auto { margin-top: auto !important; }
  .mr-md-auto { margin-right: auto !important; }
  .mb-md-auto { margin-bottom: auto !important; }
  .ml-md-auto { margin-left: auto !important; }
  .mx-md-auto { margin-right: auto !important; margin-left: auto !important=
; }
  .my-md-auto { margin-top: auto !important; margin-bottom: auto !important=
; }
}

@media (min-width: 992px) {
  .m-lg-0 { margin: 0px !important; }
  .mt-lg-0 { margin-top: 0px !important; }
  .mr-lg-0 { margin-right: 0px !important; }
  .mb-lg-0 { margin-bottom: 0px !important; }
  .ml-lg-0 { margin-left: 0px !important; }
  .mx-lg-0 { margin-right: 0px !important; margin-left: 0px !important; }
  .my-lg-0 { margin-top: 0px !important; margin-bottom: 0px !important; }
  .m-lg-1 { margin: 0.25rem !important; }
  .mt-lg-1 { margin-top: 0.25rem !important; }
  .mr-lg-1 { margin-right: 0.25rem !important; }
  .mb-lg-1 { margin-bottom: 0.25rem !important; }
  .ml-lg-1 { margin-left: 0.25rem !important; }
  .mx-lg-1 { margin-right: 0.25rem !important; margin-left: 0.25rem !import=
ant; }
  .my-lg-1 { margin-top: 0.25rem !important; margin-bottom: 0.25rem !import=
ant; }
  .m-lg-2 { margin: 0.5rem !important; }
  .mt-lg-2 { margin-top: 0.5rem !important; }
  .mr-lg-2 { margin-right: 0.5rem !important; }
  .mb-lg-2 { margin-bottom: 0.5rem !important; }
  .ml-lg-2 { margin-left: 0.5rem !important; }
  .mx-lg-2 { margin-right: 0.5rem !important; margin-left: 0.5rem !importan=
t; }
  .my-lg-2 { margin-top: 0.5rem !important; margin-bottom: 0.5rem !importan=
t; }
  .m-lg-3 { margin: 1rem !important; }
  .mt-lg-3 { margin-top: 1rem !important; }
  .mr-lg-3 { margin-right: 1rem !important; }
  .mb-lg-3 { margin-bottom: 1rem !important; }
  .ml-lg-3 { margin-left: 1rem !important; }
  .mx-lg-3 { margin-right: 1rem !important; margin-left: 1rem !important; }
  .my-lg-3 { margin-top: 1rem !important; margin-bottom: 1rem !important; }
  .m-lg-4 { margin: 1.5rem !important; }
  .mt-lg-4 { margin-top: 1.5rem !important; }
  .mr-lg-4 { margin-right: 1.5rem !important; }
  .mb-lg-4 { margin-bottom: 1.5rem !important; }
  .ml-lg-4 { margin-left: 1.5rem !important; }
  .mx-lg-4 { margin-right: 1.5rem !important; margin-left: 1.5rem !importan=
t; }
  .my-lg-4 { margin-top: 1.5rem !important; margin-bottom: 1.5rem !importan=
t; }
  .m-lg-5 { margin: 3rem !important; }
  .mt-lg-5 { margin-top: 3rem !important; }
  .mr-lg-5 { margin-right: 3rem !important; }
  .mb-lg-5 { margin-bottom: 3rem !important; }
  .ml-lg-5 { margin-left: 3rem !important; }
  .mx-lg-5 { margin-right: 3rem !important; margin-left: 3rem !important; }
  .my-lg-5 { margin-top: 3rem !important; margin-bottom: 3rem !important; }
  .p-lg-0 { padding: 0px !important; }
  .pt-lg-0 { padding-top: 0px !important; }
  .pr-lg-0 { padding-right: 0px !important; }
  .pb-lg-0 { padding-bottom: 0px !important; }
  .pl-lg-0 { padding-left: 0px !important; }
  .px-lg-0 { padding-right: 0px !important; padding-left: 0px !important; }
  .py-lg-0 { padding-top: 0px !important; padding-bottom: 0px !important; }
  .p-lg-1 { padding: 0.25rem !important; }
  .pt-lg-1 { padding-top: 0.25rem !important; }
  .pr-lg-1 { padding-right: 0.25rem !important; }
  .pb-lg-1 { padding-bottom: 0.25rem !important; }
  .pl-lg-1 { padding-left: 0.25rem !important; }
  .px-lg-1 { padding-right: 0.25rem !important; padding-left: 0.25rem !impo=
rtant; }
  .py-lg-1 { padding-top: 0.25rem !important; padding-bottom: 0.25rem !impo=
rtant; }
  .p-lg-2 { padding: 0.5rem !important; }
  .pt-lg-2 { padding-top: 0.5rem !important; }
  .pr-lg-2 { padding-right: 0.5rem !important; }
  .pb-lg-2 { padding-bottom: 0.5rem !important; }
  .pl-lg-2 { padding-left: 0.5rem !important; }
  .px-lg-2 { padding-right: 0.5rem !important; padding-left: 0.5rem !import=
ant; }
  .py-lg-2 { padding-top: 0.5rem !important; padding-bottom: 0.5rem !import=
ant; }
  .p-lg-3 { padding: 1rem !important; }
  .pt-lg-3 { padding-top: 1rem !important; }
  .pr-lg-3 { padding-right: 1rem !important; }
  .pb-lg-3 { padding-bottom: 1rem !important; }
  .pl-lg-3 { padding-left: 1rem !important; }
  .px-lg-3 { padding-right: 1rem !important; padding-left: 1rem !important;=
 }
  .py-lg-3 { padding-top: 1rem !important; padding-bottom: 1rem !important;=
 }
  .p-lg-4 { padding: 1.5rem !important; }
  .pt-lg-4 { padding-top: 1.5rem !important; }
  .pr-lg-4 { padding-right: 1.5rem !important; }
  .pb-lg-4 { padding-bottom: 1.5rem !important; }
  .pl-lg-4 { padding-left: 1.5rem !important; }
  .px-lg-4 { padding-right: 1.5rem !important; padding-left: 1.5rem !import=
ant; }
  .py-lg-4 { padding-top: 1.5rem !important; padding-bottom: 1.5rem !import=
ant; }
  .p-lg-5 { padding: 3rem !important; }
  .pt-lg-5 { padding-top: 3rem !important; }
  .pr-lg-5 { padding-right: 3rem !important; }
  .pb-lg-5 { padding-bottom: 3rem !important; }
  .pl-lg-5 { padding-left: 3rem !important; }
  .px-lg-5 { padding-right: 3rem !important; padding-left: 3rem !important;=
 }
  .py-lg-5 { padding-top: 3rem !important; padding-bottom: 3rem !important;=
 }
  .m-lg-auto { margin: auto !important; }
  .mt-lg-auto { margin-top: auto !important; }
  .mr-lg-auto { margin-right: auto !important; }
  .mb-lg-auto { margin-bottom: auto !important; }
  .ml-lg-auto { margin-left: auto !important; }
  .mx-lg-auto { margin-right: auto !important; margin-left: auto !important=
; }
  .my-lg-auto { margin-top: auto !important; margin-bottom: auto !important=
; }
}

@media (min-width: 1200px) {
  .m-xl-0 { margin: 0px !important; }
  .mt-xl-0 { margin-top: 0px !important; }
  .mr-xl-0 { margin-right: 0px !important; }
  .mb-xl-0 { margin-bottom: 0px !important; }
  .ml-xl-0 { margin-left: 0px !important; }
  .mx-xl-0 { margin-right: 0px !important; margin-left: 0px !important; }
  .my-xl-0 { margin-top: 0px !important; margin-bottom: 0px !important; }
  .m-xl-1 { margin: 0.25rem !important; }
  .mt-xl-1 { margin-top: 0.25rem !important; }
  .mr-xl-1 { margin-right: 0.25rem !important; }
  .mb-xl-1 { margin-bottom: 0.25rem !important; }
  .ml-xl-1 { margin-left: 0.25rem !important; }
  .mx-xl-1 { margin-right: 0.25rem !important; margin-left: 0.25rem !import=
ant; }
  .my-xl-1 { margin-top: 0.25rem !important; margin-bottom: 0.25rem !import=
ant; }
  .m-xl-2 { margin: 0.5rem !important; }
  .mt-xl-2 { margin-top: 0.5rem !important; }
  .mr-xl-2 { margin-right: 0.5rem !important; }
  .mb-xl-2 { margin-bottom: 0.5rem !important; }
  .ml-xl-2 { margin-left: 0.5rem !important; }
  .mx-xl-2 { margin-right: 0.5rem !important; margin-left: 0.5rem !importan=
t; }
  .my-xl-2 { margin-top: 0.5rem !important; margin-bottom: 0.5rem !importan=
t; }
  .m-xl-3 { margin: 1rem !important; }
  .mt-xl-3 { margin-top: 1rem !important; }
  .mr-xl-3 { margin-right: 1rem !important; }
  .mb-xl-3 { margin-bottom: 1rem !important; }
  .ml-xl-3 { margin-left: 1rem !important; }
  .mx-xl-3 { margin-right: 1rem !important; margin-left: 1rem !important; }
  .my-xl-3 { margin-top: 1rem !important; margin-bottom: 1rem !important; }
  .m-xl-4 { margin: 1.5rem !important; }
  .mt-xl-4 { margin-top: 1.5rem !important; }
  .mr-xl-4 { margin-right: 1.5rem !important; }
  .mb-xl-4 { margin-bottom: 1.5rem !important; }
  .ml-xl-4 { margin-left: 1.5rem !important; }
  .mx-xl-4 { margin-right: 1.5rem !important; margin-left: 1.5rem !importan=
t; }
  .my-xl-4 { margin-top: 1.5rem !important; margin-bottom: 1.5rem !importan=
t; }
  .m-xl-5 { margin: 3rem !important; }
  .mt-xl-5 { margin-top: 3rem !important; }
  .mr-xl-5 { margin-right: 3rem !important; }
  .mb-xl-5 { margin-bottom: 3rem !important; }
  .ml-xl-5 { margin-left: 3rem !important; }
  .mx-xl-5 { margin-right: 3rem !important; margin-left: 3rem !important; }
  .my-xl-5 { margin-top: 3rem !important; margin-bottom: 3rem !important; }
  .p-xl-0 { padding: 0px !important; }
  .pt-xl-0 { padding-top: 0px !important; }
  .pr-xl-0 { padding-right: 0px !important; }
  .pb-xl-0 { padding-bottom: 0px !important; }
  .pl-xl-0 { padding-left: 0px !important; }
  .px-xl-0 { padding-right: 0px !important; padding-left: 0px !important; }
  .py-xl-0 { padding-top: 0px !important; padding-bottom: 0px !important; }
  .p-xl-1 { padding: 0.25rem !important; }
  .pt-xl-1 { padding-top: 0.25rem !important; }
  .pr-xl-1 { padding-right: 0.25rem !important; }
  .pb-xl-1 { padding-bottom: 0.25rem !important; }
  .pl-xl-1 { padding-left: 0.25rem !important; }
  .px-xl-1 { padding-right: 0.25rem !important; padding-left: 0.25rem !impo=
rtant; }
  .py-xl-1 { padding-top: 0.25rem !important; padding-bottom: 0.25rem !impo=
rtant; }
  .p-xl-2 { padding: 0.5rem !important; }
  .pt-xl-2 { padding-top: 0.5rem !important; }
  .pr-xl-2 { padding-right: 0.5rem !important; }
  .pb-xl-2 { padding-bottom: 0.5rem !important; }
  .pl-xl-2 { padding-left: 0.5rem !important; }
  .px-xl-2 { padding-right: 0.5rem !important; padding-left: 0.5rem !import=
ant; }
  .py-xl-2 { padding-top: 0.5rem !important; padding-bottom: 0.5rem !import=
ant; }
  .p-xl-3 { padding: 1rem !important; }
  .pt-xl-3 { padding-top: 1rem !important; }
  .pr-xl-3 { padding-right: 1rem !important; }
  .pb-xl-3 { padding-bottom: 1rem !important; }
  .pl-xl-3 { padding-left: 1rem !important; }
  .px-xl-3 { padding-right: 1rem !important; padding-left: 1rem !important;=
 }
  .py-xl-3 { padding-top: 1rem !important; padding-bottom: 1rem !important;=
 }
  .p-xl-4 { padding: 1.5rem !important; }
  .pt-xl-4 { padding-top: 1.5rem !important; }
  .pr-xl-4 { padding-right: 1.5rem !important; }
  .pb-xl-4 { padding-bottom: 1.5rem !important; }
  .pl-xl-4 { padding-left: 1.5rem !important; }
  .px-xl-4 { padding-right: 1.5rem !important; padding-left: 1.5rem !import=
ant; }
  .py-xl-4 { padding-top: 1.5rem !important; padding-bottom: 1.5rem !import=
ant; }
  .p-xl-5 { padding: 3rem !important; }
  .pt-xl-5 { padding-top: 3rem !important; }
  .pr-xl-5 { padding-right: 3rem !important; }
  .pb-xl-5 { padding-bottom: 3rem !important; }
  .pl-xl-5 { padding-left: 3rem !important; }
  .px-xl-5 { padding-right: 3rem !important; padding-left: 3rem !important;=
 }
  .py-xl-5 { padding-top: 3rem !important; padding-bottom: 3rem !important;=
 }
  .m-xl-auto { margin: auto !important; }
  .mt-xl-auto { margin-top: auto !important; }
  .mr-xl-auto { margin-right: auto !important; }
  .mb-xl-auto { margin-bottom: auto !important; }
  .ml-xl-auto { margin-left: auto !important; }
  .mx-xl-auto { margin-right: auto !important; margin-left: auto !important=
; }
  .my-xl-auto { margin-top: auto !important; margin-bottom: auto !important=
; }
}

.text-justify { text-align: justify !important; }

.text-nowrap { white-space: nowrap !important; }

.text-truncate { overflow: hidden; text-overflow: ellipsis; white-space: no=
wrap; }

.text-left { text-align: left !important; }

.text-right { text-align: right !important; }

.text-center { text-align: center !important; }

@media (min-width: 576px) {
  .text-sm-left { text-align: left !important; }
  .text-sm-right { text-align: right !important; }
  .text-sm-center { text-align: center !important; }
}

@media (min-width: 768px) {
  .text-md-left { text-align: left !important; }
  .text-md-right { text-align: right !important; }
  .text-md-center { text-align: center !important; }
}

@media (min-width: 992px) {
  .text-lg-left { text-align: left !important; }
  .text-lg-right { text-align: right !important; }
  .text-lg-center { text-align: center !important; }
}

@media (min-width: 1200px) {
  .text-xl-left { text-align: left !important; }
  .text-xl-right { text-align: right !important; }
  .text-xl-center { text-align: center !important; }
}

.text-lowercase { text-transform: lowercase !important; }

.text-uppercase { text-transform: uppercase !important; }

.text-capitalize { text-transform: capitalize !important; }

.font-weight-normal { font-weight: 400; }

.font-weight-bold { font-weight: 700; }

.font-italic { font-style: italic; }

.text-white { color: rgb(255, 255, 255) !important; }

.text-primary { color: rgb(0, 123, 255) !important; }

a.text-primary:focus, a.text-primary:hover { color: rgb(0, 98, 204) !import=
ant; }

.text-secondary { color: rgb(134, 142, 150) !important; }

a.text-secondary:focus, a.text-secondary:hover { color: rgb(108, 117, 125) =
!important; }

.text-success { color: rgb(40, 167, 69) !important; }

a.text-success:focus, a.text-success:hover { color: rgb(30, 126, 52) !impor=
tant; }

.text-info { color: rgb(23, 162, 184) !important; }

a.text-info:focus, a.text-info:hover { color: rgb(17, 122, 139) !important;=
 }

.text-warning { color: rgb(255, 193, 7) !important; }

a.text-warning:focus, a.text-warning:hover { color: rgb(211, 158, 0) !impor=
tant; }

.text-danger { color: rgb(220, 53, 69) !important; }

a.text-danger:focus, a.text-danger:hover { color: rgb(189, 33, 48) !importa=
nt; }

.text-light { color: rgb(248, 249, 250) !important; }

a.text-light:focus, a.text-light:hover { color: rgb(218, 224, 229) !importa=
nt; }

.text-dark { color: rgb(52, 58, 64) !important; }

a.text-dark:focus, a.text-dark:hover { color: rgb(29, 33, 36) !important; }

.text-muted { color: rgb(134, 142, 150) !important; }

.text-hide { font: 0px / 0 a; color: transparent; text-shadow: none; backgr=
ound-color: transparent; border: 0px; }

.visible { visibility: visible !important; }

.invisible { visibility: hidden !important; }
------MultipartBoundary--GnEf29mHDl0EdyFbl8ooKttanCHpj7LsdK6pxfyeVY------
