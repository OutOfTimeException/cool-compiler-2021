import os

from lexer import tokenize
from parser import parse


def find_files(file_directory):
    files = os.listdir(file_directory)
    file_dict = {}

    for file in files:
        if file.endswith('cl'):
            f_name = file.split('.')[0]
        else:
            f_name = file.split('_')[0]

        try:
            file_dict[f_name].append(file)
        except KeyError:
            file_dict[f_name] = [file]

    return file_dict


def compare_errors(errors1: str, errors2: str) -> bool:
    for i in range(len(errors1)):
        s1 = errors1[i].replace("\"", '')
        s2 = errors2[i].replace("\"", '')
        if s1.lower() == s2.lower():
            return True


def test_lexer():
    programs_directory = '../tests/lexer'
    programs_files = [file for file in os.listdir(programs_directory) if file.endswith('.cl')]

    for program_file in programs_files:
        input('Press enter to analyze ' + program_file)
        program_route = programs_directory + '/' + program_file

        with open(program_route, 'r', encoding='UTF-8') as f:
            tokens, errors = tokenize(f.read())

        for token in tokens:
            print(token)
        print()
        if len(errors):
            print('ERRORS:')
            for error in errors:
                print(error)


def test_parser():
    file_directory = '../tests/parser'
    file_dict = find_files(file_directory)
    # print(file_dict)

    correct_tests = 0

    for program in file_dict:
        files = file_dict[program]
        if files[0].endswith('cl'):
            f_cl, f_errors = files
        else:
            f_errors, f_cl = files

        program_cl_route = file_directory + '/' + f_cl
        program_errors_route = file_directory + '/' + f_errors
        with open(program_cl_route, 'r', encoding='UTF-8') as f:
            tree, errors = parse(f.read())

        with open(program_errors_route, 'r', encoding='UTF-8') as f:
            text = f.read()
            program_errors = text.split('\n')
            # print(program_errors)
            # print(errors)

        for i in range(len(program_errors)):
            if compare_errors(program_errors, errors):
                correct_tests += 1
            else:
                print('#######################################')
                print("WRONG ANSWER")
                print('FILE NAME: ', program)
                print('PROGRAM ERRORS:', program_errors[i])
                print('ERRORS GENERATED BY PARSER:', errors[i])
    print('#######################################')
    print("TESTS PASSED: %i / %i" % (correct_tests, len(file_dict)))
